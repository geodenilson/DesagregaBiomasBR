# -*- coding: utf-8 -*-
"""
DesagregaBiomasBR Dialog
Interface do usu√°rio com assistente guiado
"""

import os
import tempfile
from qgis.PyQt import uic
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, pyqtSignal, QUrl, QTimer
from qgis.PyQt.QtGui import QIcon, QPixmap, QFont, QColor
from qgis.PyQt.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QGridLayout, 
                                 QLabel, QPushButton, QComboBox, QTextEdit, 
                                 QGroupBox, QRadioButton, QButtonGroup, 
                                 QScrollArea, QWidget, QSizePolicy, QFrame,
                                 QProgressBar, QMessageBox, QCheckBox, QSpacerItem)
from qgis.PyQt.QtNetwork import QNetworkAccessManager, QNetworkRequest, QNetworkReply
from qgis.core import (QgsProject, QgsVectorLayer, QgsWkbTypes, QgsGeometry, 
                       QgsRectangle, QgsCoordinateReferenceSystem, QgsFeature,
                       QgsPointXY, QgsApplication, QgsFeatureRequest)
from qgis.gui import QgsMapTool, QgsRubberBand, QgsMapToolEmitPoint

class DrawRectangleTool(QgsMapTool):
    """Ferramenta para desenhar ret√¢ngulo no canvas"""
    rectangleDrawn = pyqtSignal(QgsRectangle)
    
    def __init__(self, canvas):
        super().__init__(canvas)
        self.canvas = canvas
        self.rubber_band = None
        self.start_point = None
        self.end_point = None
        
    def canvasPressEvent(self, event):
        self.start_point = self.toMapCoordinates(event.pos())
        if self.rubber_band:
            self.rubber_band.reset()
        self.rubber_band = QgsRubberBand(self.canvas, QgsWkbTypes.PolygonGeometry)
        
    def canvasMoveEvent(self, event):
        if self.start_point and self.rubber_band:
            self.end_point = self.toMapCoordinates(event.pos())
            rect = QgsRectangle(self.start_point, self.end_point)
            self.rubber_band.setToGeometry(QgsGeometry.fromRect(rect), None)
            
    def canvasReleaseEvent(self, event):
        if self.start_point:
            self.end_point = self.toMapCoordinates(event.pos())
            rect = QgsRectangle(self.start_point, self.end_point)
            self.rectangleDrawn.emit(rect)
            if self.rubber_band:
                self.rubber_band.reset()
                self.rubber_band = None

class DesagregaBiomasBRDialog(QDialog):
    """Dialog principal do DesagregaBiomasBR"""

    def __init__(self):
        """Constructor."""
        super(DesagregaBiomasBRDialog, self).__init__()
        
        print("üîÑ DEBUG: Inicializando nova inst√¢ncia DesagregaBiomasBRDialog")
        
        # Configura√ß√µes da janela
        self.setWindowTitle("DesagregaBiomasBR")
        
        # Caminho base para os √≠cones
        self.plugin_dir = os.path.dirname(__file__)
        icon_path = os.path.join(self.plugin_dir, 'icones', 'mapa.png')
        if os.path.exists(icon_path):
            self.setWindowIcon(QIcon(icon_path))
        
        # CORRE√á√ÉO 1: Janela n√£o modal para n√£o bloquear o QGIS
        self.setModal(False)
        
        # CORRE√á√ÉO 2: Tamanho inicial menor e responsivo
        self.setMinimumSize(500, 400)
        self.resize(600, 450)  # Tamanho inicial menor
        
        # Permitir redimensionamento
        self.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)

        # SEMPRE reset completo de todas as vari√°veis
        self.reset_all_variables()
        
        # Shapefile IBGE local para limites
        self.ibge_shapefile_name = self.get_ibge_shapefile_name()
        self.ibge_shapefile_path = os.path.join(os.path.dirname(__file__), 'shapefile', f'{self.ibge_shapefile_name}.shp')
        
        # Configura√ß√µes dos temas
        self.biome_options = {
            'DETER': ['Cerrado', 'Amaz√¥nia Legal'],
            'PRODES': ['Amaz√¥nia', 'Amaz√¥nia Legal', 'Cerrado', 'Caatinga', 'Pantanal', 'Pampa', 'Mata Atl√¢ntica'],
            'TERRACLASS': ['Amaz√¥nia', 'Cerrado'],
            '√ÅREA QUEIMADA': ['Amaz√¥nia', 'Amaz√¥nia Legal', 'Cerrado', 'Caatinga', 'Pantanal', 'Pampa', 'Mata Atl√¢ntica']
        }
        
        # Anos dispon√≠veis por bioma para TERRACLASS
        self.terraclass_years = {
            'Amaz√¥nia': [2008, 2010, 2012, 2014, 2018, 2020, 2022],
            'Cerrado': [2018, 2020, 2022]
        }
        
        # Configura√ß√µes √ÅREA QUEIMADA
        # Base URL para downloads
        self.queimadas_base_url = "https://dataserver-coids.inpe.br/queimadas/queimadas/area_queimada/AQ1km/shp/"
        
        # Data de in√≠cio das √°rea queimada (setembro 2002)
        self.queimadas_start_date = "2002-09-01"
        
        # Gera anos dispon√≠veis dinamicamente (2002 at√© ano atual)
        import datetime
        current_year = datetime.datetime.now().year
        self.queimadas_years = list(range(2002, current_year + 1))
        
        # Gera meses dispon√≠veis dinamicamente (09/2002 at√© m√™s atual -1)
        self.queimadas_months = self.generate_queimadas_months()
        
        # Anos dispon√≠veis por bioma para PRODES (incrementais)
        self.prodes_years = {
            'Cerrado': [2002,2004,2006,2007,2008,2010,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024],
            'Pantanal': [2004,2006,2007,2008,2010,2011,2013,2014,2016,2017,2018,2019,2020,2021,2022,2023],
            'Pampa': [2004,2006,2007,2008,2010,2011,2013,2014,2016,2017,2018,2019,2020,2021,2022,2023],
            'Mata Atl√¢ntica': [2004,2006,2008,2010,2011,2013,2014,2016,2017,2018,2019,2020,2021,2022,2023],
            'Caatinga': [2004,2006,2008,2010,2011,2013,2014,2016,2017,2018,2019,2020,2021,2022,2023],
            'Amaz√¥nia': [2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023],
            'Amaz√¥nia Legal': [2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023]
        }
        
        # Anos dispon√≠veis para dados acumulados (incluem os anos dos prodes_base_years)
        self.prodes_years_acumulado = {
            'Cerrado': [2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024],
            'Pantanal': [2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024],
            'Pampa': [2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024],
            'Mata Atl√¢ntica': [2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024],
            'Caatinga': [2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024],
            'Amaz√¥nia': [2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024],
            'Amaz√¥nia Legal': [2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024]
        }
        
        # Anos iniciais para dados acumulados por bioma
        self.prodes_base_years = {
            'Cerrado': 2000,
            'Pantanal': 2000,
            'Pampa': 2000,
            'Mata Atl√¢ntica': 2000,
            'Caatinga': 2000,
            'Amaz√¥nia': 2007,
            'Amaz√¥nia Legal': 2007
        }
        
        # Ferramenta de desenho
        self.draw_tool = None
        
        # URLs e configura√ß√µes DETER
        self.deter_urls = {
            'Cerrado': 'https://terrabrasilis.dpi.inpe.br/geoserver/deter-cerrado-nb/deter_cerrado/ows',
            'Amaz√¥nia Legal': 'https://terrabrasilis.dpi.inpe.br/geoserver/deter-amz/deter_amz/ows'
        }
        
        # Classes DETER por bioma
        self.deter_classes = {
            'Cerrado': ['DESMATAMENTO_CR'],
            'Amaz√¥nia Legal': [
                'CICATRIZ_DE_QUEIMADA', 
                'CORTE_SELETIVO', 
                'CS_DESORDENADO', 
                'CS_GEOMETRICO', 
                'DEGRADACAO', 
                'DESMATAMENTO_CR', 
                'DESMATAMENTO_VEG', 
                'MINERACAO'
            ]
        }
        
        # Datas de in√≠cio DETER por bioma
        self.deter_start_dates = {
            'Cerrado': '2018-05-01',      # 01/05/2018
            'Amaz√¥nia Legal': '2016-08-02'  # 02/08/2016
        }
        
        # TypeNames DETER
        self.deter_typenames = {
            'Cerrado': 'deter-cerrado-nb:deter_cerrado',
            'Amaz√¥nia Legal': 'deter-amz:deter_amz'
        }

        # Network manager
        self.network_manager = QNetworkAccessManager()
        
        # Setup da UI
        self.setupUi()
        self.update_interface()

    def setupUi(self):
        """Configura√ß√£o da interface do usu√°rio"""
        # Layout principal
        main_layout = QVBoxLayout()
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(15, 15, 15, 15)
        
        # CORRE√á√ÉO 6: Cabe√ßalho reorganizado
        header_layout = self.create_header()
        main_layout.addLayout(header_layout)
        
        # CORRE√á√ÉO 2: √Årea de conte√∫do sem scroll, responsiva
        self.content_widget = QWidget()
        self.content_layout = QVBoxLayout(self.content_widget)
        self.content_layout.setContentsMargins(0, 0, 0, 0)
        
        # Adiciona diretamente sem scroll area
        main_layout.addWidget(self.content_widget)
        
        # Quadro de notas
        self.notes_frame = self.create_notes_frame()
        main_layout.addWidget(self.notes_frame)
        
        # Bot√µes de navega√ß√£o
        buttons_layout = self.create_navigation_buttons()
        main_layout.addLayout(buttons_layout)
        
        self.setLayout(main_layout)

    def reset_all_variables(self):
        """Reset COMPLETO de todas as vari√°veis para garantir estado limpo"""
        print("üßπ DEBUG: Executando reset_all_variables - zerando todas as vari√°veis")
        
        # Estado do assistente
        self.current_step = 1
        self.max_steps = 3
        
        # Sistema de notas inteligente
        self.config_note = ""
        self.status_note = ""
        self.final_note = ""
        
        # Dados do assistente principal
        self.selected_theme = None
        self.selected_biome = None
        self.cut_option = None
        self.selected_layer = None
        self.selected_field = None
        self.selected_element = None
        self.drawn_rectangle = None
        
        # Dados IBGE
        self.ibge_layer = None
        self.ibge_field = None
        self.ibge_element = None
        self.ibge_biome_region = None
        self.ibge_state = None
        self.ibge_municipality = None
        
        # Dados temporais (PRODES)
        self.data_type = None
        self.start_year = None
        self.end_year = None
        
        # Dados temporais (DETER)
        self.deter_start_year = None
        self.deter_end_year = None
        self.deter_selected_classes = []
        
        # Dados temporais (TERRACLASS)
        self.terraclass_year = None
        self.terraclass_state = None
        self.terraclass_municipality = None
        
        # Dados WFS (para op√ß√£o 3)
        self.wfs_type = None
        self.wfs_field = None
        self.wfs_element = None
        self.wfs_layer = None
        
        # Ferramentas de desenho
        self.draw_tool = None
        
        # Listas de processamento
        self.processing_layers = []
        self.urls_and_filters = {}
        
        # Sistema de rastreamento de processamentos para metadados
        self.processing_log = []
        
        # Sistema de abortar download
        self.abort_download = False  # Flag para abortar download
        self.download_in_progress = False  # Flag para controlar estado do download
        
        # Estado completamente limpo

    def add_processing_log(self, operation, details):
        """Registra um processamento realizado para incluir nos metadados"""
        try:
            import datetime
            timestamp = datetime.datetime.now().strftime('%H:%M:%S')
            
            log_entry = {
                'timestamp': timestamp,
                'operation': operation,
                'details': details
            }
            
            self.processing_log.append(log_entry)
            
        except Exception as e:
            pass  # Falha silenciosa no log n√£o deve interromper processamento
    
    def get_processing_summary(self):
        """Retorna resumo dos processamentos para metadados"""
        if not self.processing_log:
            return ["Nenhum processamento especial realizado (dados utilizados como baixados)"]
        
        summary = []
        for entry in self.processing_log:
            summary.append(f"{entry['timestamp']} - {entry['operation']}: {entry['details']}")
        
        return summary

    def create_header(self):
        """Cria o cabe√ßalho din√¢mico baseado na etapa atual"""
        header_layout = QHBoxLayout()
        
        # Determina √≠cones e t√≠tulo baseado na etapa
        if self.current_step == 1:
            # Etapa 1: Sele√ß√£o e Corte do Tema
            left_icon = 'layers.png'
            title_text = "SELE√á√ÉO DO TEMA"
            title_color = "#2e7c3f"
        elif self.current_step == 2:
            # Etapa 2: Filtros espec√≠ficos por tema
            if self.selected_theme == "PRODES":
                left_icon = 'prodes.png'
                title_text = f"FILTROS PRODES - {self.selected_biome.upper()}" if self.selected_biome else "FILTROS PRODES"
                title_color = "#2e7c3f"  # MUDADO PARA VERDE
            elif self.selected_theme == "DETER":
                left_icon = 'deter.png'  # Se existir
                title_text = f"FILTROS DETER - {self.selected_biome.upper()}" if self.selected_biome else "FILTROS DETER"
                title_color = "#2e7c3f"  # VERDE IGUAL AO PRODES
            elif self.selected_theme == "TERRACLASS":
                left_icon = 'terraclass.png'  # Se existir
                title_text = f"Filtros TERRACLASS - {self.selected_biome}" if self.selected_biome else "Filtros TERRACLASS"
                title_color = "#388e3c"
            elif self.selected_theme == "√ÅREA QUEIMADA":
                left_icon = 'queimadas.png'
                title_text = f"FILTROS √ÅREA QUEIMADA - {self.selected_biome.upper()}" if self.selected_biome else "FILTROS √ÅREA QUEIMADA"
                title_color = "#2e7c3f"
            else:
                left_icon = 'layers.png'
                title_text = "CONFIGURA√á√ïES DE PROCESSAMENTO"
                title_color = "#2e7c3f"
        else:
            # Etapa 3: Processamento Final
            left_icon = 'layers.png'
            title_text = "PROCESSAMENTO FINAL"
            title_color = "#2e7c3f"
        
        # √çcone esquerda
        self.icon_label_left = QLabel()
        left_icon_path = self.plugin_dir + f'/icones/{left_icon}'
        if os.path.exists(left_icon_path):
            pixmap_left = QPixmap(left_icon_path).scaled(48, 48, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        else:
            # Fallback para layers.png se o √≠cone espec√≠fico n√£o existir
            pixmap_left = QPixmap(self.plugin_dir + '/icones/layers.png').scaled(48, 48, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.icon_label_left.setPixmap(pixmap_left)
        
        # T√≠tulo central - GUARDAR REFER√äNCIA
        self.title_label = QLabel(title_text)
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        self.title_label.setFont(title_font)
        self.title_label.setAlignment(Qt.AlignCenter)
        self.title_label.setStyleSheet(f"color: {title_color};")
        
        # √çcone mapa (direita) - sempre o mesmo
        self.icon_label_right = QLabel()
        pixmap_right = QPixmap(self.plugin_dir + '/icones/mapa.png').scaled(48, 48, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.icon_label_right.setPixmap(pixmap_right)
        
        header_layout.addWidget(self.icon_label_left)
        header_layout.addStretch()
        header_layout.addWidget(self.title_label)
        header_layout.addStretch()
        header_layout.addWidget(self.icon_label_right)
        
        return header_layout

    def create_notes_frame(self):
        """Cria o quadro de notas"""
        notes_frame = QGroupBox("Notas")
        notes_layout = QVBoxLayout()
        
        self.notes_text = QTextEdit()
        self.notes_text.setMaximumHeight(80)
        self.notes_text.setReadOnly(True)
        self.notes_text.setPlainText("üí° DesagregaBiomasBR √© um plugin que facilita o acesso e processamento de dados dos principais sistemas de monitoramento ambiental brasileiro: üå≤ PRODES (desmatamento), üö® DETER (alertas), üî• QUEIMADAS (√°reas queimadas) e üèûÔ∏è TERRACLASS (uso da terra).")
        
        notes_layout.addWidget(self.notes_text)
        notes_frame.setLayout(notes_layout)
        
        return notes_frame

    def create_navigation_buttons(self):
        """Cria os bot√µes de navega√ß√£o"""
        buttons_layout = QHBoxLayout()
        
        self.btn_back = QPushButton("‚Üê Voltar")
        self.btn_cancel = QPushButton("Cancelar")
        self.btn_next = QPushButton("Avan√ßar ‚Üí")
        self.btn_finish = QPushButton("Finalizar")
        self.btn_process = QPushButton("üöÄ Iniciar Processamento")
        self.btn_abort = QPushButton("üõë Abortar Download")
        
        self.btn_back.clicked.connect(self.go_back)
        self.btn_cancel.clicked.connect(self.cancel_wizard)
        self.btn_next.clicked.connect(self.go_next)
        self.btn_finish.clicked.connect(self.finish_wizard)
        self.btn_process.clicked.connect(self.start_processing)
        self.btn_abort.clicked.connect(self.abort_processing)
        
        # Estilo dos bot√µes
        self.btn_cancel.setStyleSheet("background-color: #dc3545; color: white; font-weight: bold;")
        self.btn_process.setStyleSheet("background-color: #2e7c3f; color: white; font-weight: bold; padding: 8px;")
        
        # Inicialmente oculto (ser√° mostrado apenas na etapa 3)
        self.btn_process.setVisible(False)
        self.btn_abort.setVisible(False)  # Inicialmente oculto
        
        # Estilo do bot√£o abortar
        self.btn_abort.setStyleSheet("background-color: #dc3545; color: white; font-weight: bold; padding: 8px;")
        
        buttons_layout.addWidget(self.btn_cancel)
        buttons_layout.addWidget(self.btn_back)
        buttons_layout.addStretch()
        buttons_layout.addWidget(self.btn_next)
        buttons_layout.addWidget(self.btn_finish)
        buttons_layout.addWidget(self.btn_process)
        buttons_layout.addWidget(self.btn_abort)
        
        return buttons_layout

    def update_interface(self):
        """Atualiza a interface baseada no passo atual"""
        # Limpa o layout de conte√∫do
        self.clear_layout(self.content_layout)
        
        # Atualiza cabe√ßalho existente em vez de recriar
        self.update_header()
        
        # Atualiza o conte√∫do baseado no passo
        if self.current_step == 1:
            self.create_step1_content()
        elif self.current_step == 2:
            self.create_step2_content()
        elif self.current_step == 3:
            self.create_step3_content()
        
        # Atualiza bot√µes de navega√ß√£o
        self.update_navigation_buttons()
        
        # CORRE√á√ÉO 2: Ajusta o tamanho da janela dinamicamente
        self.adjustSize()
        # For√ßa atualiza√ß√£o do layout
        self.content_widget.updateGeometry()

    def update_header(self):
        """Atualiza apenas o conte√∫do do cabe√ßalho existente"""
        if not hasattr(self, 'icon_label_left') or not hasattr(self, 'icon_label_right'):
            return
            
        # Determina √≠cones e t√≠tulo baseado na etapa
        if self.current_step == 1:
            # Etapa 1: Sele√ß√£o e Corte do Tema
            left_icon = 'layers.png'
            title_text = "SELE√á√ÉO DO TEMA"
            title_color = "#2e7c3f"
        elif self.current_step == 2:
            # Etapa 2: Filtros espec√≠ficos por tema
            if self.selected_theme == "PRODES":
                left_icon = 'prodes.png'
                title_text = f"FILTROS PRODES - {self.selected_biome.upper()}" if self.selected_biome else "FILTROS PRODES"
                title_color = "#2e7c3f"  # MUDADO PARA VERDE
            elif self.selected_theme == "DETER":
                left_icon = 'deter.png'  # Se existir
                title_text = f"FILTROS DETER - {self.selected_biome.upper()}" if self.selected_biome else "FILTROS DETER"
                title_color = "#2e7c3f"  # VERDE IGUAL AO PRODES
            elif self.selected_theme == "TERRACLASS":
                left_icon = 'terraclass.png'  # Se existir
                title_text = f"Filtros TERRACLASS - {self.selected_biome}" if self.selected_biome else "Filtros TERRACLASS"
                title_color = "#388e3c"
            elif self.selected_theme == "√ÅREA QUEIMADA":
                left_icon = 'queimadas.png'
                title_text = f"FILTROS √ÅREA QUEIMADA - {self.selected_biome.upper()}" if self.selected_biome else "FILTROS √ÅREA QUEIMADA"
                title_color = "#2e7c3f"
            else:
                left_icon = 'layers.png'
                title_text = "CONFIGURA√á√ïES DE PROCESSAMENTO"
                title_color = "#2e7c3f"
        else:
            # Etapa 3: Processamento Final
            left_icon = 'layers.png'
            title_text = "PROCESSAMENTO FINAL"
            title_color = "#2e7c3f"
        
        # Atualiza √≠cone esquerda
        left_icon_path = self.plugin_dir + f'/icones/{left_icon}'
        if os.path.exists(left_icon_path):
            pixmap_left = QPixmap(left_icon_path).scaled(48, 48, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        else:
            # Fallback para layers.png se o √≠cone espec√≠fico n√£o existir
            pixmap_left = QPixmap(self.plugin_dir + '/icones/layers.png').scaled(48, 48, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.icon_label_left.setPixmap(pixmap_left)
        
        # Atualiza t√≠tulo se existe
        if hasattr(self, 'title_label'):
            self.title_label.setText(title_text)
            self.title_label.setStyleSheet(f"color: {title_color}; font-weight: bold; font-size: 14px;")
        
        # √çcone da direita sempre o mesmo (mapa)
        pixmap_right = QPixmap(self.plugin_dir + '/icones/mapa.png').scaled(48, 48, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.icon_label_right.setPixmap(pixmap_right)

    def clear_layout(self, layout):
        """Limpa todos os widgets de um layout"""
        while layout.count():
            child = layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()

    def create_step1_content(self):
        """Cria o conte√∫do da primeira etapa - Interface Responsiva"""
        
        # SEMPRE VIS√çVEL: Sele√ß√£o do Tema
        theme_group = QGroupBox("Sele√ß√£o do Tema")
        theme_layout = QVBoxLayout()
        
        self.theme_combo = QComboBox()
        self.theme_combo.addItems(["", "PRODES", "DETER", "TERRACLASS", "√ÅREA QUEIMADA"])
        self.theme_combo.currentTextChanged.connect(self.on_theme_changed_responsive)
        
        theme_layout.addWidget(self.theme_combo)
        theme_group.setLayout(theme_layout)
        self.content_layout.addWidget(theme_group)
        
        # APARECE AP√ìS TEMA: Sele√ß√£o do bioma/regi√£o
        self.biome_group = QGroupBox("Bioma/Regi√£o")
        biome_layout = QVBoxLayout()
        
        self.biome_combo = QComboBox()
        self.biome_combo.currentTextChanged.connect(self.on_biome_changed_responsive)
        
        biome_layout.addWidget(self.biome_combo)
        self.biome_group.setLayout(biome_layout)
        self.content_layout.addWidget(self.biome_group)
        
        # APARECE AP√ìS BIOMA: Limite de corte (opcional)
        self.cut_group = QGroupBox("Limite de corte (opcional)")
        cut_layout = QVBoxLayout()
        
        # Op√ß√µes de corte
        self.cut_button_group = QButtonGroup()
        
        self.radio_no_cut = QRadioButton("Sem limite de corte (todo o bioma/regi√£o)")
        self.radio_loaded_layer = QRadioButton("Usar layer j√° carregado no QGIS")
        self.radio_draw = QRadioButton("Desenhar na tela")
        self.radio_ibge = QRadioButton(f"Limites IBGE ({self.ibge_shapefile_name})")
        
        self.cut_button_group.addButton(self.radio_no_cut, 0)
        self.cut_button_group.addButton(self.radio_loaded_layer, 1)
        self.cut_button_group.addButton(self.radio_draw, 2)
        self.cut_button_group.addButton(self.radio_ibge, 3)
        
        self.radio_no_cut.setChecked(True)
        
        cut_layout.addWidget(self.radio_no_cut)
        cut_layout.addWidget(self.radio_loaded_layer)
        cut_layout.addWidget(self.radio_draw)
        cut_layout.addWidget(self.radio_ibge)
        
        # Conecta sinais
        self.cut_button_group.buttonClicked.connect(self.on_cut_option_changed_responsive)
        
        self.cut_group.setLayout(cut_layout)
        self.content_layout.addWidget(self.cut_group)
        
        # √Årea para configura√ß√µes espec√≠ficas de cada op√ß√£o
        self.specific_config_widget = QWidget()
        self.specific_config_layout = QVBoxLayout(self.specific_config_widget)
        self.content_layout.addWidget(self.specific_config_widget)
        
        # ESTADO INICIAL: Apenas tema vis√≠vel
        self.biome_group.setVisible(False)
        self.cut_group.setVisible(False)
        self.specific_config_widget.setVisible(False)
        
        # Restaura sele√ß√µes anteriores se existirem (com l√≥gica responsiva)
        if self.selected_theme:
            self.theme_combo.setCurrentText(self.selected_theme)
            # Trigger responsivo ser√° chamado automaticamente
        
        # Interface come√ßa compacta
        self.force_resize_minimal()

    def create_step2_content(self):
        """Cria o conte√∫do da segunda etapa baseado no tema selecionado"""
        if self.selected_theme == "PRODES":
            self.create_prodes_step2_content()
        elif self.selected_theme == "DETER":
            self.create_deter_step2_content()
        elif self.selected_theme == "TERRACLASS":
            self.create_terraclass_step2_content()
        elif self.selected_theme == "√ÅREA QUEIMADA":
            self.create_queimadas_step2_content()
        else:
            # Fallback gen√©rico
            step_title = QLabel("ETAPA 2 - CONFIGURA√á√ïES DE PROCESSAMENTO")
            step_title.setStyleSheet("font-weight: bold; font-size: 12px; color: #2e7c3f;")
            self.content_layout.addWidget(step_title)
            
            info_label = QLabel("Selecione um tema na etapa anterior para continuar.")
            self.content_layout.addWidget(info_label)

    def create_step3_content(self):
        """Cria o conte√∫do da terceira etapa - Processamento Final"""
        
        # URLs dos servi√ßos PRODES por bioma
        self.prodes_urls = {
            'Pantanal': {
                'accumulated': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-pantanal-nb/accumulated_deforestation_2000/ows',
                'yearly': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-pantanal-nb/yearly_deforestation/ows'
            },
            'Amaz√¥nia': {
                'accumulated': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-amazon-nb/accumulated_deforestation_2007_biome/ows',
                'yearly': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-amazon-nb/yearly_deforestation_biome/ows'
            },
            'Cerrado': {
                'accumulated': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-cerrado-nb/accumulated_deforestation_2000/ows',
                'yearly': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-cerrado-nb/yearly_deforestation/ows'
            },
            'Pampa': {
                'accumulated': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-pampa-nb/accumulated_deforestation_2000/ows',
                'yearly': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-pampa-nb/yearly_deforestation/ows'
            },
            'Caatinga': {
                'accumulated': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-caatinga-nb/accumulated_deforestation_2000/ows',
                'yearly': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-caatinga-nb/yearly_deforestation/ows'
            },
            'Mata Atl√¢ntica': {
                'accumulated': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-mata-atlantica-nb/accumulated_deforestation_2000/ows',
                'yearly': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-mata-atlantica-nb/yearly_deforestation/ows'
            },
            'Amaz√¥nia Legal': {
                'accumulated': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-legal-amz/accumulated_deforestation_2007/ows',
                'yearly': 'https://terrabrasilis.dpi.inpe.br/geoserver/prodes-legal-amz/yearly_deforestation/ows'
            }
        }
        
        # Configura√ß√µes de Salvamento
        save_group = QGroupBox("üìÅ Configura√ß√µes de Salvamento")
        save_layout = QVBoxLayout()
        
        # Pasta de destino
        dest_layout = QHBoxLayout()
        dest_label = QLabel("Pasta de destino:")
        self.dest_path_edit = QTextEdit()
        self.dest_path_edit.setMaximumHeight(25)
        self.dest_path_edit.setText("")  # Deixa em branco para usu√°rio configurar
        self.browse_button = QPushButton("üìÇ Procurar...")
        self.browse_button.clicked.connect(self.browse_destination_folder)
        
        dest_layout.addWidget(dest_label)
        dest_layout.addWidget(self.dest_path_edit)
        dest_layout.addWidget(self.browse_button)
        
        # Formato de sa√≠da
        format_layout = QHBoxLayout()
        format_label = QLabel("Formato de sa√≠da:")
        
        self.format_button_group = QButtonGroup()
        self.radio_shapefile = QRadioButton("Shapefile (.shp)")
        self.radio_geopackage = QRadioButton("GeoPackage (.gpkg)")
        self.radio_shapefile.setChecked(True)  # Padr√£o Shapefile
        
        self.format_button_group.addButton(self.radio_shapefile, 0)
        self.format_button_group.addButton(self.radio_geopackage, 1)
        
        format_layout.addWidget(format_label)
        format_layout.addWidget(self.radio_shapefile)
        format_layout.addWidget(self.radio_geopackage)
        format_layout.addStretch()
        
        # Op√ß√µes
        options_label = QLabel("Op√ß√µes:")
        self.checkbox_add_to_map = QCheckBox("Adicionar automaticamente ao mapa")
        self.checkbox_add_to_map.setChecked(True)
        self.checkbox_generate_metadata = QCheckBox("Gerar arquivo de metadados (.txt)")
        self.checkbox_generate_metadata.setChecked(True)
        
        save_layout.addLayout(dest_layout)
        save_layout.addLayout(format_layout)
        save_layout.addWidget(options_label)
        save_layout.addWidget(self.checkbox_add_to_map)
        save_layout.addWidget(self.checkbox_generate_metadata)
        
        save_group.setLayout(save_layout)
        self.content_layout.addWidget(save_group)
        
        # Status do Processamento
        status_group = QGroupBox("‚ö° Status do Processamento")
        status_layout = QVBoxLayout()
        
        self.status_label = QLabel("üí° Configure a pasta de destino e clique em 'Iniciar Processamento'")
        self.status_label.setStyleSheet("color: #1976d2; font-weight: bold;")
        
        # Barra de progresso sem porcentagem
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 0)  # Modo indeterminado
        self.progress_bar.setVisible(False)  # Inicialmente oculta
        
        status_layout.addWidget(self.status_label)
        status_layout.addWidget(self.progress_bar)
        
        status_group.setLayout(status_layout)
        self.content_layout.addWidget(status_group)
        
        # Resumo das sele√ß√µes nas notas
        self.update_processing_notes()
        
        # Ajustar tamanho da janela
        self.adjustSize()
        QTimer.singleShot(10, self.force_resize)

    def browse_destination_folder(self):
        """Abre di√°logo para escolher pasta de destino"""
        from qgis.PyQt.QtWidgets import QFileDialog
        
        folder = QFileDialog.getExistingDirectory(
            self,
            "Escolher pasta de destino",
            self.dest_path_edit.toPlainText(),
            QFileDialog.ShowDirsOnly
        )
        
        if folder:
            self.dest_path_edit.setText(folder)
            print(f"üîß DEBUG: Pasta de destino selecionada: {folder}")

    def update_processing_notes(self):
        """Atualiza as notas com resumo LIMPO das sele√ß√µes para confer√™ncia final"""
        notes_parts = []
        
        # Informa√ß√µes b√°sicas
        notes_parts.append(f"üìä Tema: {self.selected_theme}")
        notes_parts.append(f"üåø Bioma: {self.selected_biome}")
        
        # Informa√ß√µes espec√≠ficas por tema
        if self.selected_theme == "PRODES":
            # Informa√ß√µes temporais PRODES
            if hasattr(self, 'data_type') and self.data_type:
                type_text = "Incremental" if self.data_type == "incremental" else "Acumulado"
                notes_parts.append(f"üìà Tipo: {type_text}")
            
            # Per√≠odo temporal
            if hasattr(self, 'data_type') and self.data_type:
                if self.data_type == "incremental" and hasattr(self, 'start_year') and hasattr(self, 'end_year') and self.start_year and self.end_year:
                    notes_parts.append(f"üóìÔ∏è Per√≠odo: {self.start_year} - {self.end_year}")
                elif self.data_type == "acumulado" and hasattr(self, 'end_year') and self.end_year:
                    base_year = self.prodes_base_years.get(self.selected_biome, 2000)
                    notes_parts.append(f"üóìÔ∏è Per√≠odo: {base_year} - {self.end_year} (acumulado)")
                    # Para acumulado, mostra que usar√° 2 camadas (informa√ß√£o √∫til)
                    notes_parts.append(f"üìã Camadas: accumulated_deforestation + yearly_deforestation (at√© {self.end_year})")
                    
        elif self.selected_theme == "DETER":
            # Per√≠odo DETER
            if hasattr(self, 'deter_start_year') and hasattr(self, 'deter_end_year') and self.deter_start_year and self.deter_end_year:
                notes_parts.append(f"üóìÔ∏è Per√≠odo: {self.deter_start_year} - {self.deter_end_year}")
            
            # Classes DETER (informa√ß√£o resumida)
            if hasattr(self, 'deter_selected_classes') and isinstance(self.deter_selected_classes, list):
                if self.selected_biome in self.deter_classes:
                    total_available = len(self.deter_classes[self.selected_biome])
                    total_selected = len(self.deter_selected_classes)
                    
                    if total_selected == total_available:
                        notes_parts.append(f"üè∑Ô∏è Classes: Todas ({total_selected}) - SEM filtro")
                    else:
                        notes_parts.append(f"üè∑Ô∏è Classes: {total_selected} de {total_available} selecionadas")
                    
        elif self.selected_theme == "TERRACLASS":
            # Informa√ß√µes espec√≠ficas TERRACLASS
            if hasattr(self, 'terraclass_year') and self.terraclass_year:
                notes_parts.append(f"üóìÔ∏è Ano: {self.terraclass_year}")
            
            if hasattr(self, 'terraclass_state') and self.terraclass_state:
                notes_parts.append(f"üèõÔ∏è Estado: {self.terraclass_state}")
            
            if hasattr(self, 'terraclass_municipality') and self.terraclass_municipality:
                notes_parts.append(f"üèòÔ∏è Munic√≠pio: {self.terraclass_municipality}")
                
        elif self.selected_theme == "√ÅREA QUEIMADA":
            # Informa√ß√µes espec√≠ficas √ÅREA QUEIMADA
            if hasattr(self, 'queimadas_data_type') and self.queimadas_data_type:
                type_text = "Anual (dissolvido)" if self.queimadas_data_type == "anual" else "Mensal (original)"
                notes_parts.append(f"üìà Tipo: {type_text}")
            
            # Per√≠odo temporal
            if hasattr(self, 'queimadas_data_type') and self.queimadas_data_type:
                if self.queimadas_data_type == "anual" and hasattr(self, 'queimadas_year') and self.queimadas_year:
                    notes_parts.append(f"üóìÔ∏è Ano: {self.queimadas_year}")
                elif self.queimadas_data_type == "mensal" and hasattr(self, 'queimadas_month') and self.queimadas_month:
                    year, month, _ = self.queimadas_month.split('_')
                    notes_parts.append(f"üóìÔ∏è Per√≠odo: {month}/{year}")
        
        # Informa√ß√µes de limite espacial (SIMPLIFICADAS)
        if self.selected_theme in ["PRODES", "DETER", "√ÅREA QUEIMADA"] and hasattr(self, 'cut_option') and self.cut_option is not None:
            if self.cut_option == 0:
                notes_parts.append("üìã Limite: Todo o bioma")
            elif self.cut_option == 1 and hasattr(self, 'selected_layer') and self.selected_layer:
                # Nome simplificado do layer
                layer_name = self.selected_layer.name()
                notes_parts.append(f"üìã Limite: {layer_name}")
            elif self.cut_option == 2:
                notes_parts.append("üìã Limite: Ret√¢ngulo desenhado")
            elif self.cut_option == 3:
                # Para IBGE, mostra informa√ß√£o mais espec√≠fica
                if hasattr(self, 'ibge_state') and self.ibge_state:
                    if hasattr(self, 'ibge_municipality') and self.ibge_municipality:
                        notes_parts.append(f"üìã Limite: IBGE - {self.ibge_state}, {self.ibge_municipality}")
                    else:
                        notes_parts.append(f"üìã Limite: IBGE - {self.ibge_state}")
                else:
                    notes_parts.append("üìã Limite: IBGE")
        
        if notes_parts:
            # USA O NOVO SISTEMA - linha de configura√ß√£o cont√≠nua
            config_text = " | ".join(notes_parts)
            self.update_notes(config_text, "config")
        else:
            theme_name = self.selected_theme if self.selected_theme else "dados"
            self.update_notes(f"üí° Processamento {theme_name} pronto para iniciar!", "config")

    def start_processing(self):
        """Inicia o processamento dos dados (PRODES ou DETER)"""
        print(f"üöÄ DEBUG: Iniciando processamento {self.selected_theme}")
        print(f"üîß DEBUG: Tema={self.selected_theme}, Bioma={self.selected_biome}")
        
        # Valida√ß√µes b√°sicas
        if not self.selected_theme or not self.selected_biome:
            self.update_notes("‚ùå ERRO: Tema e bioma devem estar selecionados!")
            return
        
        # Valida√ß√µes espec√≠ficas por tema
        if self.selected_theme == "PRODES":
            print(f"üîß DEBUG: Tipo={getattr(self, 'data_type', None)}, Baseado na coluna 'year'")
            print(f"üîß DEBUG: Anos={getattr(self, 'start_year', None)}-{getattr(self, 'end_year', None)}")
            
            if not hasattr(self, 'data_type') or not self.data_type:
                self.update_notes("‚ùå ERRO: Tipo de dados PRODES n√£o foi configurado!")
                return
            
            if not hasattr(self, 'end_year') or not self.end_year:
                self.update_notes("‚ùå ERRO: Per√≠odo temporal PRODES n√£o foi configurado!")
                return
            
            # Verifica se bioma tem URLs dispon√≠veis para PRODES
            if self.selected_biome not in self.prodes_urls:
                self.update_notes(f"‚ùå ERRO: URLs PRODES n√£o dispon√≠veis para {self.selected_biome}!")
                return
                
        elif self.selected_theme == "DETER":
            print(f"üîß DEBUG: Anos DETER={getattr(self, 'deter_start_year', None)}-{getattr(self, 'deter_end_year', None)}")
            print(f"üîß DEBUG: Classes selecionadas={getattr(self, 'deter_selected_classes', [])}")
            
            if not hasattr(self, 'deter_start_year') or not self.deter_start_year:
                self.update_notes("‚ùå ERRO: Per√≠odo DETER n√£o foi configurado!")
                return
            
            if not hasattr(self, 'deter_selected_classes') or not self.deter_selected_classes:
                self.update_notes("‚ùå ERRO: Classes DETER n√£o foram selecionadas!")
                return
            
            # Verifica se bioma tem URLs dispon√≠veis para DETER
            deter_urls = {
                'Cerrado': 'https://terrabrasilis.dpi.inpe.br/geoserver/deter-cerrado-nb/deter_cerrado/ows',
                'Amaz√¥nia Legal': 'https://terrabrasilis.dpi.inpe.br/geoserver/deter-amz/deter_amz/ows'
            }
            
            if self.selected_biome not in deter_urls:
                self.update_notes(f"‚ùå ERRO: URLs DETER n√£o dispon√≠veis para {self.selected_biome}!")
                return
        
        elif self.selected_theme == "TERRACLASS":
            print(f"üîß DEBUG: Ano TERRACLASS={getattr(self, 'terraclass_year', None)}")
            print(f"üîß DEBUG: Estado={getattr(self, 'terraclass_state', None)}")
            print(f"üîß DEBUG: Munic√≠pio={getattr(self, 'terraclass_municipality', None)}")
            
            if not hasattr(self, 'terraclass_year') or not self.terraclass_year:
                self.update_notes("‚ùå ERRO: Ano TERRACLASS n√£o foi configurado!")
                return
            
            if not hasattr(self, 'terraclass_state') or not self.terraclass_state:
                self.update_notes("‚ùå ERRO: Estado TERRACLASS n√£o foi configurado!")
                return
            
            # Verifica se bioma √© suportado pelo TERRACLASS
            terraclass_biomes = ['Amaz√¥nia', 'Cerrado']
            if self.selected_biome not in terraclass_biomes:
                self.update_notes(f"‚ùå ERRO: TERRACLASS n√£o dispon√≠vel para {self.selected_biome}!")
                return
        
        elif self.selected_theme == "√ÅREA QUEIMADA":
            print(f"üîß DEBUG: Tipo √ÅREA QUEIMADA={getattr(self, 'queimadas_data_type', None)}")
            print(f"üîß DEBUG: Per√≠odo={getattr(self, 'queimadas_year', None)} ou {getattr(self, 'queimadas_month', None)}")
            
            if not hasattr(self, 'queimadas_data_type') or not self.queimadas_data_type:
                self.update_notes("‚ùå ERRO: Tipo de dados √ÅREA QUEIMADA n√£o foi configurado!")
                return
            
            if self.queimadas_data_type == "anual":
                if not hasattr(self, 'queimadas_year') or not self.queimadas_year:
                    self.update_notes("‚ùå ERRO: Ano √ÅREA QUEIMADA n√£o foi configurado!")
                    return
            else:  # mensal
                if not hasattr(self, 'queimadas_month') or not self.queimadas_month:
                    self.update_notes("‚ùå ERRO: M√™s √ÅREA QUEIMADA n√£o foi configurado!")
                    return
        
        else:
            self.update_notes(f"‚ùå ERRO: Tema {self.selected_theme} n√£o suportado!")
            return
        
        # Valida pasta de destino
        dest_path = self.dest_path_edit.toPlainText().strip()
        if not dest_path:
            self.update_notes("‚ùå ERRO: Selecione uma pasta de destino!")
            return
        
        # Mostra barra de progresso e ativa modo download
        self.progress_bar.setVisible(True)
        self.status_label.setText(f"üîÑ Processando dados {self.selected_theme}...")
        self.start_download_mode()  # Ativa modo download com bot√£o abortar
        
        # Inicia processamento baseado no tema
        if self.selected_theme == "PRODES":
            QTimer.singleShot(100, self.process_prodes_data)
        elif self.selected_theme == "DETER":
            QTimer.singleShot(100, self.process_deter_data)
        elif self.selected_theme == "TERRACLASS":
            QTimer.singleShot(100, self.process_terraclass_data)
        elif self.selected_theme == "√ÅREA QUEIMADA":
            QTimer.singleShot(100, self.process_queimadas_data)
        else:
            self.update_notes(f"‚ùå ERRO: Processamento para {self.selected_theme} n√£o implementado!")
            self.end_download_mode(success=False)

    def process_prodes_data(self):
        """Processa os dados PRODES conforme configura√ß√µes - VERS√ÉO REAL"""
        try:
            print(f"üöÄ DEBUG: === INICIANDO PROCESSAMENTO REAL PRODES ===")
            
            # NOVO: Reseta log de processamentos para nova opera√ß√£o
            self.processing_log = []
            
            # Gera nome do arquivo baseado nas sele√ß√µes
            self.output_filename = self.generate_output_filename()
            print(f"üìÅ DEBUG: Nome do arquivo: {self.output_filename}")
            
            # Constr√≥i URLs e filtros CQL
            self.urls_and_filters = self.build_urls_and_filters()
            print(f"üåê DEBUG: URLs e filtros: {self.urls_and_filters}")
            
            # Inicia processamento REAL
            self.current_step_index = 0
            self.processing_layers = []  # Para armazenar layers baixadas
            
            # Etapa 1: Conectar aos servi√ßos PRODES
            self.real_step_connect_services()
            
        except Exception as e:
            print(f"‚ùå ERROR process_prodes_data: {str(e)}")
            self.status_label.setText(f"‚ùå Erro no processamento: {str(e)}")
            self.end_download_mode(success=False)

    def process_deter_data(self):
        """Processa os dados DETER conforme configura√ß√µes"""
        try:
            print(f"üöÄ DEBUG: === INICIANDO PROCESSAMENTO REAL DETER ===")
            
            # NOVO: Reseta log de processamentos para nova opera√ß√£o
            self.processing_log = []
            
            # Gera nome do arquivo baseado nas sele√ß√µes DETER
            self.output_filename = self.generate_deter_output_filename()
            print(f"üìÅ DEBUG: Nome do arquivo DETER: {self.output_filename}")
            
            # Constr√≥i URLs e filtros CQL para DETER
            self.urls_and_filters = self.build_deter_urls_and_filters()
            print(f"üåê DEBUG: URLs e filtros DETER: {self.urls_and_filters}")
            
            # Inicia processamento REAL
            self.current_step_index = 0
            self.processing_layers = []  # Para armazenar layers baixadas
            
            # Etapa 1: Conectar aos servi√ßos
            self.real_step_connect_services()
            
        except Exception as e:
            print(f"‚ùå ERROR process_deter_data: {str(e)}")
            self.status_label.setText(f"‚ùå Erro no processamento DETER: {str(e)}")
            self.end_download_mode(success=False)

    def real_step_connect_services(self):
        """Etapa 1: Conecta aos servi√ßos WFS (PRODES ou DETER)"""
        try:
            self.status_label.setText(f"üîÑ Conectando aos servi√ßos {self.selected_theme}...")
            self.update_notes(f"üìä Conectando ao servidor TerraBrasilis | Bioma: {self.selected_biome} | Tema: {self.selected_theme}", "status")
            
            # Testa conectividade com os servi√ßos
            urls = self.urls_and_filters['urls']
            all_connected = True
            
            for i, url in enumerate(urls):
                print(f"üåê DEBUG: Testando conectividade com {url[:60]}...")
                if not self.test_wfs_connectivity(url):
                    print(f"‚ùå DEBUG: Falha na conectividade com URL {i+1}")
                    all_connected = False
                    break
                else:
                    print(f"‚úÖ DEBUG: Conectividade OK com URL {i+1}")
            
            if all_connected:
                print(f"‚úÖ DEBUG: Todas as conex√µes WFS est√£o funcionais")
                # Agenda pr√≥xima etapa
                QTimer.singleShot(1000, self.real_step_download_data)
            else:
                raise Exception(f"Falha na conectividade com servi√ßos {self.selected_theme}")
                
        except Exception as e:
            print(f"‚ùå ERROR real_step_connect_services: {str(e)}")
            self.status_label.setText(f"‚ùå Erro na conex√£o: {str(e)}")
            self.progress_bar.setVisible(False)
            self.btn_process.setEnabled(True)

    def real_step_download_data(self):
        """Etapa 2: Baixa dados do servidor"""
        try:
            self.status_label.setText("üì• Baixando dados do servidor...")
            
            urls = self.urls_and_filters['urls']
            filters = self.urls_and_filters['filters']
            layer_names = self.urls_and_filters['layer_names']
            
            self.update_notes(f"üì• Baixando {len(urls)} camada(s) | {' + '.join(layer_names)}", "status")
            
            self.processing_layers = []
            
            for i, (url, filter_str, layer_name) in enumerate(zip(urls, filters, layer_names)):
                print(f"üîÑ DEBUG: Baixando camada {i+1}/{len(urls)}: {layer_name}")
                
                # NOVA IMPLEMENTA√á√ÉO: Constr√≥i URL simples com filtro
                if filter_str:
                    # Adiciona apenas o filtro CQL √† URL base
                    download_url = f"{url}?CQL_FILTER={filter_str}"
                else:
                    # URL base sem filtro para accumulated_deforestation
                    download_url = url
                
                print(f"üåê DEBUG: URL de download: {download_url[:100]}...")
                
                # Baixa a camada usando a nova implementa√ß√£o
                layer = self.download_wfs_layer(download_url, f"{layer_name}_{self.selected_biome}")
                
                if layer and layer.isValid() and layer.featureCount() > 0:
                    # CORRE√á√ÉO DETER: Aplica memory_filter se for DETER
                    if self.selected_theme == 'DETER' and 'memory_filter' in self.urls_and_filters and self.urls_and_filters['memory_filter']:
                        memory_filter = self.urls_and_filters['memory_filter']
                        print(f"‚è∞ DEBUG: Aplicando filtro DETER na mem√≥ria: {memory_filter}")
                        print(f"üìä DEBUG: Layer original DETER: {layer.featureCount()} fei√ß√µes")
                        
                        # Lista campos dispon√≠veis para debug
                        field_names = [field.name() for field in layer.fields()]
                        print(f"üîç DEBUG: Campos dispon√≠veis na layer: {field_names}")
                        
                        # Aplica filtro temporal/classes do DETER
                        filtered_layer = self.apply_temporal_filter(layer, memory_filter, f"{layer_name}_filtered")
                        if filtered_layer and filtered_layer.isValid():
                            original_count = layer.featureCount()
                            layer = filtered_layer
                            filtered_count = layer.featureCount()
                            print(f"‚úÖ DEBUG: Filtro DETER aplicado: {filtered_count} fei√ß√µes (de {original_count} originais)")
                            
                            # Debug adicional: verifica se restaram fei√ß√µes ap√≥s filtro
                            if filtered_count == 0:
                                print(f"‚ö†Ô∏è WARNING: Filtro DETER resultou em 0 fei√ß√µes - pode haver problema no filtro")
                                print(f"‚ö†Ô∏è DEBUG: Filtro aplicado: {memory_filter}")
                        else:
                            print(f"‚ö†Ô∏è DEBUG: Falha no filtro DETER, usando dados completos")
                    
                    self.processing_layers.append(layer)
                    print(f"‚úÖ DEBUG: Camada {layer_name} processada: {layer.featureCount()} fei√ß√µes")
                else:
                    raise Exception(f"Falha ao baixar camada {layer_name}")
            
            print(f"‚úÖ DEBUG: Todas as camadas baixadas com sucesso")
            
            # Agenda pr√≥xima etapa
            QTimer.singleShot(1000, self.real_step_apply_spatial_cut)
            
        except Exception as e:
            print(f"‚ùå ERROR real_step_download_data: {str(e)}")
            self.status_label.setText(f"‚ùå Erro no download: {str(e)}")
            self.end_download_mode(success=False)

    def download_wfs_layer(self, url, layer_name):
        """Baixa uma camada WFS com pagina√ß√£o autom√°tica - NOVA ESTRAT√âGIA SEPARADA"""
        try:
            print(f"üîÑ DEBUG: Baixando dados WFS com pagina√ß√£o: {layer_name}")
            print(f"üîÑ DEBUG: NOVA ESTRAT√âGIA - Filtros espaciais e temporais separados")
            
            # Extrai typename da URL base
            typename = self.extract_typename_from_url(url, layer_name)
            if not typename:
                print(f"‚ùå DEBUG: N√£o foi poss√≠vel extrair typename")
                return None
            
            # Separa URL base dos par√¢metros
            base_url = url.split('?')[0]
            
            # NOVA ESTRAT√âGIA: Extrai filtro CQL mas N√ÉO usa junto com BBOX
            original_cql_filter = None
            if 'CQL_FILTER=' in url:
                original_cql_filter = url.split('CQL_FILTER=')[1].split('&')[0]
                original_cql_filter = original_cql_filter.replace('%20', ' ').replace('%27', "'")
                print(f"üîç DEBUG: Filtro temporal extra√≠do (aplicado depois): {original_cql_filter}")
            # CORRE√á√ÉO: Verifica cut_option ANTES de tentar extrair BBOX
            bbox_filter = None
            has_spatial_cut = False
            
            if hasattr(self, 'cut_option') and self.cut_option is not None and self.cut_option != 0:
                print(f"üó∫Ô∏è DEBUG: Usu√°rio selecionou corte espacial (cut_option={self.cut_option})")
                bbox_filter = self.get_cut_geometry_bbox()
                has_spatial_cut = bbox_filter is not None
                
                if has_spatial_cut:
                    print(f"‚úÖ DEBUG: BBOX extra√≠do: {bbox_filter}")
                else:
                    print(f"‚ö†Ô∏è DEBUG: BBOX n√£o p√¥de ser extra√≠do - corte espacial solicitado mas falhou")
            else:
                print(f"üåç DEBUG: Usu√°rio selecionou BIOMA TODO (cut_option={getattr(self, 'cut_option', 'None')})")
                print(f"üåç DEBUG: Nenhum BBOX necess√°rio - baixando bioma completo")
            
            
            # Configura√ß√£o de pagina√ß√£o
            page_size = 50000  # Tamanho de cada p√°gina
            start_index = 0
            all_temp_files = []
            total_features = 0
            
            if has_spatial_cut:
                print(f"üó∫Ô∏è DEBUG: ESTRAT√âGIA ESPACIAL: Download com BBOX apenas")
                print(f"üó∫Ô∏è DEBUG: BBOX: {bbox_filter}")
                print(f"üìä DEBUG: Iniciando download paginado COM BBOX (p√°ginas de {page_size} fei√ß√µes)")
            else:
                print(f"üåç DEBUG: ESTRAT√âGIA GLOBAL: Download sem filtros")
                print(f"üìä DEBUG: Iniciando download paginado SEM FILTROS (p√°ginas de {page_size} fei√ß√µes)")
            
            import requests
            import tempfile
            temp_dir = tempfile.gettempdir()
            
            # Loop de pagina√ß√£o
            page_number = 1
            while True:
                # VERIFICA√á√ÉO DE ABORT: Para interromper download se solicitado
                if self.check_abort_signal():
                    print(f"üõë DEBUG: Download abortado pelo usu√°rio na p√°gina {page_number}")
                    return None
                
                print(f"üìÑ DEBUG: Baixando p√°gina {page_number} (√≠ndice {start_index})...")
                
                # NOVA ESTRAT√âGIA: Par√¢metros diferentes baseados na presen√ßa de corte espacial
                if has_spatial_cut:
                    # Par√¢metros APENAS com BBOX (sem CQL_FILTER)
                    params = {
                "service": "WFS",
                        "version": "2.0.0",
                "request": "GetFeature",
                "typeName": typename,
                        "outputFormat": "GML2",
                        "srsName": "EPSG:4674",
                        "count": page_size,
                        "startIndex": start_index,
                        "BBOX": bbox_filter  # APENAS filtro espacial
                    }
                else:
                    # Par√¢metros SEM filtros (bioma completo)
                    params = {
                        "service": "WFS",
                        "version": "2.0.0",
                        "request": "GetFeature",
                        "typeName": typename,
                        "outputFormat": "GML2",
                        "srsName": "EPSG:4674",
                        "count": page_size,
                        "startIndex": start_index
                        # SEM BBOX e SEM CQL_FILTER
                    }
                
                # Atualiza notas com progresso
                if hasattr(self, 'update_notes'):
                    self.update_notes(f"üìÑ Baixando p√°gina {page_number} ({total_features} fei√ß√µes baixadas)", "status")
                
                # Processa eventos da interface para detectar clique no bot√£o abortar
                QgsApplication.processEvents()
                
                # Verifica√ß√£o de abort adicional antes da requisi√ß√£o HTTP
                if self.check_abort_signal():
                    print(f"üõë DEBUG: Download abortado antes da requisi√ß√£o da p√°gina {page_number}")
                    return None
                
                # Faz requisi√ß√£o
                response = requests.get(base_url, params=params, timeout=120)
                
                if response.status_code != 200:
                    print(f"‚ùå DEBUG: Erro HTTP {response.status_code} na p√°gina {page_number}")
                    if page_number == 1:
                        # Se a primeira p√°gina falha, tenta com WFS 1.0
                        print(f"üîÑ DEBUG: Tentando com WFS 1.0 sem pagina√ß√£o...")
                        return self.download_wfs_layer_fallback(url, layer_name)
                    else:
                        break  # Para o loop se p√°ginas subsequentes falham
                
                # Salva arquivo tempor√°rio desta p√°gina
                temp_file = os.path.join(temp_dir, f"{layer_name}_page_{page_number}_{id(self)}.gml")
                
                with open(temp_file, 'wb') as f:
                    f.write(response.content)
                
                # Verifica se a p√°gina tem dados v√°lidos
                if len(response.content) < 1000:
                    print(f"‚ö†Ô∏è DEBUG: P√°gina {page_number} muito pequena, verificando...")
                    with open(temp_file, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read(500)
                        if 'ows:ExceptionReport' in content or 'ServiceException' in content:
                            print(f"‚ùå DEBUG: Erro no servidor na p√°gina {page_number}")
                            break
                        elif 'numberOfFeatures="0"' in content or ('<wfs:FeatureCollection' in content and '</wfs:FeatureCollection>' in content and 'gml:featureMember' not in content):
                            print(f"‚úÖ DEBUG: P√°gina {page_number} vazia - fim dos dados")
                            break
                
                # Testa se a p√°gina tem fei√ß√µes
                test_layer = QgsVectorLayer(temp_file, f"test_page_{page_number}", "ogr")
                if test_layer.isValid():
                    page_features = test_layer.featureCount()
                    if page_features == 0:
                        print(f"‚úÖ DEBUG: P√°gina {page_number} sem fei√ß√µes - fim dos dados")
                        break
                    else:
                        print(f"‚úÖ DEBUG: P√°gina {page_number}: {page_features} fei√ß√µes")
                        all_temp_files.append(temp_file)
                        total_features += page_features
                        
                        # Se esta p√°gina tem menos fei√ß√µes que o tamanho da p√°gina, √© a √∫ltima
                        if page_features < page_size:
                            print(f"‚úÖ DEBUG: √öltima p√°gina detectada ({page_features} < {page_size})")
                            break
                else:
                    print(f"‚ùå DEBUG: P√°gina {page_number} inv√°lida")
                    break
                
                # Prepara pr√≥xima p√°gina
                start_index += page_size
                page_number += 1
                
                # Atualiza interface
                QgsApplication.processEvents()
                
                # Verifica√ß√£o final de abort entre p√°ginas
                if self.check_abort_signal():
                    print(f"üõë DEBUG: Download abortado entre p√°ginas {page_number-1} e {page_number}")
                    return None
                
                # Prote√ß√£o contra loop infinito
                if page_number > 100:  # M√°ximo 100 p√°ginas = 5 milh√µes de fei√ß√µes
                    print(f"‚ö†Ô∏è DEBUG: Limite de p√°ginas atingido (100)")
                    break
            
            print(f"üìä DEBUG: Download conclu√≠do - {total_features} fei√ß√µes em {len(all_temp_files)} p√°ginas")
            
            if not all_temp_files:
                print(f"‚ùå DEBUG: Nenhuma p√°gina v√°lida baixada")
                return None
            
            # Atualiza notas finais
            if hasattr(self, 'update_notes'):
                self.update_notes(f"üîó Combinando {len(all_temp_files)} p√°ginas ({total_features} fei√ß√µes)...", "status")
            
            # Se apenas uma p√°gina, usa ela diretamente
            if len(all_temp_files) == 1:
                final_layer = QgsVectorLayer(all_temp_files[0], layer_name, "ogr")
            else:
                # Combina m√∫ltiplas p√°ginas em uma layer √∫nica
                print(f"üîó DEBUG: Combinando {len(all_temp_files)} p√°ginas...")
                final_layer = self.merge_wfs_pages(all_temp_files, layer_name)
            
            if final_layer and final_layer.isValid():
                QgsApplication.processEvents()
                final_count = final_layer.featureCount()
                print(f"‚úÖ DEBUG: Layer final carregada com {final_count} fei√ß√µes")
                
                # CORRE√á√ÉO 2: For√ßa proje√ß√£o SIRGAS 2000 (EPSG:4674)
                target_crs = QgsCoordinateReferenceSystem("EPSG:4674")
                if final_layer.crs() != target_crs:
                    print(f"üó∫Ô∏è DEBUG: Corrigindo proje√ß√£o para SIRGAS 2000 (EPSG:4674)")
                    final_layer.setCrs(target_crs)
                
                # CORRE√á√ÉO 3: Aplica fix geometry nos dados PRODES baixados
                print(f"üîß DEBUG: Aplicando fix geometry nos dados PRODES baixados...")
                fixed_final_layer = self.auto_fix_geometries(final_layer, "prodes_downloaded")
                if fixed_final_layer and fixed_final_layer.isValid():
                    print(f"‚úÖ DEBUG: Fix geometry aplicado nos dados PRODES: {fixed_final_layer.featureCount()} fei√ß√µes")
                    final_layer = fixed_final_layer
                    # For√ßa proje√ß√£o novamente na layer corrigida
                    if final_layer.crs() != target_crs:
                        final_layer.setCrs(target_crs)
                else:
                    print(f"‚ö†Ô∏è DEBUG: Fix geometry falhou nos dados PRODES, usando layer original")
                
                # NOVA ESTRAT√âGIA: Aplica filtro temporal AP√ìS o download (se necess√°rio)
                if original_cql_filter:
                    print(f"‚è∞ DEBUG: Aplicando filtro temporal nos dados baixados...")
                    if hasattr(self, 'update_notes'):
                        self.update_notes(f"‚è∞ Aplicando filtro temporal: {original_cql_filter}", "status")
                    
                    filtered_layer = self.apply_temporal_filter(final_layer, original_cql_filter, layer_name)
                    if filtered_layer and filtered_layer.isValid():
                        # CORRE√á√ÉO 2: For√ßa proje√ß√£o tamb√©m na layer filtrada
                        if filtered_layer.crs() != target_crs:
                            print(f"üó∫Ô∏è DEBUG: Corrigindo proje√ß√£o da layer filtrada para SIRGAS 2000 (EPSG:4674)")
                            filtered_layer.setCrs(target_crs)
                        
                        filtered_count = filtered_layer.featureCount()
                        print(f"‚úÖ DEBUG: Filtro temporal aplicado: {filtered_count} fei√ß√µes")
                        
                        # Atualiza notas de sucesso
                        if hasattr(self, 'update_notes'):
                            self.update_notes(f"‚úÖ WFS baixado e filtrado: {filtered_count} fei√ß√µes")
                        
                        return filtered_layer
                    else:
                        print(f"‚ö†Ô∏è DEBUG: Falha no filtro temporal, retornando dados completos")
                        # Atualiza notas de sucesso
                        if hasattr(self, 'update_notes'):
                            self.update_notes(f"‚úÖ WFS baixado: {final_count} fei√ß√µes (sem filtro temporal)")
                        return final_layer
                else:
                    print(f"‚úÖ DEBUG: Sem filtro temporal necess√°rio")
                    # Atualiza notas de sucesso
                    if hasattr(self, 'update_notes'):
                        self.update_notes(f"‚úÖ WFS baixado: {final_count} fei√ß√µes ({len(all_temp_files)} p√°ginas)", "status")
                    return final_layer
            else:
                print(f"‚ùå DEBUG: Falha ao criar layer final")
                return None
                
        except Exception as e:
            print(f"‚ùå ERROR download_wfs_layer: {str(e)}")
            import traceback
            traceback.print_exc()
            return None

    def download_wfs_layer_fallback(self, url, layer_name):
        """Fallback para WFS 1.0 sem pagina√ß√£o - NOVA ESTRAT√âGIA SEPARADA"""
        try:
            print(f"üîÑ DEBUG: Fallback - Baixando dados WFS sem pagina√ß√£o: {layer_name}")
            print(f"üîÑ DEBUG: ESTRAT√âGIA SEPARADA tamb√©m no fallback")
            
            # Extrai typename da URL base
            typename = self.extract_typename_from_url(url, layer_name)
            # CORRE√á√ÉO: Verifica cut_option ANTES de tentar extrair BBOX (fallback)
            bbox_filter = None
            has_spatial_cut = False
            
            if hasattr(self, 'cut_option') and self.cut_option is not None and self.cut_option != 0:
                print(f"üó∫Ô∏è DEBUG: FALLBACK - Usu√°rio selecionou corte espacial (cut_option={self.cut_option})")
                bbox_filter = self.get_cut_geometry_bbox()
                has_spatial_cut = bbox_filter is not None
                
                if has_spatial_cut:
                    print(f"‚úÖ DEBUG: FALLBACK - BBOX extra√≠do: {bbox_filter}")
                else:
                    print(f"‚ö†Ô∏è DEBUG: FALLBACK - BBOX n√£o p√¥de ser extra√≠do")
            else:
                print(f"üåç DEBUG: FALLBACK - Usu√°rio selecionou BIOMA TODO (cut_option={getattr(self, 'cut_option', 'None')})")
                print(f"üåç DEBUG: FALLBACK - Nenhum BBOX necess√°rio")
            base_url = url.split('?')[0]
            
            # NOVA ESTRAT√âGIA: Extrai filtro CQL mas N√ÉO usa junto com BBOX
            original_cql_filter = None
            if 'CQL_FILTER=' in url:
                original_cql_filter = url.split('CQL_FILTER=')[1].split('&')[0]
                original_cql_filter = original_cql_filter.replace('%20', ' ').replace('%27', "'")
                print(f"üîç DEBUG: Filtro temporal extra√≠do (aplicado depois): {original_cql_filter}")
            
            # Verifica se h√° filtro espacial (BBOX)
            bbox_filter = self.get_cut_geometry_bbox()
            has_spatial_cut = bbox_filter is not None
            
            # NOVA ESTRAT√âGIA: Par√¢metros diferentes baseados na presen√ßa de corte espacial
            if has_spatial_cut:
                print(f"üó∫Ô∏è DEBUG: FALLBACK com BBOX apenas")
                # Par√¢metros APENAS com BBOX (sem CQL_FILTER)
                params = {
                    "service": "WFS",
                    "version": "1.0.0", 
                    "request": "GetFeature",
                    "typeName": typename,
                    "outputFormat": "GML2",
                    "srsName": "EPSG:4674",
                    "BBOX": bbox_filter  # APENAS filtro espacial
                }
            else:
                print(f"üåç DEBUG: FALLBACK sem filtros")
                # Par√¢metros SEM filtros
                params = {
                    "service": "WFS",
                    "version": "1.0.0", 
                    "request": "GetFeature",
                    "typeName": typename,
                    "outputFormat": "GML2",
                    "srsName": "EPSG:4674"
                    # SEM BBOX e SEM CQL_FILTER
                }
            
            print(f"üåê DEBUG: URL base: {base_url}")
            print(f"üìã DEBUG: Par√¢metros: {params}")
            
            # Faz download usando requests
            import requests
            response = requests.get(base_url, params=params, timeout=120)
            
            if response.status_code != 200:
                print(f"‚ùå DEBUG: Erro HTTP {response.status_code}: {response.text[:200]}")
                return None
            
            # Salva arquivo tempor√°rio
            import tempfile
            temp_dir = tempfile.gettempdir()
            temp_file = os.path.join(temp_dir, f"{layer_name}_{id(self)}.gml")
            
            with open(temp_file, 'wb') as f:
                f.write(response.content)
            
            print(f"üìÅ DEBUG: Arquivo tempor√°rio salvo: {temp_file}")
            print(f"üìä DEBUG: Tamanho do arquivo: {len(response.content)} bytes")
            
            # Carrega como layer do QGIS
            layer = QgsVectorLayer(temp_file, layer_name, "ogr")
            
            if not layer.isValid():
                print(f"‚ùå DEBUG: Layer inv√°lida: {layer.error().message()}")
                layer = QgsVectorLayer(f"{temp_file}|encoding=UTF-8", layer_name, "ogr")
                
                if not layer.isValid():
                    print(f"‚ùå DEBUG: Layer ainda inv√°lida mesmo com UTF-8")
                    return None
            
            QgsApplication.processEvents()
            feature_count = layer.featureCount()
            print(f"‚úÖ DEBUG: Layer fallback carregada com {feature_count} fei√ß√µes")
            
            # CORRE√á√ÉO 2: For√ßa proje√ß√£o SIRGAS 2000 (EPSG:4674) no fallback
            target_crs = QgsCoordinateReferenceSystem("EPSG:4674")
            if layer.crs() != target_crs:
                print(f"üó∫Ô∏è DEBUG: Corrigindo proje√ß√£o fallback para SIRGAS 2000 (EPSG:4674)")
                layer.setCrs(target_crs)
            
            # CORRE√á√ÉO 3: Aplica fix geometry nos dados PRODES baixados (fallback)
            print(f"üîß DEBUG: Aplicando fix geometry nos dados PRODES baixados (fallback)...")
            fixed_layer = self.auto_fix_geometries(layer, "prodes_downloaded_fallback")
            if fixed_layer and fixed_layer.isValid():
                print(f"‚úÖ DEBUG: Fix geometry aplicado nos dados PRODES (fallback): {fixed_layer.featureCount()} fei√ß√µes")
                layer = fixed_layer
                # For√ßa proje√ß√£o novamente na layer corrigida
                if layer.crs() != target_crs:
                    layer.setCrs(target_crs)
            else:
                print(f"‚ö†Ô∏è DEBUG: Fix geometry falhou nos dados PRODES (fallback), usando layer original")
            
            # NOVA ESTRAT√âGIA: Aplica filtro temporal AP√ìS o download (se necess√°rio)
            if original_cql_filter:
                print(f"‚è∞ DEBUG: Aplicando filtro temporal no fallback...")
                filtered_layer = self.apply_temporal_filter(layer, original_cql_filter, layer_name)
                if filtered_layer and filtered_layer.isValid():
                    # CORRE√á√ÉO 2: For√ßa proje√ß√£o na layer filtrada do fallback
                    if filtered_layer.crs() != target_crs:
                        print(f"üó∫Ô∏è DEBUG: Corrigindo proje√ß√£o da layer filtrada fallback para SIRGAS 2000 (EPSG:4674)")
                        filtered_layer.setCrs(target_crs)
                    
                    filtered_count = filtered_layer.featureCount()
                    print(f"‚úÖ DEBUG: Filtro temporal aplicado no fallback: {filtered_count} fei√ß√µes")
                    return filtered_layer
                else:
                    print(f"‚ö†Ô∏è DEBUG: Falha no filtro temporal fallback, retornando dados completos")
                    return layer
            else:
                print(f"‚úÖ DEBUG: Fallback sem filtro temporal necess√°rio")
                return layer
            
        except Exception as e:
            print(f"‚ùå ERROR download_wfs_layer_fallback: {str(e)}")
            return None

    def merge_wfs_pages(self, temp_files, layer_name):
        """Combina m√∫ltiplas p√°ginas WFS em uma layer √∫nica"""
        try:
            print(f"üîó DEBUG: Mesclando {len(temp_files)} p√°ginas WFS...")
            
            # Carrega primeira p√°gina como base
            first_layer = QgsVectorLayer(temp_files[0], "first_page", "ogr")
            if not first_layer.isValid():
                print(f"‚ùå DEBUG: Primeira p√°gina inv√°lida")
                return None
            
            # Cria layer em mem√≥ria para combinar todas
            memory_layer = QgsVectorLayer(f"Polygon?crs={first_layer.crs().authid()}", layer_name, "memory")
            memory_provider = memory_layer.dataProvider()
            
            # Adiciona campos da primeira layer
            memory_provider.addAttributes(first_layer.fields())
            memory_layer.updateFields()
            
            total_added = 0
            
            # Adiciona fei√ß√µes de todas as p√°ginas
            for i, temp_file in enumerate(temp_files):
                print(f"üîó DEBUG: Processando p√°gina {i+1}/{len(temp_files)}...")
                
                # Atualiza interface periodicamente
                if i % 5 == 0:
                    QgsApplication.processEvents()
                    if hasattr(self, 'update_notes'):
                        self.update_notes(f"üîó Combinando p√°gina {i+1}/{len(temp_files)} ({total_added} fei√ß√µes)", "status")
                
                page_layer = QgsVectorLayer(temp_file, f"page_{i+1}", "ogr")
                if page_layer.isValid():
                    features = list(page_layer.getFeatures())
                    if features:
                        memory_provider.addFeatures(features)
                        total_added += len(features)
                        print(f"‚úÖ DEBUG: Adicionadas {len(features)} fei√ß√µes da p√°gina {i+1}")
                else:
                    print(f"‚ö†Ô∏è DEBUG: P√°gina {i+1} inv√°lida, pulando...")
            
            memory_layer.updateExtents()
            print(f"‚úÖ DEBUG: Mesclagem conclu√≠da - {total_added} fei√ß√µes totais")
            
            return memory_layer
            
        except Exception as e:
            print(f"‚ùå ERROR merge_wfs_pages: {str(e)}")
            import traceback
            traceback.print_exc()
            return None

    def extract_typename_from_url(self, url, layer_name):
        """Extrai o typename correto baseado na URL e nome da layer"""
        try:
            # Mapeamento de typenames corretos por bioma
            typename_mapping = {
                'Pantanal': {
                    'accumulated_deforestation': 'prodes-pantanal-nb:accumulated_deforestation_2000',
                    'yearly_deforestation': 'prodes-pantanal-nb:yearly_deforestation',
                    'deter_alerts': 'deter-cerrado-nb:deter_cerrado'  # DETER Pantanal usa mesmo endpoint do Cerrado
                },
                'Amaz√¥nia': {
                    'accumulated_deforestation': 'prodes-amazon-nb:accumulated_deforestation_2007_biome',
                    'yearly_deforestation': 'prodes-amazon-nb:yearly_deforestation_biome',
                    'deter_alerts': 'deter-amz:deter_amz'
                },
                'Cerrado': {
                    'accumulated_deforestation': 'prodes-cerrado-nb:accumulated_deforestation_2000',
                    'yearly_deforestation': 'prodes-cerrado-nb:yearly_deforestation',
                    'deter_alerts': 'deter-cerrado-nb:deter_cerrado'
                },
                'Pampa': {
                    'accumulated_deforestation': 'prodes-pampa-nb:accumulated_deforestation_2000',
                    'yearly_deforestation': 'prodes-pampa-nb:yearly_deforestation',
                    'deter_alerts': 'deter-cerrado-nb:deter_cerrado'  # DETER Pampa usa mesmo endpoint do Cerrado
                },
                'Caatinga': {
                    'accumulated_deforestation': 'prodes-caatinga-nb:accumulated_deforestation_2000',
                    'yearly_deforestation': 'prodes-caatinga-nb:yearly_deforestation',
                    'deter_alerts': 'deter-cerrado-nb:deter_cerrado'  # DETER Caatinga usa mesmo endpoint do Cerrado
                },
                'Mata Atl√¢ntica': {
                    'accumulated_deforestation': 'prodes-mata-atlantica-nb:accumulated_deforestation_2000',
                    'yearly_deforestation': 'prodes-mata-atlantica-nb:yearly_deforestation',
                    'deter_alerts': 'deter-cerrado-nb:deter_cerrado'  # DETER Mata Atl√¢ntica usa mesmo endpoint do Cerrado
                },
                'Amaz√¥nia Legal': {
                    'accumulated_deforestation': 'prodes-legal-amz:accumulated_deforestation_2007',
                    'yearly_deforestation': 'prodes-legal-amz:yearly_deforestation',
                    'deter_alerts': 'deter-amz:deter_amz'
                }
            }
            
            # Determina tipo de layer
            if 'accumulated' in layer_name.lower():
                layer_type = 'accumulated_deforestation'
            elif 'deter' in layer_name.lower() or layer_name == 'deter_alerts':
                layer_type = 'deter_alerts'
            else:
                layer_type = 'yearly_deforestation'
            
            # Busca typename correto
            biome_mapping = typename_mapping.get(self.selected_biome, {})
            typename = biome_mapping.get(layer_type)
            
            if typename:
                print(f"‚úÖ DEBUG: Typename encontrado: {typename}")
                return typename
            else:
                print(f"‚ùå DEBUG: Typename n√£o encontrado para {self.selected_biome} - {layer_type}")
                # Fallback: extrai da URL
                if '/geoserver/' in url:
                    parts = url.split('/geoserver/')[1].split('/')[0:2]
                    if len(parts) >= 2:
                        namespace = parts[0]
                        layer_part = parts[1]
                        fallback_typename = f"{namespace}:{layer_part}"
                        print(f"üîÑ DEBUG: Usando fallback typename: {fallback_typename}")
                        return fallback_typename
                        
                return None
                
        except Exception as e:
            print(f"‚ùå ERROR extract_typename_from_url: {str(e)}")
            return None

    def get_cut_geometry_bbox(self):
        """
        Extrai bounding box da geometria de corte para otimiza√ß√£o WFS
        NOVA VERS√ÉO: Usa a mesma l√≥gica dos testes de BBOX que funcionaram
        """
        try:
            print(f"üó∫Ô∏è DEBUG: === EXTRA√á√ÉO DE BBOX PARA WFS ===")
            print(f"üîç DEBUG: Verificando vari√°veis dispon√≠veis...")
            
            # DEBUG COMPLETO: Verifica todas as vari√°veis
            print(f"üîç DEBUG: hasattr selected_layer: {hasattr(self, 'selected_layer')}")
            print(f"üîç DEBUG: selected_layer value: {getattr(self, 'selected_layer', 'N/A')}")
            print(f"üîç DEBUG: hasattr selected_field: {hasattr(self, 'selected_field')}")
            print(f"üîç DEBUG: selected_field value: {getattr(self, 'selected_field', 'N/A')}")
            print(f"üîç DEBUG: hasattr selected_element: {hasattr(self, 'selected_element')}")
            print(f"üîç DEBUG: selected_element value: {getattr(self, 'selected_element', 'N/A')}")
            
            # ESTRAT√âGIA 1: Se tem layer + campo + elemento selecionados (j√° testado e funcionando)
            if (hasattr(self, 'selected_layer') and self.selected_layer and 
                hasattr(self, 'selected_field') and self.selected_field and 
                hasattr(self, 'selected_element') and self.selected_element):
                
                print(f"                ‚úÖ DEBUG: TODAS as vari√°veis est√£o dispon√≠veis!")
                print(f"üéØ DEBUG: Usando layer espec√≠fico: {self.selected_layer.name()}")
                print(f"üéØ DEBUG: Campo: {self.selected_field}, Elemento: {self.selected_element}")
                
                # CORRE√á√ÉO: Fix geometries antes de aplicar filtro
                print(f"üîß DEBUG: Aplicando fix geometry no layer de corte...")
                fixed_layer = self.auto_fix_geometries(self.selected_layer, "corte")
                if fixed_layer and fixed_layer.isValid():
                    print(f"‚úÖ DEBUG: Layer com geometrias corrigidas: {fixed_layer.featureCount()} fei√ß√µes")
                    layer_to_filter = fixed_layer
                else:
                    print(f"‚ö†Ô∏è DEBUG: Fix geometry falhou, usando layer original")
                    layer_to_filter = self.selected_layer
                
                # Aplica filtro (igual ao teste que funcionou)
                from qgis.core import QgsFeatureRequest
                
                # CORRE√á√ÉO: Testa diferentes formatos de express√£o
                element_clean = str(self.selected_element).strip()
                field_clean = str(self.selected_field).strip()
                
                print(f"üîç DEBUG: Campo limpo: '{field_clean}'")
                print(f"üîç DEBUG: Elemento limpo: '{element_clean}'")
                
                # Testa express√µes com diferentes formatos
                expressions_to_try = [
                    f'"{field_clean}" = \'{element_clean}\'',  # Formato original
                    f"{field_clean} = '{element_clean}'",      # Sem aspas duplas no campo
                    f'"{field_clean}" = "{element_clean}"',    # Aspas duplas no valor
                    f'{field_clean} = "{element_clean}"',      # Sem aspas no campo, duplas no valor
                ]
                
                filtered_layer = None
                working_expression = None
                
                for i, expression in enumerate(expressions_to_try):
                     print(f"üîç DEBUG: Tentativa {i+1}: {expression}")
                     try:
                         request = QgsFeatureRequest().setFilterExpression(expression)
                         test_layer = layer_to_filter.materialize(request)
                         
                         if test_layer and test_layer.isValid() and test_layer.featureCount() > 0:
                             print(f"‚úÖ DEBUG: SUCESSO na tentativa {i+1}! {test_layer.featureCount()} fei√ß√µes encontradas")
                             filtered_layer = test_layer
                             working_expression = expression
                             break
                         else:
                             print(f"‚ùå DEBUG: Tentativa {i+1} falhou - {test_layer.featureCount() if test_layer else 0} fei√ß√µes")
                     except Exception as e:
                         print(f"‚ùå DEBUG: Erro na tentativa {i+1}: {e}")
                
                print(f"üîç DEBUG: Express√£o final que funcionou: {working_expression}")
                print(f"üîç DEBUG: Layer filtrado final: {filtered_layer.featureCount() if filtered_layer else 0} fei√ß√µes")
                
                # Se nenhuma express√£o funcionou, lista valores reais do campo
                if not filtered_layer:
                    print(f"üîç DEBUG: NENHUMA express√£o funcionou! Listando valores reais do campo '{field_clean}':")
                    try:
                        unique_values = []
                        for feature in self.selected_layer.getFeatures():
                            value = feature[field_clean]
                            if value and value not in unique_values:
                                unique_values.append(str(value))
                                if len(unique_values) <= 10:  # Mostra s√≥ os primeiros 10
                                    print(f"   üìã Valor real: '{value}' (tipo: {type(value).__name__})")
                        
                        print(f"üîç DEBUG: Total de valores √∫nicos encontrados: {len(unique_values)}")
                        print(f"üîç DEBUG: Elemento procurado: '{element_clean}' (tipo: {type(element_clean).__name__})")
                        
                        # Verifica se h√° match exato (case insensitive)
                        element_lower = element_clean.lower()
                        matches = [v for v in unique_values if v.lower() == element_lower]
                        if matches:
                            print(f"‚úÖ DEBUG: Match encontrado (case insensitive): '{matches[0]}'")
                            # Tenta novamente com o valor exato encontrado
                            exact_expression = f'"{field_clean}" = \'{matches[0]}\''
                            print(f"üîç DEBUG: Tentando com valor exato: {exact_expression}")
                            request = QgsFeatureRequest().setFilterExpression(exact_expression)
                            filtered_layer = self.selected_layer.materialize(request)
                            working_expression = exact_expression
                            
                    except Exception as e:
                        print(f"‚ùå DEBUG: Erro ao listar valores: {e}")
                
                print(f"üîç DEBUG: Layer original: {self.selected_layer.featureCount()} fei√ß√µes")
                print(f"üîç DEBUG: Filtered layer v√°lido: {filtered_layer.isValid() if filtered_layer else 'None'}")
                print(f"üîç DEBUG: Filtered layer count: {filtered_layer.featureCount() if filtered_layer else 'N/A'}")
                
                if filtered_layer and filtered_layer.isValid() and filtered_layer.featureCount() > 0:
                    extent = filtered_layer.extent()
                    print(f"‚úÖ DEBUG: SUCESSO - {filtered_layer.featureCount()} fei√ß√µes filtradas")
                    print(f"üìç DEBUG: BBOX do elemento '{self.selected_element}' extra√≠do")
                    print(f"üìç DEBUG: Extent filtrado: {extent.xMinimum():.6f},{extent.yMinimum():.6f},{extent.xMaximum():.6f},{extent.yMaximum():.6f}")
                else:
                    # FALLBACK: Se filtro falhou, usa layer completo
                    extent = self.selected_layer.extent()
                    print(f"‚ùå DEBUG: FILTRO FALHOU - usando layer completo")
                    print(f"‚ùå DEBUG: Raz√£o: filtered_layer={filtered_layer}, valid={filtered_layer.isValid() if filtered_layer else 'N/A'}, count={filtered_layer.featureCount() if filtered_layer else 'N/A'}")
                    print(f"üìç DEBUG: Extent completo: {extent.xMinimum():.6f},{extent.yMinimum():.6f},{extent.xMaximum():.6f},{extent.yMaximum():.6f}")
                    
                    # ADICIONA mensagem espec√≠fica nas Notas sobre o erro
                    current_text = self.notes_text.toPlainText()
                    self.notes_text.setPlainText(current_text + f"\n‚ùå FALHA NO FILTRO: Usando BBOX do layer completo")
                    self.notes_text.setPlainText(self.notes_text.toPlainText() + f"\nüîç Express√£o testada: {expression}")
                    
            # ESTRAT√âGIA 2: Se tem cut_layer (fallback para outras op√ß√µes)
            elif hasattr(self, 'cut_option') and self.cut_option is not None and self.cut_option != 0:
                cut_layer = self.get_cut_layer()
                if cut_layer and cut_layer.isValid():
                    extent = cut_layer.extent()
                    print(f"üìä DEBUG: Usando cut_layer com {cut_layer.featureCount()} fei√ß√µes")
                else:
                    print(f"‚ùå DEBUG: cut_layer inv√°lido")
                    return None
                    
            # ESTRAT√âGIA 3: Se tem ret√¢ngulo desenhado
            elif hasattr(self, 'drawn_rectangle') and self.drawn_rectangle:
                extent = self.drawn_rectangle
                print(f"üìä DEBUG: Usando ret√¢ngulo desenhado")
                
            else:
                print(f"‚ùå DEBUG: NENHUMA geometria de corte encontrada!")
                print(f"‚ùå DEBUG: Verificar se usu√°rio fez as sele√ß√µes corretas:")
                print(f"   üìã Layer carregado: {hasattr(self, 'selected_layer') and self.selected_layer}")
                print(f"   üìã Campo selecionado: {hasattr(self, 'selected_field') and self.selected_field}")
                print(f"   üìã Elemento selecionado: {hasattr(self, 'selected_element') and self.selected_element}")
                print(f"   üìã Cut option definida: {hasattr(self, 'cut_option') and self.cut_option is not None}")
                print(f"   üìã Ret√¢ngulo desenhado: {hasattr(self, 'drawn_rectangle') and self.drawn_rectangle}")
                
                # Adiciona informa√ß√µes nas Notas sobre o que falta
                current_text = self.notes_text.toPlainText()
                self.notes_text.setPlainText(current_text + f"\n‚ùå SEM BBOX: Nenhuma geometria de corte encontrada")
                
                if not (hasattr(self, 'selected_layer') and self.selected_layer):
                    self.notes_text.setPlainText(self.notes_text.toPlainText() + f"\n   ‚ùå Falta: Selecionar layer")
                if not (hasattr(self, 'selected_field') and self.selected_field):
                    self.notes_text.setPlainText(self.notes_text.toPlainText() + f"\n   ‚ùå Falta: Selecionar campo")
                if not (hasattr(self, 'selected_element') and self.selected_element):
                    self.notes_text.setPlainText(self.notes_text.toPlainText() + f"\n   ‚ùå Falta: Selecionar elemento")
                
                return None
            
            if extent.isEmpty():
                print(f"‚ö†Ô∏è DEBUG: Extent vazio")
                return None
            
            # Converte para EPSG:4674 se necess√°rio (simplificado)
            if (hasattr(self, 'selected_layer') and self.selected_layer and 
                self.selected_layer.crs() != QgsCoordinateReferenceSystem("EPSG:4674")):
                
                from qgis.core import QgsCoordinateTransform, QgsProject
                layer_crs = self.selected_layer.crs()
                target_crs = QgsCoordinateReferenceSystem("EPSG:4674")
                transform = QgsCoordinateTransform(layer_crs, target_crs, QgsProject.instance())
                extent = transform.transformBoundingBox(extent)
                print(f"üîÑ DEBUG: Convertido de {layer_crs.authid()} para EPSG:4674")
            
            # Formata BBOX para WFS
            bbox_str = f"{extent.xMinimum():.6f},{extent.yMinimum():.6f},{extent.xMaximum():.6f},{extent.yMaximum():.6f},EPSG:4674"
            
            print(f"‚úÖ DEBUG: BBOX extra√≠do para WFS: {bbox_str}")
            
            # Adiciona √† caixa de Notas tamb√©m
            current_text = self.notes_text.toPlainText()
            self.notes_text.setPlainText(current_text + f"\nüåê BBOX WFS: {bbox_str}")
            
            return bbox_str
            
        except Exception as e:
            print(f"‚ùå DEBUG: Erro ao extrair BBOX: {str(e)}")
            current_text = self.notes_text.toPlainText()
            self.notes_text.setPlainText(current_text + f"\n‚ùå ERRO BBOX WFS: {e}")
            return None

    def apply_temporal_filter(self, layer, qgis_expression, layer_name):
        """Aplica filtro usando express√µes nativas do QGIS - ESTRAT√âGIA SIMPLIFICADA"""
        try:
            print(f"‚è∞ DEBUG: Aplicando filtro QGIS: {qgis_expression}")
            print(f"üìä DEBUG: Layer original: {layer.featureCount()} fei√ß√µes")
            
            # Lista campos dispon√≠veis para debug
            field_names = [field.name() for field in layer.fields()]
            print(f"üîç DEBUG: Campos dispon√≠veis na layer: {field_names}")
            
            # Cria layer em mem√≥ria para o resultado filtrado
            memory_layer = QgsVectorLayer(f"Polygon?crs=EPSG:4674", f"{layer_name}_filtered", "memory")
            memory_provider = memory_layer.dataProvider()
            
            # Adiciona campos da layer original
            memory_provider.addAttributes(layer.fields())
            memory_layer.updateFields()
            
            # NOVA ESTRAT√âGIA: Usa QgsFeatureRequest com express√£o nativa do QGIS
            request = QgsFeatureRequest()
            request.setFilterExpression(qgis_expression)
            
            # Aplica filtro e copia fei√ß√µes filtradas
            filtered_features = []
            for feature in layer.getFeatures(request):
                filtered_features.append(feature)
            
            if filtered_features:
                memory_provider.addFeatures(filtered_features)
                memory_layer.updateExtents()
                
                filtered_count = len(filtered_features)
                total_count = layer.featureCount()
                print(f"‚úÖ DEBUG: Filtro QGIS aplicado: {filtered_count}/{total_count} fei√ß√µes")
                
                return memory_layer
            else:
                print(f"‚ö†Ô∏è DEBUG: Nenhuma fei√ß√£o passou no filtro QGIS")
                return None
                
        except Exception as e:
            print(f"‚ùå ERROR apply_temporal_filter: {str(e)}")
            print(f"‚ùå Express√£o problem√°tica: {qgis_expression}")
            return layer  # Retorna layer original em caso de erro



    def real_step_apply_spatial_cut(self):
        """Etapa 3: Aplica corte espacial"""
        try:
            self.status_label.setText("‚úÇÔ∏è Realizando corte espacial...")
            
            # CORRE√á√ÉO 1: Verifica se realmente precisa fazer corte espacial
            # DEBUG: Mostra valor atual de cut_option
            cut_option_value = getattr(self, 'cut_option', None)
            print(f"üîß DEBUG: cut_option atual = {cut_option_value}")
            print(f"üîß DEBUG: type(cut_option) = {type(cut_option_value)}")
            
            # CORRE√á√ÉO MELHORADA: Verifica se realmente precisa fazer corte espacial
            # Considera None, 0 ou atributo n√£o existente como "sem corte"
            needs_cut = (
                hasattr(self, 'cut_option') and 
                self.cut_option is not None and 
                self.cut_option != 0
            )
            
            if not needs_cut:
                # Sem corte espacial - pula esta etapa
                self.update_notes(f"üåç Sem recorte espacial | Usando bioma completo: {self.selected_biome}", "status")
                print(f"üåç DEBUG: Sem corte espacial - pulando etapa")
                
                # Agenda pr√≥xima etapa diretamente
                QTimer.singleShot(1000, self.real_step_merge_layers)
                return
            
            # Se chegou aqui, precisa fazer corte espacial
            self.update_notes(f"‚úÇÔ∏è Aplicando recorte espacial | Op√ß√£o: {self.get_cut_option_name()}", "status")
            
            # Obt√©m layer de corte
            cut_layer = self.get_cut_layer()
            
            if not cut_layer:
                raise Exception("Falha ao obter layer de corte espacial")
            
            print(f"üîÑ DEBUG: Aplicando corte espacial com {cut_layer.name()}")
            
            # CORRE√á√ÉO 2: Aplica fixgeometries automaticamente em ambas as layers
            print(f"üîß DEBUG: Aplicando fixgeometries nas layers...")
            
            # Fix geometries na layer de corte
            fixed_cut_layer = self.auto_fix_geometries(cut_layer, "corte")
            if not fixed_cut_layer:
                print(f"‚ö†Ô∏è DEBUG: Falha no fix da layer de corte, usando original")
                fixed_cut_layer = cut_layer
            
            # Aplica corte em cada layer processada
            clipped_layers = []
            
            for i, layer in enumerate(self.processing_layers):
                print(f"‚úÇÔ∏è DEBUG: Cortando layer {i+1}/{len(self.processing_layers)}: {layer.name()}...")
                
                # Fix geometries na layer de dados
                fixed_data_layer = self.auto_fix_geometries(layer, f"dados_{i}")
                if not fixed_data_layer:
                    print(f"‚ö†Ô∏è DEBUG: Falha no fix da layer de dados {i}, usando original")
                    fixed_data_layer = layer
                
                # Aplica corte com layers corrigidas
                clipped_layer = self.clip_layer(fixed_data_layer, fixed_cut_layer)
                
                if clipped_layer:
                    clipped_layers.append(clipped_layer)
                    print(f"‚úÖ DEBUG: Layer cortada: {clipped_layer.featureCount()} fei√ß√µes")
                else:
                    print(f"‚ùå DEBUG: Falha ao cortar layer {layer.name()}")
            
            if not clipped_layers:
                raise Exception("Nenhuma layer foi cortada com sucesso")
            
            self.processing_layers = clipped_layers
            
            # Agenda pr√≥xima etapa
            QTimer.singleShot(1000, self.real_step_merge_layers)
            
        except Exception as e:
            print(f"‚ùå ERROR real_step_apply_spatial_cut: {str(e)}")
            self.status_label.setText(f"‚ùå Erro no corte espacial: {str(e)}")
            self.progress_bar.setVisible(False)
            self.btn_process.setEnabled(True)

    def auto_fix_geometries(self, layer, layer_type):
        """Aplica fixgeometries automaticamente sem avisar o usu√°rio"""
        try:
            import processing
            
            print(f"üîß DEBUG: Aplicando fixgeometries na layer {layer_type}...")
            
            # Executa fixgeometries
            fixed_result = processing.run("native:fixgeometries", {
                'INPUT': layer,
                'OUTPUT': 'memory:'
            })
            
            fixed_layer = fixed_result['OUTPUT']
            
            if fixed_layer and fixed_layer.isValid():
                original_count = layer.featureCount()
                fixed_count = fixed_layer.featureCount()
                
                # NOVO: Registra processamento com detalhes sobre perda
                if fixed_count < original_count:
                    loss_count = original_count - fixed_count
                    loss_percent = (loss_count / original_count) * 100
                    self.add_processing_log(
                        "CORRE√á√ÉO DE GEOMETRIAS",
                        f"{original_count} fei√ß√µes antes e {fixed_count} fei√ß√µes depois (PERDA: {loss_count} pol√≠gonos inv√°lidos removidos - {loss_percent:.1f}%)"
                    )
                elif fixed_count > original_count:
                    gain_count = fixed_count - original_count
                    self.add_processing_log(
                        "CORRE√á√ÉO DE GEOMETRIAS",
                        f"{original_count} fei√ß√µes antes e {fixed_count} fei√ß√µes depois (GANHO: {gain_count} pol√≠gonos corrigidos/divididos)"
                    )
                else:
                    self.add_processing_log(
                        "CORRE√á√ÉO DE GEOMETRIAS",
                        f"{original_count} fei√ß√µes antes e {fixed_count} fei√ß√µes depois (SEM PERDA: todas as geometrias j√° eram v√°lidas)"
                    )
                
                print(f"‚úÖ DEBUG: Fixgeometries aplicado na layer {layer_type}")
                print(f"   Fei√ß√µes: {original_count} ‚Üí {fixed_count}")
                
                # Define nome para a layer corrigida
                fixed_layer.setName(f"{layer.name()}_fixed")
                
                return fixed_layer
            else:
                print(f"‚ö†Ô∏è DEBUG: Fixgeometries falhou para layer {layer_type}")
                return None
                
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: Erro no fixgeometries da layer {layer_type}: {str(e)}")
            return None

    def clip_layer(self, input_layer, clip_layer, log_processing=True):
        """Aplica corte espacial usando processing"""
        try:
            import processing
            
            # Verifica se as layers s√£o v√°lidas
            if not input_layer.isValid() or not clip_layer.isValid():
                return None
            
            # Verifica se h√° geometrias
            if input_layer.featureCount() == 0 or clip_layer.featureCount() == 0:
                return None
            
            # Executa algoritmo de clip
            result = processing.run("native:clip", {
                'INPUT': input_layer,
                'OVERLAY': clip_layer,
                'OUTPUT': 'memory:'
            })
            
            if not result or 'OUTPUT' not in result:
                return None
            
            clipped_layer = result['OUTPUT']
            
            if not clipped_layer or not clipped_layer.isValid():
                return None
            
            feature_count = clipped_layer.featureCount()
            original_count = input_layer.featureCount()
            
            # NOVO: Registra processamento apenas se solicitado
            if log_processing:
                if feature_count == 0:
                    self.add_processing_log(
                        "CORTE ESPACIAL",
                        f"{original_count} fei√ß√µes ‚Üí 0 fei√ß√µes (√°rea fora do pol√≠gono de corte)"
                    )
                else:
                    reduction_percent = ((original_count - feature_count) / original_count) * 100 if original_count > 0 else 0
                    self.add_processing_log(
                        "CORTE ESPACIAL",
                        f"{original_count} fei√ß√µes ‚Üí {feature_count} fei√ß√µes (redu√ß√£o de {reduction_percent:.1f}%)"
                    )
            
            if feature_count == 0:
                # Retorna layer vazia mas v√°lida
                clipped_layer.setName(f"{input_layer.name()}_clipped_empty")
                return clipped_layer
            
            clipped_layer.setName(f"{input_layer.name()}_clipped")
            return clipped_layer
                
        except Exception as e:
            from qgis.core import QgsMessageLog, Qgis
            error_msg = f"‚ùå ERRO clip_layer: {str(e)}"
            QgsMessageLog.logMessage(error_msg, "DesagregaBiomasBR", Qgis.Critical)
            return None


    
    def reproject_layer(self, layer, target_crs):
        """
        Reprojeta uma layer para o CRS de destino
        """
        try:
            import processing
            
            # Par√¢metros para reproje√ß√£o
            params = {
                'INPUT': layer,
                'TARGET_CRS': target_crs,
                'OUTPUT': 'memory:'
            }
            
            # Executa o algoritmo de reproje√ß√£o
            result = processing.run("native:reprojectlayer", params)
            
            if result and 'OUTPUT' in result:
                reprojected_layer = result['OUTPUT']
                
                if reprojected_layer and reprojected_layer.isValid():
                    # NOVO: Registra processamento
                    original_crs = layer.crs().authid()
                    target_crs_id = target_crs if isinstance(target_crs, str) else target_crs.authid()
                    self.add_processing_log(
                        "REPROJE√á√ÉO DE COORDENADAS",
                        f"{original_crs} ‚Üí {target_crs_id}"
                    )
                    return reprojected_layer
                else:
                    return None
            else:
                return None
                
        except Exception as e:
            from qgis.core import QgsMessageLog, Qgis
            error_msg = f"‚ùå ERRO reproject_layer: {str(e)}"
            QgsMessageLog.logMessage(error_msg, "DesagregaBiomasBR", Qgis.Critical)
            return None

    def real_step_merge_layers(self):
        """Etapa 4: Mescla layers se necess√°rio (para tipo acumulado)"""
        try:
            self.status_label.setText("üîÑ Mesclando dados...")
            
            if self.data_type == "acumulado" and len(self.processing_layers) > 1:
                # Para acumulado, precisa mesclar accumulated + yearly
                self.update_notes(f"üîÑ Mesclando camadas | accumulated_deforestation + yearly_deforestation", "status")
                
                print(f"üîÑ DEBUG: Mesclando {len(self.processing_layers)} layers para tipo acumulado")
                
                merged_layer = self.merge_layers(self.processing_layers)
                
                if merged_layer:
                    self.processing_layers = [merged_layer]
                    print(f"‚úÖ DEBUG: Layers mescladas: {merged_layer.featureCount()} fei√ß√µes")
                else:
                    raise Exception("Falha ao mesclar layers")
                    
            else:
                # Para incremental, usa apenas uma layer
                self.update_notes(f"üìä Processando dados incrementais | {self.processing_layers[0].featureCount()} fei√ß√µes", "status")
                print(f"üìä DEBUG: Tipo incremental - usando layer √∫nica")
            
            # Agenda pr√≥xima etapa
            QTimer.singleShot(1000, self.real_step_save_file)
            
        except Exception as e:
            print(f"‚ùå ERROR real_step_merge_layers: {str(e)}")
            self.status_label.setText(f"‚ùå Erro na mesclagem: {str(e)}")
            self.end_download_mode(success=False)

    def merge_layers(self, layers):
        """Mescla m√∫ltiplas layers em uma s√≥"""
        try:
            import processing
            
            print(f"üîÑ DEBUG: Mesclando {len(layers)} layers")
            
            if len(layers) == 1:
                return layers[0]
            
            # Executa merge
            result = processing.run("native:mergevectorlayers", {
                'LAYERS': layers,
                'CRS': layers[0].crs(),
                'OUTPUT': 'memory:'
            })
            
            merged_layer = result['OUTPUT']
            
            if merged_layer and merged_layer.isValid():
                merged_layer.setName(f"PRODES_{self.selected_biome}_merged")
                
                # NOVO: Registra processamento
                total_features = sum(layer.featureCount() for layer in layers)
                merged_count = merged_layer.featureCount()
                self.add_processing_log(
                    "UNI√ÉO DE CAMADAS",
                    f"{len(layers)} camadas unidas ‚Üí {merged_count} fei√ß√µes totais"
                )
                
                print(f"‚úÖ DEBUG: Merge executado com sucesso")
                return merged_layer
            else:
                print(f"‚ùå DEBUG: Resultado do merge inv√°lido")
                return None
                
        except Exception as e:
            print(f"‚ùå ERROR merge_layers: {str(e)}")
            return None

    def real_step_save_file(self):
        """Etapa 5: Salva arquivo no formato escolhido"""
        try:
            self.status_label.setText("üíæ Salvando arquivo...")
            
            if not self.processing_layers:
                raise Exception("Nenhuma layer para salvar")
            
            final_layer = self.processing_layers[0]
            
            # Determina formato e extens√£o
            if self.radio_shapefile.isChecked():
                format_name = "ESRI Shapefile"
                extension = ".shp"
            else:
                format_name = "GPKG"
                extension = ".gpkg"
            
            # Monta caminho completo
            dest_path = self.dest_path_edit.toPlainText().strip()
            full_path = os.path.join(dest_path, f"{self.output_filename}{extension}")
            
            self.update_notes(f"üíæ Salvando arquivo | Formato: {format_name} | Destino: {full_path}", "status")
            
            print(f"üíæ DEBUG: Salvando em {full_path}")
            
            # Salva o arquivo
            success = self.save_layer_to_file(final_layer, full_path, format_name)
            
            if success:
                self.final_file_path = full_path
                print(f"‚úÖ DEBUG: Arquivo salvo com sucesso")
                
                # Agenda pr√≥xima etapa
                QTimer.singleShot(1000, self.real_step_generate_metadata)
            else:
                raise Exception("Falha ao salvar arquivo")
                
        except Exception as e:
            print(f"‚ùå ERROR real_step_save_file: {str(e)}")
            self.status_label.setText(f"‚ùå Erro ao salvar: {str(e)}")
            self.end_download_mode(success=False)

    def save_layer_to_file(self, layer, file_path, format_name):
        """Salva layer em arquivo"""
        try:
            from qgis.core import QgsVectorFileWriter
            
            print(f"üíæ DEBUG: Salvando layer {layer.name()} em {file_path}")
            
            # Cria pasta se n√£o existir
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            
            # Configura op√ß√µes de salvamento
            options = QgsVectorFileWriter.SaveVectorOptions()
            options.driverName = format_name
            options.fileEncoding = "UTF-8"
            
            # Salva o arquivo
            error = QgsVectorFileWriter.writeAsVectorFormatV3(
                layer,
                file_path,
                layer.transformContext(),
                options
            )
            
            if error[0] == QgsVectorFileWriter.NoError:
                print(f"‚úÖ DEBUG: Arquivo salvo com sucesso")
                return True
            else:
                print(f"‚ùå DEBUG: Erro ao salvar: {error[1]}")
                return False
                
        except Exception as e:
            print(f"‚ùå ERROR save_layer_to_file: {str(e)}")
            return False

    def real_step_generate_metadata(self):
        """Etapa 6: Gera arquivo de metadados"""
        try:
            self.status_label.setText("üìÑ Gerando metadados...")
            
            if self.checkbox_generate_metadata.isChecked():
                self.update_notes(f"üìÑ Gerando metadados | Arquivo: {self.output_filename}.txt", "status")
                
                metadata_path = os.path.join(
                    self.dest_path_edit.toPlainText().strip(),
                    f"{self.output_filename}.txt"
                )
                
                print(f"üìÑ DEBUG: Gerando metadados em {metadata_path}")
                
                success = self.generate_metadata_file(metadata_path)
                
                if success:
                    self.metadata_file_path = metadata_path
                    print(f"‚úÖ DEBUG: Metadados gerados com sucesso")
                else:
                    print(f"‚ö†Ô∏è DEBUG: Falha ao gerar metadados (continuando...)")
            else:
                self.update_notes(f"üìÑ Metadados desabilitados pelo usu√°rio", "status")
                print(f"üìÑ DEBUG: Gera√ß√£o de metadados desabilitada")
            
            # Agenda pr√≥xima etapa
            QTimer.singleShot(1000, self.real_step_add_to_qgis)
            
        except Exception as e:
            print(f"‚ùå ERROR real_step_generate_metadata: {str(e)}")
            # N√£o falha o processo por causa dos metadados
            QTimer.singleShot(1000, self.real_step_add_to_qgis)

    def generate_metadata_file(self, metadata_path):
        """Gera arquivo de metadados em formato texto"""
        try:
            from datetime import datetime
            
            metadata_content = []
            metadata_content.append("=" * 60)
            metadata_content.append(f"METADADOS DO PROCESSAMENTO {self.selected_theme}")
            metadata_content.append("Plugin DesagregaBiomasBR")
            metadata_content.append("=" * 60)
            metadata_content.append("")
            
            # Texto introdut√≥rio espec√≠fico por tema
            if self.selected_theme == "PRODES":
                period_text = ""
                if hasattr(self, 'data_type') and self.data_type and hasattr(self, 'start_year') and hasattr(self, 'end_year'):
                    if self.data_type == "incremental" and self.start_year and self.end_year:
                        if self.start_year == self.end_year:
                            period_text = f"no ano de {self.start_year}"
                        else:
                            period_text = f"no per√≠odo de {self.start_year} a {self.end_year}"
                    elif self.data_type == "acumulado" and self.end_year:
                        base_year = self.prodes_base_years.get(self.selected_biome, 2000)
                        period_text = f"acumuladas de {base_year} at√© {self.end_year}"
                
                intro_text = f"√Åreas desmatadas {period_text}. O mapeamento utiliza imagens do sat√©lite "
                intro_text += "Landsat ou similares, para registrar e quantificar as √°reas desmatadas maiores que "
                intro_text += "6,25 hectares. O PRODES considera como desmatamento a supress√£o da vegeta√ß√£o nativa, "
                intro_text += "independentemente da futura utiliza√ß√£o destas √°reas."
                
            elif self.selected_theme == "√ÅREA QUEIMADA":
                intro_text = "O shapefile refere-se ao produto AQ1Km, que apresenta uma estimativa das √°reas queimadas nos biomas brasileiros, "
                intro_text += "gerado a partir de dados MODIS (cole√ß√£o 6) dos sat√©lites AQUA e TERRA. Trata-se de um produto de baixa resolu√ß√£o "
                intro_text += "espacial (1 km), com cobertura di√°ria e abordagem sin√≥tica, voltado √† identifica√ß√£o e ao monitoramento cont√≠nuo "
                intro_text += "de √°reas afetadas por queimadas."
                
            else:
                intro_text = f"Processamento de dados {self.selected_theme} para an√°lise ambiental."
            
            metadata_content.append("DESCRI√á√ÉO:")
            metadata_content.append(intro_text)
            metadata_content.append("")
            
            # Informa√ß√µes gerais
            metadata_content.append("INFORMA√á√ïES GERAIS:")
            metadata_content.append(f"Data/Hora do processamento: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
            metadata_content.append(f"Tema: {self.selected_theme}")
            metadata_content.append(f"Bioma: {self.selected_biome}")
            metadata_content.append("")
            
            # Configura√ß√µes temporais espec√≠ficas por tema
            metadata_content.append("CONFIGURA√á√ïES TEMPORAIS:")
            
            if self.selected_theme == "PRODES":
                metadata_content.append(f"Unidade temporal: Baseado na coluna 'year' dos dados")
                metadata_content.append(f"Tipo de dados: {getattr(self, 'data_type', 'N/A')}")
                
                if hasattr(self, 'start_year') and hasattr(self, 'end_year'):
                    if self.data_type == "incremental":
                        metadata_content.append(f"Per√≠odo: {self.start_year} - {self.end_year}")
                    elif self.data_type == "acumulado":
                        base_year = self.prodes_base_years.get(self.selected_biome, 2000)
                        metadata_content.append(f"Per√≠odo: {base_year} - {self.end_year} (acumulado)")
                        
            elif self.selected_theme == "√ÅREA QUEIMADA":
                metadata_content.append(f"Unidade temporal: Dados mensais")
                metadata_content.append(f"Tipo de dados: {getattr(self, 'queimadas_data_type', 'N/A')}")
                
                if hasattr(self, 'queimadas_data_type') and self.queimadas_data_type:
                    if self.queimadas_data_type == "anual" and hasattr(self, 'queimadas_year') and self.queimadas_year:
                        metadata_content.append(f"Per√≠odo: Janeiro de {self.queimadas_year} a Dezembro de {self.queimadas_year}")
                        # Calcula quantos meses foram processados
                        months_count = len([m for m in self.queimadas_months if m.startswith(f"{self.queimadas_year:04d}_")])
                        metadata_content.append(f"Arquivos processados: {months_count} meses unidos")
                    elif self.queimadas_data_type == "mensal" and hasattr(self, 'queimadas_month') and self.queimadas_month:
                        year, month, _ = self.queimadas_month.split('_')
                        metadata_content.append(f"Per√≠odo: {month}/{year}")
                        metadata_content.append(f"Arquivos processados: 1 arquivo mensal")
                        
            elif self.selected_theme == "DETER":
                metadata_content.append(f"Unidade temporal: Baseado na coluna 'view_date' dos dados")
                if hasattr(self, 'deter_start_year') and hasattr(self, 'deter_end_year'):
                    metadata_content.append(f"Per√≠odo: {self.deter_start_year} - {self.deter_end_year}")
                if hasattr(self, 'deter_selected_classes') and self.deter_selected_classes:
                    metadata_content.append(f"Classes selecionadas: {', '.join(self.deter_selected_classes)}")
                    
            elif self.selected_theme == "TERRACLASS":
                metadata_content.append(f"Unidade temporal: Anual")
                if hasattr(self, 'terraclass_year') and self.terraclass_year:
                    metadata_content.append(f"Ano: {self.terraclass_year}")
                    
            metadata_content.append("")
            
            # Filtros aplicados - espec√≠fico por tema
            metadata_content.append("FILTROS APLICADOS:")
            if self.selected_theme == "√ÅREA QUEIMADA":
                # Para √ÅREA QUEIMADA, os filtros s√£o autom√°ticos (bioma + per√≠odo)
                metadata_content.append(f"Filtro espacial autom√°tico: Bioma {self.selected_biome}")
                metadata_content.append("Observa√ß√£o: Dados originais cobrem todo o Brasil, corte por bioma aplicado automaticamente")
                if hasattr(self, 'queimadas_download_info_metadata') and self.queimadas_download_info_metadata:
                    if self.queimadas_download_info_metadata['data_type'] == 'anual':
                        metadata_content.append(f"Filtro temporal: Ano {self.queimadas_download_info_metadata['year']}")
                    else:
                        metadata_content.append(f"Filtro temporal: M√™s espec√≠fico")
            else:
                # Para PRODES, DETER, TERRACLASS usa o formato original
                if hasattr(self, 'urls_and_filters') and self.urls_and_filters:
                    for i, filter_str in enumerate(self.urls_and_filters['filters']):
                        if filter_str:
                            clean_filter = filter_str.replace('%20', ' ').replace('%27', "'")
                            metadata_content.append(f"Camada {i+1}: {clean_filter}")
                        else:
                            metadata_content.append(f"Camada {i+1}: Sem filtro")
                else:
                    metadata_content.append("Nenhum filtro espec√≠fico aplicado")
            metadata_content.append("")
            
            # NOVO: Corte espacial detalhado
            metadata_content.append("CORTE ESPACIAL:")
            
            if self.selected_theme == "√ÅREA QUEIMADA":
                # Para √ÅREA QUEIMADA sempre h√° corte por bioma
                metadata_content.append("1. Corte autom√°tico por bioma (sempre aplicado):")
                metadata_content.append(f"   - Bioma selecionado: {self.selected_biome}")
                metadata_content.append(f"   - Shapefile de refer√™ncia: {self.ibge_shapefile_name}")
                if self.selected_biome == 'Amaz√¥nia Legal':
                    metadata_content.append(f"   - Coluna utilizada: regiao = 'Amaz√¥nia Legal'")
                else:
                    metadata_content.append(f"   - Coluna utilizada: bioma = '{self.selected_biome}'")
                
                # Verifica se h√° corte adicional
                if hasattr(self, 'cut_option') and self.cut_option is not None and self.cut_option != 0:
                    metadata_content.append("")
                    metadata_content.append("2. Corte adicional (configurado pelo usu√°rio):")
                    if self.cut_option == 1:
                        metadata_content.append("   - Tipo: Layer do QGIS")
                        if hasattr(self, 'selected_layer') and self.selected_layer:
                            metadata_content.append(f"   - Nome da layer: {self.selected_layer.name()}")
                            metadata_content.append(f"   - N√∫mero de fei√ß√µes: {self.selected_layer.featureCount()}")
                            metadata_content.append(f"   - Sistema de coordenadas da layer: {self.selected_layer.crs().authid()} - {self.selected_layer.crs().description()}")
                            
                            if hasattr(self, 'selected_field') and self.selected_field:
                                metadata_content.append(f"   - Campo utilizado: {self.selected_field}")
                                if hasattr(self, 'selected_element') and self.selected_element:
                                    metadata_content.append(f"   - Elemento selecionado: {self.selected_element}")
                    elif self.cut_option == 2:
                        metadata_content.append("   - Tipo: Ret√¢ngulo desenhado")
                        if hasattr(self, 'drawn_rectangle') and self.drawn_rectangle:
                            metadata_content.append(f"   - Coordenadas: ({self.drawn_rectangle.xMinimum():.6f}, {self.drawn_rectangle.yMinimum():.6f}) - ({self.drawn_rectangle.xMaximum():.6f}, {self.drawn_rectangle.yMaximum():.6f})")
                    elif self.cut_option == 3:
                        metadata_content.append("   - Tipo: IBGE")
                        metadata_content.append(f"   - Shapefile: {self.ibge_shapefile_name}")
                        if self.ibge_state:
                            metadata_content.append(f"   - Estado: {self.ibge_state}")
                            if self.ibge_municipality:
                                metadata_content.append(f"   - Munic√≠pio: {self.ibge_municipality}")
                else:
                    metadata_content.append("")
                    metadata_content.append("2. Corte adicional: Nenhum (apenas corte por bioma aplicado)")
                    
            else:
                # Para outros temas (PRODES, DETER, TERRACLASS) mant√©m l√≥gica original
                if hasattr(self, 'cut_option'):
                    if self.cut_option == 0:
                        metadata_content.append("Tipo: Sem corte (bioma completo)")
                    elif self.cut_option == 1:
                        metadata_content.append("Tipo: Layer do QGIS")
                        if hasattr(self, 'selected_layer') and self.selected_layer:
                            metadata_content.append(f"Nome da layer: {self.selected_layer.name()}")
                            metadata_content.append(f"N√∫mero de fei√ß√µes: {self.selected_layer.featureCount()}")
                            metadata_content.append(f"Sistema de coordenadas da layer: {self.selected_layer.crs().authid()} - {self.selected_layer.crs().description()}")
                            
                            if hasattr(self, 'selected_field') and self.selected_field:
                                metadata_content.append(f"Campo utilizado: {self.selected_field}")
                                if hasattr(self, 'selected_element') and self.selected_element:
                                    metadata_content.append(f"Elemento selecionado: {self.selected_element}")
                    elif self.cut_option == 2:
                        metadata_content.append("Tipo: Ret√¢ngulo desenhado")
                        if hasattr(self, 'drawn_rectangle') and self.drawn_rectangle:
                            metadata_content.append(f"Coordenadas: ({self.drawn_rectangle.xMinimum():.6f}, {self.drawn_rectangle.yMinimum():.6f}) - ({self.drawn_rectangle.xMaximum():.6f}, {self.drawn_rectangle.yMaximum():.6f})")
                    elif self.cut_option == 3:
                        metadata_content.append("Tipo: IBGE")
                        metadata_content.append(f"Shapefile: {self.ibge_shapefile_name}")
                        metadata_content.append(f"Bioma/Regi√£o: {self.selected_biome} (j√° filtrado)")
                        if self.ibge_state:
                            metadata_content.append(f"Estado: {self.ibge_state}")
                            if self.ibge_municipality:
                                metadata_content.append(f"Munic√≠pio: {self.ibge_municipality}")
                                
            metadata_content.append("")
            
            # URLs utilizadas - espec√≠fico por tema
            metadata_content.append("URLS DOS SERVI√áOS:")
            
            if self.selected_theme == "√ÅREA QUEIMADA":
                # Para √ÅREA QUEIMADA, lista as URLs dos ZIPs baixados
                if hasattr(self, 'queimadas_download_info_metadata') and self.queimadas_download_info_metadata:
                    metadata_content.append(f"Servidor base: {self.queimadas_download_info_metadata['base_url']}")
                    metadata_content.append(f"Arquivos baixados: {len(self.queimadas_download_info_metadata['urls'])} ZIPs")
                    # Lista alguns exemplos das URLs
                    for i, url in enumerate(self.queimadas_download_info_metadata['urls'][:3]):  # Primeiros 3
                        month = self.queimadas_download_info_metadata['months'][i]
                        metadata_content.append(f"  Exemplo {i+1}: {url}")
                    if len(self.queimadas_download_info_metadata['urls']) > 3:
                        metadata_content.append(f"  ... e mais {len(self.queimadas_download_info_metadata['urls']) - 3} arquivos")
            else:
                # Para PRODES, DETER, TERRACLASS usa o formato original
                if hasattr(self, 'urls_and_filters') and self.urls_and_filters:
                    for i, (url, layer_name) in enumerate(zip(self.urls_and_filters['urls'], self.urls_and_filters['layer_names'])):
                        metadata_content.append(f"{layer_name}: {url}")
                        
            metadata_content.append("")
            
            # NOVO: Informa√ß√µes do arquivo final com sistema de coordenadas
            metadata_content.append("ARQUIVO RESULTANTE:")
            metadata_content.append(f"Nome: {self.output_filename}")
            metadata_content.append(f"Caminho: {getattr(self, 'final_file_path', 'N/A')}")
            metadata_content.append(f"Formato: {'Shapefile' if self.radio_shapefile.isChecked() else 'GeoPackage'}")
            
            if hasattr(self, 'processing_layers') and self.processing_layers:
                final_layer = self.processing_layers[0]
                metadata_content.append(f"N√∫mero de fei√ß√µes: {final_layer.featureCount()}")
                metadata_content.append(f"Sistema de coordenadas: EPSG:4674 - SIRGAS 2000")
                metadata_content.append(f"Tipo de geometria: {QgsWkbTypes.displayString(final_layer.wkbType())}")
                
                # Extens√£o geogr√°fica
                extent = final_layer.extent()
                if not extent.isEmpty():
                    metadata_content.append(f"Extens√£o geogr√°fica:")
                    metadata_content.append(f"  Longitude m√≠nima: {extent.xMinimum():.6f}")
                    metadata_content.append(f"  Longitude m√°xima: {extent.xMaximum():.6f}")
                    metadata_content.append(f"  Latitude m√≠nima: {extent.yMinimum():.6f}")
                    metadata_content.append(f"  Latitude m√°xima: {extent.yMaximum():.6f}")
                    
                # Campos da tabela
                fields = final_layer.fields()
                if len(fields) > 0:
                    metadata_content.append(f"Campos da tabela:")
                    for field in fields:
                        metadata_content.append(f"  {field.name()}: {field.typeName()}")
            
            # Informa√ß√µes espec√≠ficas por tema
            if self.selected_theme == "√ÅREA QUEIMADA":
                metadata_content.append("")  # NOVO: Linha em branco antes da se√ß√£o espec√≠fica
                metadata_content.append("INFORMA√á√ïES ESPEC√çFICAS DO PRODUTO AQ1KM:")
                metadata_content.append("")
                
                metadata_content.append("T√≠tulo:")
                metadata_content.append("Produto AQ1Km ‚Äì √Åreas Queimadas com Resolu√ß√£o Espacial de 1 km")
                metadata_content.append("")
                
                # Adiciona per√≠odo espec√≠fico baseado no processamento
                periodo_temporal = "Dados mensais"
                if hasattr(self, 'queimadas_download_info_metadata') and self.queimadas_download_info_metadata:
                    if self.queimadas_download_info_metadata['data_type'] == 'anual':
                        ano = self.queimadas_download_info_metadata['year']
                        periodo_temporal = f"Janeiro de {ano} a Dezembro de {ano}"
                    elif self.queimadas_download_info_metadata['data_type'] == 'mensal':
                        mes_data = self.queimadas_download_info_metadata.get('month', '')
                        if mes_data:
                            year, month, _ = mes_data.split('_')
                            periodo_temporal = f"{month}/{year}"
                
                metadata_content.append("Cobertura Temporal:")
                metadata_content.append(periodo_temporal)
                metadata_content.append("")
                
                metadata_content.append("Fonte e Parceria:")
                metadata_content.append("O desenvolvimento do produto AQ1Km √© fruto da parceria entre o Instituto Nacional de Pesquisas Espaciais (INPE) e o Laborat√≥rio de Aplica√ß√µes de Sat√©lites Ambientais (LASA/UFRJ), no √¢mbito de pesquisas voltadas ao monitoramento ambiental por sensoriamento remoto.")
                metadata_content.append("")
                
                metadata_content.append("Metodologia:")
                metadata_content.append("A detec√ß√£o das √°reas queimadas √© realizada com base em algoritmos que utilizam bandas t√©rmicas (4 ¬µm) dos sensores MODIS, com foco na identifica√ß√£o de altera√ß√µes na resposta espectral associadas a queimadas recentes. A metodologia est√° descrita em detalhes no artigo cient√≠fico:")
                metadata_content.append("")
                metadata_content.append("LIBONATI, R.; DACAMARA, C.; SETZER, A.; MORELLI, F.; MELCHIORI, A. An Algorithm for Burned Area Detection in the Brazilian Cerrado Using 4 ¬µm MODIS Imagery. Remote Sensing, v. 7, p. 15782‚Äì15803, 2015. https://doi.org/10.3390/rs71215803")
                metadata_content.append("")
                
                metadata_content.append("Caracter√≠sticas T√©cnicas:")
                metadata_content.append("- Resolu√ß√£o Espacial: 1 km")
                metadata_content.append("- Sistema de Refer√™ncia: SIRGAS 2000 ‚Äì EPSG:4674")
                metadata_content.append("- Formato: Shapefile (vetorial)")
                metadata_content.append("- Cobertura: Di√°ria com abordagem sin√≥tica")
                metadata_content.append("")
                
                metadata_content.append("Uso Recomendado:")
                metadata_content.append("O produto √© indicado para an√°lises de car√°ter regional ou nacional, avalia√ß√£o de tend√™ncias temporais de queimadas, estudos ambientais e suporte √† formula√ß√£o de pol√≠ticas p√∫blicas relacionadas √† conserva√ß√£o dos biomas brasileiros.")
                metadata_content.append("")
                
                metadata_content.append("Limita√ß√µes de Uso:")
                metadata_content.append("Devido √† sua resolu√ß√£o espacial de 1 km, n√£o √© recomendado para an√°lises locais ou de pequena escala.")
                metadata_content.append("")
            
            # NOVO: Se√ß√£o de processamentos realizados
            metadata_content.append("=" * 60)
            metadata_content.append("PROCESSAMENTOS REALIZADOS:")
            metadata_content.append("=" * 60)
            processing_summary = self.get_processing_summary()
            
            if len(processing_summary) == 1 and "Nenhum processamento" in processing_summary[0]:
                metadata_content.append("Dados utilizados conforme baixados da fonte original, sem processamentos adicionais.")
            else:
                metadata_content.append("Os seguintes processamentos foram aplicados aos dados originais:")
                metadata_content.append("")
                
                for i, process in enumerate(processing_summary, 1):
                    metadata_content.append(f"{i:2d}. {process}")
                
                metadata_content.append("")
                metadata_content.append("NOTA: Todos os processamentos utilizaram algoritmos nativos do QGIS.")
                metadata_content.append("Os dados de sa√≠da preservam a qualidade e integridade dos dados originais.")
            
            metadata_content.append("")
            metadata_content.append("=" * 60)
            metadata_content.append("Gerado pelo plugin DesagregaBiomasBR")
            metadata_content.append(f"Desenvolvido para processamento de dados {self.selected_theme}")
            metadata_content.append("=" * 60)
            
            # Salva arquivo
            with open(metadata_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(metadata_content))
            
            print(f"‚úÖ DEBUG: Metadados salvos com {len(metadata_content)} linhas")
            return True
            
        except Exception as e:
            print(f"‚ùå ERROR generate_metadata_file: {str(e)}")
            return False

    def real_step_add_to_qgis(self):
        """Etapa 7: Adiciona arquivo ao QGIS"""
        try:
            self.status_label.setText("üó∫Ô∏è Adicionando ao QGIS...")
            
            if self.checkbox_add_to_map.isChecked() and hasattr(self, 'final_file_path'):
                self.update_notes(f"üó∫Ô∏è Carregando no QGIS | Arquivo: {os.path.basename(self.final_file_path)}", "status")
                
                print(f"üó∫Ô∏è DEBUG: Adicionando {self.final_file_path} ao QGIS")
                
                # CORRE√á√ÉO 1: Nome real do shapefile (baseado no filename)
                real_filename = os.path.splitext(os.path.basename(self.final_file_path))[0]
                layer_name = real_filename  # Usa o nome real do arquivo
                
                print(f"üìã DEBUG: Nome da layer: {layer_name}")
                
                # Carrega layer no QGIS
                layer = QgsVectorLayer(self.final_file_path, layer_name, "ogr")
                
                if layer.isValid():
                    # CORRE√á√ÉO 2: Define CRS como 4674 (SIRGAS 2000)
                    from qgis.core import QgsCoordinateReferenceSystem
                    
                    
                    # CORRE√á√ÉO: N√£o for√ßa CRS, preserva proje√ß√£o original dos dados
                    # DEBUG: setCrs removido - preserva CRS original
                    print(f"‚úÖ DEBUG: Preservando CRS original: {layer.crs().authid()}")
                    
                    print(f"‚úÖ DEBUG: Preservando CRS original: {layer.crs().authid()}")
                    print(f"üìç DEBUG: Extens√£o da layer: {layer.extent()}")
                    # Adiciona ao projeto
                    QgsProject.instance().addMapLayer(layer)
                    print(f"‚úÖ DEBUG: Layer '{layer_name}' adicionada ao projeto")
                    
                    # Zoom para a extens√£o da layer
                    try:
                        from qgis.utils import iface
                        iface.mapCanvas().setExtent(layer.extent())
                        iface.mapCanvas().refresh()
                        print(f"üéØ DEBUG: Zoom ajustado para a extens√£o da layer")
                    except:
                        print(f"‚úÖ DEBUG: Layer adicionada (zoom n√£o ajustado)")
                        
                else:
                    print(f"‚ö†Ô∏è DEBUG: Falha ao carregar layer no QGIS (arquivo foi salvo)")
            else:
                self.update_notes(f"üó∫Ô∏è Adi√ß√£o ao QGIS desabilitada pelo usu√°rio", "status")
                print(f"üó∫Ô∏è DEBUG: Adi√ß√£o ao QGIS desabilitada")
            
            # Agenda finaliza√ß√£o
            QTimer.singleShot(1000, self.real_step_finish)
            
        except Exception as e:
            print(f"‚ùå ERROR real_step_add_to_qgis: {str(e)}")
            # N√£o falha o processo por causa do QGIS
            QTimer.singleShot(1000, self.real_step_finish)

    def real_step_finish(self):
        """Etapa 8: Finaliza processamento"""
        try:
            self.status_label.setText("‚úÖ Processamento conclu√≠do com sucesso!")
            self.status_label.setStyleSheet("color: #2e7c3f; font-weight: bold;")
            
            # Finaliza modo download com sucesso
            self.end_download_mode(success=True)
            
            # Atualiza notas finais
            final_notes = []
            
            if hasattr(self, 'final_file_path'):
                final_notes.append(f"‚úÖ Arquivo salvo: {self.final_file_path}")
            
            final_notes.append(f"üìä Dados: {self.selected_theme} - {self.selected_biome}")
            
            if hasattr(self, 'data_type'):
                final_notes.append(f"üìà Tipo: {self.data_type}")
            
            if hasattr(self, 'start_year') and hasattr(self, 'end_year'):
                final_notes.append(f"üóìÔ∏è Per√≠odo: {self.start_year}-{self.end_year}")
            
            if hasattr(self, 'processing_layers') and self.processing_layers:
                final_notes.append(f"üìä Fei√ß√µes: {self.processing_layers[0].featureCount()}")
            
            if hasattr(self, 'metadata_file_path'):
                final_notes.append(f"üìÑ Metadados: {os.path.basename(self.metadata_file_path)}")
            
            if self.checkbox_add_to_map.isChecked():
                final_notes.append(f"üó∫Ô∏è Adicionado ao QGIS")
            
            # Adiciona resultado final √† linha de configura√ß√£o (cont√≠nua)
            final_part = f"‚úÖ Arquivo salvo: {os.path.basename(self.final_file_path)}"
            
            # Obt√©m a configura√ß√£o atual e adiciona o resultado
            if hasattr(self, 'config_note') and self.config_note:
                complete_line = f"{self.config_note} | {final_part}"
            else:
                complete_line = final_part
            
            self.update_notes(complete_line, "config")
            # Limpa status para mostrar s√≥ a linha completa
            self.status_note = ""
            self._update_notes_display()
            
            print(f"üéâ DEBUG: === PROCESSAMENTO REAL CONCLU√çDO COM SUCESSO! ===")
            
        except Exception as e:
            print(f"‚ùå ERROR real_step_finish: {str(e)}")
            self.status_label.setText(f"‚ùå Erro na finaliza√ß√£o: {str(e)}")
            self.btn_process.setEnabled(True)

    def generate_output_filename(self):
        """Gera nome do arquivo baseado nas sele√ß√µes"""
        try:
            # Base do nome
            parts = [
                self.selected_theme.lower(),
                self.selected_biome.lower().replace(' ', '_').replace('√£', 'a').replace('√¥', 'o'),
                self.data_type
            ]
            
            # Adiciona informa√ß√µes temporais
            if self.data_type == "incremental" and hasattr(self, 'start_year') and hasattr(self, 'end_year'):
                parts.append(f"{self.start_year}_{self.end_year}")
            elif self.data_type == "acumulado" and hasattr(self, 'end_year'):
                base_year = self.prodes_base_years.get(self.selected_biome, 2000)
                parts.append(f"{base_year}_{self.end_year}")
            
            # NOVO: Adiciona informa√ß√µes de corte espacial com nome do arquivo
            if hasattr(self, 'cut_option') and self.cut_option != 0:
                if self.cut_option == 1 and hasattr(self, 'selected_layer') and self.selected_layer:
                    # Layer carregado - usa nome da layer
                    layer_name = self.selected_layer.name()
                    # Remove caracteres especiais e limita tamanho
                    clean_name = layer_name.replace(' ', '_').replace('-', '_').replace('.', '_')
                    clean_name = ''.join(c for c in clean_name if c.isalnum() or c == '_')[:20]
                    parts.append(f"corte_{clean_name}")
                    
                    # Se tem campo e elemento espec√≠fico, adiciona tamb√©m
                    if hasattr(self, 'selected_field') and self.selected_field and hasattr(self, 'selected_element') and self.selected_element:
                        clean_element = str(self.selected_element).replace(' ', '_').replace('-', '_')
                        clean_element = ''.join(c for c in clean_element if c.isalnum() or c == '_')[:15]
                        parts.append(clean_element)
                        
                elif self.cut_option == 2:
                    # Ret√¢ngulo desenhado
                    parts.append("corte_retangulo")
                    
                elif self.cut_option == 3:
                    # IBGE - inclui informa√ß√µes da sele√ß√£o
                    parts.append("corte_ibge")
                    if self.ibge_state:
                        clean_state = self.ibge_state.replace(' ', '_')
                        clean_state = ''.join(c for c in clean_state if c.isalnum() or c == '_')[:10]
                        parts.append(clean_state.lower())
                        
                        if self.ibge_municipality:
                            clean_municipality = self.ibge_municipality.replace(' ', '_')
                            clean_municipality = ''.join(c for c in clean_municipality if c.isalnum() or c == '_')[:15]
                            parts.append(clean_municipality.lower())
            
            filename = "_".join(parts)
            
            # Limita tamanho total do nome (alguns sistemas t√™m limite)
            if len(filename) > 100:
                filename = filename[:100]
                
            print(f"üìÅ DEBUG: Nome do arquivo gerado: {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå ERROR generate_output_filename: {str(e)}")
            return "prodes_result"

    def build_urls_and_filters(self):
        """Constr√≥i URLs e filtros CQL para o processamento"""
        try:
            result = {
                'urls': [],
                'filters': [],
                'layer_names': []
            }
            
            urls = self.prodes_urls[self.selected_biome]
            
            if self.data_type == "incremental":
                # S√≥ yearly_deforestation com filtro
                result['urls'].append(urls['yearly'])
                result['layer_names'].append('yearly_deforestation')
                
                # Constr√≥i filtro CQL baseado na coluna 'year'
                cql_filter = f"year BETWEEN {self.start_year} AND {self.end_year}"
                
                result['filters'].append(cql_filter)
                
            elif self.data_type == "acumulado":
                # accumulated_deforestation (sem filtro) + yearly_deforestation (com filtro at√© ano final)
                result['urls'].append(urls['accumulated'])
                result['urls'].append(urls['yearly'])
                result['layer_names'].append('accumulated_deforestation')
                result['layer_names'].append('yearly_deforestation')
                
                # Filtro s√≥ para yearly (accumulated n√£o precisa de filtro)
                result['filters'].append("")  # Sem filtro para accumulated
                
                # Para yearly at√© o ano final, baseado na coluna 'year'
                base_year = self.prodes_base_years.get(self.selected_biome, 2000)
                cql_filter = f"year%20BETWEEN%20{base_year}%20AND%20{self.end_year}"
                
                result['filters'].append(cql_filter)
            
            return result
            
        except Exception as e:
            print(f"‚ùå ERROR build_urls_and_filters: {str(e)}")
            return {'urls': [], 'filters': [], 'layer_names': []}

    def build_deter_urls_and_filters(self):
        """Constr√≥i URLs e filtros para processamento DETER - ESTRAT√âGIA ROBUSTA"""
        try:
            result = {
                'urls': [],
                'filters': [],
                'layer_names': []
            }
            
            # URLs dos servi√ßos DETER
            deter_urls = {
                'Cerrado': 'https://terrabrasilis.dpi.inpe.br/geoserver/deter-cerrado-nb/deter_cerrado/ows',
                'Amaz√¥nia Legal': 'https://terrabrasilis.dpi.inpe.br/geoserver/deter-amz/deter_amz/ows'
            }
            
            # URL √∫nica para DETER
            url = deter_urls[self.selected_biome]
            result['urls'].append(url)
            result['layer_names'].append('deter_alerts')
            
            # ESTRAT√âGIA ROBUSTA: Baixar primeiro s√≥ com filtro espacial
            # Depois aplicar filtros temporais/classes na mem√≥ria
            
            # Para "todo o bioma": SEM filtro na URL
            # Para corte espacial: filtro BBOX na URL
            # Filtros temporais/classes: aplicados na mem√≥ria
            
            # CORRE√á√ÉO: DETER usa a mesma estrat√©gia que PRODES
            # N√£o precisa construir BBOX aqui, a fun√ß√£o download_wfs_layer() j√° faz isso
            print(f"‚úÖ INFO: DETER usar√° fun√ß√£o download_wfs_layer() com suporte autom√°tico ao BBOX")
            result['filters'].append('')  # Sem filtro na URL - filtros aplicados na mem√≥ria
            
            # NOVA ESTRAT√âGIA: Constr√≥i express√£o QGIS nativa
            # Formato de data ISO para QGIS: YYYY-MM-DD
            start_date = f"{self.deter_start_year}-01-01"
            end_date = f"{self.deter_end_year}-12-31"
            
            # Express√£o de data usando sintaxe QGIS
            date_filter = f"\"view_date\" >= '{start_date}' AND \"view_date\" <= '{end_date}'"
            
            # Classes selecionadas
            available_classes = self.deter_classes[self.selected_biome]
            total_available = len(available_classes)
            total_selected = len(self.deter_selected_classes)
            
            if total_selected == total_available:
                # Todas as classes = s√≥ filtro temporal
                qgis_expression = date_filter
                print(f"‚úÖ INFO: Todas as {total_selected} classes selecionadas - aplicando APENAS filtro temporal")
            else:
                # Algumas classes = filtro temporal + classes
                if len(self.deter_selected_classes) == 1:
                    class_filter = f"\"classname\" = '{self.deter_selected_classes[0]}'"
                else:
                    classes_str = "','".join(self.deter_selected_classes)
                    class_filter = f"\"classname\" IN ('{classes_str}')"
                
                qgis_expression = f"{date_filter} AND {class_filter}"
                print(f"‚úÖ INFO: {total_selected}/{total_available} classes selecionadas - aplicando filtros temporal + classes")
            
            # ARMAZENA express√£o QGIS para usar na fun√ß√£o apply_temporal_filter
            result['memory_filter'] = qgis_expression
            
            print(f"üîç DEBUG: URL DETER: {url}")
            print(f"üîç DEBUG: Express√£o QGIS: {qgis_expression}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå ERROR build_deter_urls_and_filters: {str(e)}")
            return {'urls': [], 'filters': [], 'layer_names': [], 'memory_filter': ''}

    def process_terraclass_data(self):
        """Processa os dados TERRACLASS conforme configura√ß√µes - VERS√ÉO REAL"""
        try:
            print(f"üöÄ DEBUG: === INICIANDO PROCESSAMENTO REAL TERRACLASS ===")
            
            # NOVO: Reseta log de processamentos para nova opera√ß√£o
            self.processing_log = []
            
            # Gera nome do arquivo baseado nas sele√ß√µes TERRACLASS
            self.output_filename = self.generate_terraclass_output_filename()
            print(f"üìÅ DEBUG: Nome do arquivo TERRACLASS: {self.output_filename}")
            
            # Constr√≥i URLs e informa√ß√µes para TERRACLASS
            self.terraclass_download_info = self.build_terraclass_download_info()
            print(f"üåê DEBUG: Info de download TERRACLASS: {self.terraclass_download_info}")
            
            # Inicia processamento REAL
            self.current_step_index = 0
            self.processing_layers = []  # Para armazenar layers baixadas
            
            # Etapa 1: Baixar arquivo ZIP
            self.terraclass_step_download_zip()
            
        except Exception as e:
            print(f"‚ùå ERROR process_terraclass_data: {str(e)}")
            self.status_label.setText(f"‚ùå Erro no processamento TERRACLASS: {str(e)}")
            self.end_download_mode(success=False)

    def generate_terraclass_output_filename(self):
        """Gera nome do arquivo de sa√≠da para TERRACLASS"""
        try:
            # Componentes do nome
            theme = self.selected_theme.lower()
            biome = self.selected_biome.lower().replace(' ', '_').replace('√£', 'a').replace('√¥', 'o')
            year = str(self.terraclass_year)
            
            # Estado normalizado
            state_normalized = self.normalize_terraclass_text(self.terraclass_state)
            
            # Tipo de download
            if self.terraclass_municipality:
                # Download municipal
                municipality_normalized = self.normalize_terraclass_text(self.terraclass_municipality)
                download_type = "municipal"
                location_part = f"{state_normalized}_{municipality_normalized}"
            else:
                # Download estadual
                download_type = "estadual"
                location_part = state_normalized
            
            # Nome final
            filename = f"{theme}_{biome}_{year}_{download_type}_{location_part}"
            
            # Limita tamanho do nome
            if len(filename) > 100:
                filename = f"{theme}_{biome}_{year}_{location_part}"
            
            print(f"üìÅ DEBUG: Nome TERRACLASS gerado: {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå ERROR generate_terraclass_output_filename: {str(e)}")
            return f"terraclass_{self.selected_biome.lower()}_{self.terraclass_year}_{self.terraclass_state.lower()}"

    def build_terraclass_download_info(self):
        """Constr√≥i informa√ß√µes de download para TERRACLASS"""
        try:
            # Obt√©m dados do shapefile IBGE
            shapefile_data = self.get_terraclass_shapefile_data()
            if not shapefile_data:
                raise Exception("Falha ao obter dados do shapefile IBGE")
            
            # Constr√≥i URL baseada no tipo de download
            if self.terraclass_municipality:
                # Download municipal
                url_template = "https://www.terraclass.gov.br/helpers/terraclass_data4download_2024/V/municipal/{uf_lower}/{biome}.{ano}.{municipio_normalizado}.{UF}.{geocodigo_munic}.V.zip"
                
                url = url_template.format(
                    uf_lower=shapefile_data['uf'].lower(),
                    biome='AMZ' if self.selected_biome == 'Amaz√¥nia' else 'CER',
                    ano=self.terraclass_year,
                    municipio_normalizado=self.normalize_terraclass_text(self.terraclass_municipality),
                    UF=shapefile_data['uf'],
                    geocodigo_munic=shapefile_data['geocodigo']
                )
                download_type = "Municipal"
                location = f"{self.terraclass_state} - {self.terraclass_municipality}"
            else:
                # Download estadual
                url_template = "https://www.terraclass.gov.br/helpers/terraclass_data4download_2024/V/estadual/{biome}.{ano}.{estado_normalizado}.{geocodigo_uf}.V.zip"
                
                url = url_template.format(
                    biome='AMZ' if self.selected_biome == 'Amaz√¥nia' else 'CER',
                    ano=self.terraclass_year,
                    estado_normalizado=self.normalize_terraclass_text(self.terraclass_state),
                    geocodigo_uf=shapefile_data['cod_uf']
                )
                download_type = "Estadual"
                location = self.terraclass_state
            
            return {
                'url': url,
                'download_type': download_type,
                'location': location,
                'biome': self.selected_biome,
                'year': self.terraclass_year,
                'shapefile_data': shapefile_data
            }
            
        except Exception as e:
            print(f"‚ùå ERROR build_terraclass_download_info: {str(e)}")
            return None

    def get_terraclass_shapefile_data(self):
        """Obt√©m dados necess√°rios do shapefile IBGE para TERRACLASS"""
        try:
            if not self.ibge_layer:
                return None
            
            # Constr√≥i filtro para encontrar os dados necess√°rios
            if self.terraclass_municipality:
                # Para munic√≠pio espec√≠fico
                expression = f'"bioma" = \'{self.selected_biome}\' AND "estado" = \'{self.terraclass_state}\' AND "nome" = \'{self.terraclass_municipality}\''
            else:
                # Para estado (pega qualquer munic√≠pio do estado para obter cod_uf)
                expression = f'"bioma" = \'{self.selected_biome}\' AND "estado" = \'{self.terraclass_state}\''
            
            # Busca primeira fei√ß√£o que atende o crit√©rio
            request = QgsFeatureRequest().setFilterExpression(expression)
            features = list(self.ibge_layer.getFeatures(request))
            
            if not features:
                print(f"‚ùå DEBUG: Nenhuma fei√ß√£o encontrada no shapefile para {self.terraclass_state}")
                return None
            
            feature = features[0]  # Usa primeira fei√ß√£o encontrada
            
            data = {
                'nome': feature['nome'],
                'geocodigo': feature['geocodigo'], 
                'uf': feature['uf'],
                'estado': feature['estado'],
                'bioma': feature['bioma'],
                'cod_uf': feature['cod_uf']
            }
            
            print(f"‚úÖ DEBUG: Dados do shapefile obtidos: {data}")
            return data
            
        except Exception as e:
            print(f"‚ùå ERROR get_terraclass_shapefile_data: {str(e)}")
            return None

    def terraclass_step_download_zip(self):
        """Etapa 1: Baixa arquivo ZIP do TERRACLASS"""
        try:
            self.status_label.setText("üì• Baixando arquivo TERRACLASS...")
            self.update_notes(f"üì• Baixando {self.terraclass_download_info['download_type']} | {self.terraclass_download_info['location']}", "status")
            
            url = self.terraclass_download_info['url']
            print(f"üåê DEBUG: URL TERRACLASS: {url}")
            
            # Baixa arquivo ZIP
            zip_file_path = self.download_terraclass_zip(url)
            
            if zip_file_path:
                print(f"‚úÖ DEBUG: ZIP baixado com sucesso: {zip_file_path}")
                self.terraclass_zip_path = zip_file_path
                
                # Agenda pr√≥xima etapa
                QTimer.singleShot(1000, self.terraclass_step_extract_zip)
            else:
                raise Exception("Falha ao baixar arquivo ZIP")
                
        except Exception as e:
            print(f"‚ùå ERROR terraclass_step_download_zip: {str(e)}")
            self.status_label.setText(f"‚ùå Erro no download: {str(e)}")
            self.end_download_mode(success=False)

    def download_terraclass_zip(self, url):
        """Baixa arquivo ZIP do TERRACLASS"""
        try:
            from qgis.PyQt.QtCore import QUrl, QEventLoop
            from qgis.PyQt.QtNetwork import QNetworkRequest, QNetworkReply
            import tempfile
            import os
            
            print(f"üåê DEBUG: Iniciando download ZIP: {url}")
            
            # Verifica abort antes de iniciar download
            if self.check_abort_signal():
                print("üõë DEBUG: Download TERRACLASS abortado antes do in√≠cio")
                return None
            
            # Cria request
            request = QNetworkRequest(QUrl(url))
            request.setRawHeader(b"User-Agent", b"QGIS-DesagregaBiomasBR")
            reply = self.network_manager.get(request)
            
            # Aguarda resposta com verifica√ß√µes peri√≥dicas de abort
            loop = QEventLoop()
            reply.finished.connect(loop.quit)
            
            # Timer para verificar abort periodicamente durante download
            abort_timer = QTimer()
            abort_timer.timeout.connect(lambda: (
                self.check_abort_signal() and (
                    reply.abort(),
                    loop.quit(),
                    print("üõë DEBUG: Download TERRACLASS abortado durante transfer√™ncia")
                )[-1]
            ))
            abort_timer.start(500)  # Verifica a cada 500ms
            
            loop.exec_()
            abort_timer.stop()
            
            if reply.error() == QNetworkReply.NoError:
                # L√™ dados
                data = reply.readAll()
                
                if len(data) > 1000:  # Verifica se √© um arquivo v√°lido
                    # Salva arquivo tempor√°rio
                    temp_dir = tempfile.gettempdir()
                    zip_filename = f"terraclass_{self.terraclass_year}_{id(self)}.zip"
                    zip_path = os.path.join(temp_dir, zip_filename)
                    
                    with open(zip_path, 'wb') as f:
                        f.write(data.data())
                    
                    print(f"‚úÖ DEBUG: ZIP salvo em: {zip_path}")
                    print(f"üìä DEBUG: Tamanho do arquivo: {len(data)} bytes")
                    
                    reply.deleteLater()
                    return zip_path
                else:
                    print(f"‚ùå DEBUG: Arquivo muito pequeno ({len(data)} bytes) - provavelmente erro")
            else:
                error_msg = reply.errorString()
                print(f"‚ùå DEBUG: Erro no download: {error_msg}")
            
            reply.deleteLater()
            return None
            
        except Exception as e:
            print(f"‚ùå ERROR download_terraclass_zip: {str(e)}")
            return None

    def terraclass_step_extract_zip(self):
        """Etapa 2: Extrai arquivo ZIP e processa shapefile"""
        try:
            self.status_label.setText("üì¶ Extraindo arquivo TERRACLASS...")
            self.update_notes(f"üì¶ Extraindo ZIP | Processando shapefile", "status")
            
            # Extrai ZIP
            extracted_files = self.extract_terraclass_zip(self.terraclass_zip_path)
            
            if extracted_files:
                # Procura shapefile principal
                shapefile_path = self.find_terraclass_shapefile(extracted_files)
                
                if shapefile_path:
                    print(f"‚úÖ DEBUG: Shapefile encontrado: {shapefile_path}")
                    self.terraclass_shapefile_path = shapefile_path
                    
                    # Carrega shapefile
                    layer = QgsVectorLayer(shapefile_path, f"TERRACLASS_{self.terraclass_year}", "ogr")
                    
                    if layer.isValid():
                        self.processing_layers = [layer]
                        
                        # NOVO: Registra processamento espec√≠fico TERRACLASS
                        self.add_processing_log(
                            "EXTRA√á√ÉO DE ARQUIVO",
                            f"Arquivo ZIP extra√≠do ‚Üí Shapefile TERRACLASS carregado ({layer.featureCount()} fei√ß√µes)"
                        )
                        
                        print(f"‚úÖ DEBUG: Shapefile carregado: {layer.featureCount()} fei√ß√µes")
                        
                        # Agenda pr√≥xima etapa
                        QTimer.singleShot(1000, self.terraclass_step_apply_style)
                    else:
                        raise Exception("Shapefile extra√≠do √© inv√°lido")
                else:
                    raise Exception("Nenhum shapefile encontrado no ZIP")
            else:
                raise Exception("Falha ao extrair arquivo ZIP")
                
        except Exception as e:
            print(f"‚ùå ERROR terraclass_step_extract_zip: {str(e)}")
            self.status_label.setText(f"‚ùå Erro na extra√ß√£o: {str(e)}")
            self.end_download_mode(success=False)

    def extract_terraclass_zip(self, zip_path):
        """Extrai arquivo ZIP do TERRACLASS"""
        try:
            import zipfile
            import tempfile
            import os
            
            # Cria diret√≥rio tempor√°rio para extra√ß√£o
            extract_dir = os.path.join(tempfile.gettempdir(), f"terraclass_extract_{id(self)}")
            os.makedirs(extract_dir, exist_ok=True)
            
            print(f"üì¶ DEBUG: Extraindo para: {extract_dir}")
            
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(extract_dir)
                
                # Lista arquivos extra√≠dos
                extracted_files = []
                for root, dirs, files in os.walk(extract_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        extracted_files.append(file_path)
                        print(f"   üìÑ {file}")
                
                print(f"‚úÖ DEBUG: {len(extracted_files)} arquivos extra√≠dos")
                return extracted_files
                
        except Exception as e:
            print(f"‚ùå ERROR extract_terraclass_zip: {str(e)}")
            return None

    def find_terraclass_shapefile(self, extracted_files):
        """Encontra o shapefile principal nos arquivos extra√≠dos"""
        try:
            # Procura por arquivos .shp
            shapefiles = [f for f in extracted_files if f.endswith('.shp')]
            
            if not shapefiles:
                print(f"‚ùå DEBUG: Nenhum arquivo .shp encontrado")
                return None
            
            # Se h√° apenas um, usa ele
            if len(shapefiles) == 1:
                print(f"‚úÖ DEBUG: Shapefile √∫nico encontrado: {shapefiles[0]}")
                return shapefiles[0]
            
            # Se h√° m√∫ltiplos, procura pelo principal (maior ou com padr√£o espec√≠fico)
            main_shapefile = None
            
            for shp in shapefiles:
                filename = os.path.basename(shp).lower()
                # Padr√µes que indicam arquivo principal
                if any(pattern in filename for pattern in ['terraclass', 'principal', 'main']):
                    main_shapefile = shp
                    break
            
            # Se n√£o encontrou por padr√£o, usa o primeiro
            if not main_shapefile:
                main_shapefile = shapefiles[0]
            
            print(f"‚úÖ DEBUG: Shapefile principal selecionado: {main_shapefile}")
            return main_shapefile
            
        except Exception as e:
            print(f"‚ùå ERROR find_terraclass_shapefile: {str(e)}")
            return None

    def terraclass_step_apply_style(self):
        """Etapa 3: Aplica estilo e finaliza processamento"""
        try:
            self.status_label.setText("üé® Aplicando estilo TERRACLASS...")
            self.update_notes(f"üé® Aplicando simbologia | Finalizando processamento", "status")
            
            if self.processing_layers:
                layer = self.processing_layers[0]
                
                # Aplica estilo TERRACLASS se arquivo existe
                style_applied = self.apply_terraclass_style(layer)
                
                if style_applied:
                    print(f"‚úÖ DEBUG: Estilo TERRACLASS aplicado")
                else:
                    print(f"‚ö†Ô∏è DEBUG: Estilo padr√£o aplicado (arquivo QML n√£o encontrado)")
                
                # Agenda finaliza√ß√£o
                QTimer.singleShot(1000, self.terraclass_step_finish)
            else:
                raise Exception("Nenhuma layer para aplicar estilo")
                
        except Exception as e:
            print(f"‚ùå ERROR terraclass_step_apply_style: {str(e)}")
            self.status_label.setText(f"‚ùå Erro ao aplicar estilo: {str(e)}")
            self.progress_bar.setVisible(False)
            self.btn_process.setEnabled(True)

    def apply_terraclass_style(self, layer):
        """Aplica estilo TERRACLASS conforme arquivo QML"""
        try:
            # Procura arquivo de estilo
            style_path = os.path.join(self.plugin_dir, 'estilo_terraclass.qml')
            
            if os.path.exists(style_path):
                print(f"üé® DEBUG: Aplicando estilo: {style_path}")
                
                # Carrega estilo do arquivo QML
                result = layer.loadNamedStyle(style_path)
                
                if result[1]:  # result[1] indica sucesso
                    print(f"‚úÖ DEBUG: Estilo QML aplicado com sucesso")
                    layer.triggerRepaint()
                    return True
                else:
                    print(f"‚ö†Ô∏è DEBUG: Falha ao carregar estilo QML: {result[0]}")
            else:
                print(f"‚ö†Ô∏è DEBUG: Arquivo de estilo n√£o encontrado: {style_path}")
            
            # Aplica estilo padr√£o se QML falhar
            self.apply_default_terraclass_style(layer)
            return False
            
        except Exception as e:
            print(f"‚ùå ERROR apply_terraclass_style: {str(e)}")
            self.apply_default_terraclass_style(layer)
            return False

    def apply_default_terraclass_style(self, layer):
        """Aplica estilo padr√£o para TERRACLASS"""
        try:
            from qgis.core import QgsSymbol, QgsSingleSymbolRenderer
            from qgis.PyQt.QtGui import QColor
            
            # Cria s√≠mbolo padr√£o
            symbol = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol.setColor(QColor(34, 139, 34, 180))  # Verde semi-transparente
            symbol.symbolLayer(0).setStrokeColor(QColor(0, 100, 0, 255))  # Borda verde escura
            symbol.symbolLayer(0).setStrokeWidth(0.5)
            
            # Aplica renderizador
            renderer = QgsSingleSymbolRenderer(symbol)
            layer.setRenderer(renderer)
            layer.triggerRepaint()
            
            print(f"‚úÖ DEBUG: Estilo padr√£o TERRACLASS aplicado")
            
        except Exception as e:
            print(f"‚ùå ERROR apply_default_terraclass_style: {str(e)}")

    def terraclass_step_finish(self):
        """Etapa 4: Salva arquivo e finaliza processamento TERRACLASS"""
        try:
            # Salva arquivo na pasta escolhida pelo usu√°rio
            if not self.processing_layers:
                raise Exception("Nenhuma layer para salvar")
            
            final_layer = self.processing_layers[0]
            
            # Determina formato e extens√£o
            if self.radio_shapefile.isChecked():
                format_name = "ESRI Shapefile"
                extension = ".shp"
            else:
                format_name = "GPKG"
                extension = ".gpkg"
            
            # Monta caminho completo na pasta escolhida pelo usu√°rio
            dest_path = self.dest_path_edit.toPlainText().strip()
            full_path = os.path.join(dest_path, f"{self.output_filename}{extension}")
            
            self.status_label.setText("üíæ Salvando arquivo TERRACLASS...")
            
            # Salva o arquivo
            success = self.save_layer_to_file(final_layer, full_path, format_name)
            
            if not success:
                raise Exception("Falha ao salvar arquivo TERRACLASS")
            
            self.final_file_path = full_path
            
            # Gera metadados se solicitado
            if self.checkbox_generate_metadata.isChecked():
                self.status_label.setText("üìÑ Gerando metadados TERRACLASS...")
                
                metadata_path = os.path.join(dest_path, f"{self.output_filename}.txt")
                self.generate_terraclass_metadata_file(metadata_path)
                self.metadata_file_path = metadata_path
            
            # Adiciona layer ao QGIS se solicitado
            if self.checkbox_add_to_map.isChecked():
                self.status_label.setText("üó∫Ô∏è Adicionando TERRACLASS ao QGIS...")
                
                # Carrega layer salva no QGIS
                layer_name = self.output_filename
                layer = QgsVectorLayer(full_path, layer_name, "ogr")
                
                if layer.isValid():
                    # Adiciona ao projeto
                    QgsProject.instance().addMapLayer(layer)
                    
                    # üé® APLICA SIMBOLOGIA TERRACLASS
                    self.status_label.setText("üé® Aplicando simbologia TERRACLASS...")
                    self.apply_terraclass_style(layer)
                    
                    # Zoom para a extens√£o da layer
                    try:
                        from qgis.utils import iface
                        iface.mapCanvas().setExtent(layer.extent())
                        iface.mapCanvas().refresh()
                    except:
                        pass
            
            # Atualiza status final
            self.status_label.setText("‚úÖ Processamento TERRACLASS conclu√≠do com sucesso!")
            self.status_label.setStyleSheet("color: #2e7c3f; font-weight: bold;")
            
            # Finaliza modo download com sucesso
            self.end_download_mode(success=True)
            
            # Atualiza notas finais
            final_part = f"‚úÖ Arquivo salvo: {os.path.basename(full_path)}"
            
            # Obt√©m a configura√ß√£o atual e adiciona o resultado
            if hasattr(self, 'config_note') and self.config_note:
                complete_line = f"{self.config_note} | {final_part}"
            else:
                complete_line = final_part
            
            self.update_notes(complete_line, "config")
            # Limpa status para mostrar s√≥ a linha completa
            self.status_note = ""
            self._update_notes_display()
            
        except Exception as e:
            from qgis.core import QgsMessageLog, Qgis
            error_msg = f"‚ùå ERRO terraclass_step_finish: {str(e)}"
            QgsMessageLog.logMessage(error_msg, "DesagregaBiomasBR", Qgis.Critical)
            self.status_label.setText(f"‚ùå Erro na finaliza√ß√£o: {str(e)}")
            self.end_download_mode(success=False)

    def generate_terraclass_metadata_file(self, metadata_path):
        """Gera arquivo de metadados espec√≠fico para TERRACLASS"""
        try:
            from datetime import datetime
            
            metadata_content = []
            metadata_content.append("=" * 60)
            metadata_content.append(f"METADADOS DO PROCESSAMENTO TERRACLASS")
            metadata_content.append("Plugin DesagregaBiomasBR")
            metadata_content.append("=" * 60)
            metadata_content.append("")
            
            # Texto introdut√≥rio espec√≠fico do TERRACLASS
            intro_text = "O Projeto TerraClass tem como objetivo qualificar o desflorestamento da Amaz√¥nia Legal e Cerrado. "
            intro_text += "A partir das √°reas mapeadas pelo PRODES, o TerraClass produz mapas sist√™micos de uso e cobertura "
            intro_text += "das terras desflorestadas nas regi√µes indicadas."
            
            metadata_content.append("DESCRI√á√ÉO:")
            metadata_content.append(intro_text)
            metadata_content.append("")
            
            # Informa√ß√µes gerais
            metadata_content.append("INFORMA√á√ïES GERAIS:")
            metadata_content.append(f"Data/Hora do processamento: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
            metadata_content.append(f"Tema: TERRACLASS")
            metadata_content.append(f"Bioma: {self.selected_biome}")
            metadata_content.append(f"Ano: {self.terraclass_year}")
            if hasattr(self, 'terraclass_state') and self.terraclass_state:
                metadata_content.append(f"Estado: {self.terraclass_state}")
            if hasattr(self, 'terraclass_municipality') and self.terraclass_municipality:
                metadata_content.append(f"Munic√≠pio: {self.terraclass_municipality}")
            metadata_content.append("")
            
            # Metodologia
            metadata_content.append("METODOLOGIA:")
            methodol_text = "A metodologia TerraClass, desenvolvida conjuntamente entre o INPE e a EMBRAPA, "
            methodol_text += "baseia-se atualmente na an√°lise da s√©rie temporal de imagens de sat√©lite de m√©dia resolu√ß√£o (20 a 10m), "
            methodol_text += "e t√©cnicas de processamento de imagens, para identificar as diferentes classes de uso e cobertura: "
            methodol_text += "vegeta√ß√£o natural ‚Äì prim√°ria e secund√°ria; cultura agr√≠cola ‚Äì perene, semiperene, tempor√°ria de um ciclo, "
            methodol_text += "e de mais de um ciclo; pastagem; silvicultura; minera√ß√£o; urbanizada; outras √°reas edificadas; "
            methodol_text += "outros usos; natural n√£o-florestal e corpos d¬¥√°gua."
            metadata_content.append(methodol_text)
            metadata_content.append("")
            
            # Configura√ß√µes temporais
            metadata_content.append("CONFIGURA√á√ïES TEMPORAIS:")
            metadata_content.append(f"Unidade temporal: Anual")
            metadata_content.append(f"Ano de refer√™ncia: {self.terraclass_year}")
            metadata_content.append("")
            
            # Configura√ß√µes espaciais
            metadata_content.append("CONFIGURA√á√ïES ESPACIAIS:")
            metadata_content.append(f"Bioma: {self.selected_biome}")
            if hasattr(self, 'terraclass_state') and self.terraclass_state:
                metadata_content.append(f"Estado: {self.terraclass_state}")
                if hasattr(self, 'terraclass_municipality') and self.terraclass_municipality:
                    metadata_content.append(f"Munic√≠pio: {self.terraclass_municipality}")
                    metadata_content.append("Tipo de recorte: Municipal")
                else:
                    metadata_content.append("Tipo de recorte: Estadual")
            else:
                metadata_content.append("Tipo de recorte: Bioma completo")
            metadata_content.append("")
            
            # URL do arquivo
            metadata_content.append("ORIGEM DOS DADOS:")
            if hasattr(self, 'terraclass_download_info') and self.terraclass_download_info:
                metadata_content.append(f"Tipo de download: {self.terraclass_download_info['download_type']}")
                metadata_content.append(f"Local: {self.terraclass_download_info['location']}")
                metadata_content.append(f"URL: {self.terraclass_download_info['url']}")
            metadata_content.append("")
            
            # Informa√ß√µes do arquivo final
            metadata_content.append("ARQUIVO RESULTANTE:")
            metadata_content.append(f"Nome: {self.output_filename}")
            metadata_content.append(f"Caminho: {getattr(self, 'final_file_path', 'N/A')}")
            metadata_content.append(f"Formato: {'Shapefile' if self.radio_shapefile.isChecked() else 'GeoPackage'}")
            
            if hasattr(self, 'processing_layers') and self.processing_layers:
                final_layer = self.processing_layers[0]
                metadata_content.append(f"N√∫mero de fei√ß√µes: {final_layer.featureCount()}")
                metadata_content.append(f"Sistema de coordenadas: {final_layer.crs().authid()} - {final_layer.crs().description()}")
                metadata_content.append(f"Tipo de geometria: {QgsWkbTypes.displayString(final_layer.wkbType())}")
                
                # Extens√£o geogr√°fica
                extent = final_layer.extent()
                if not extent.isEmpty():
                    metadata_content.append(f"Extens√£o geogr√°fica:")
                    metadata_content.append(f"  Longitude m√≠nima: {extent.xMinimum():.6f}")
                    metadata_content.append(f"  Longitude m√°xima: {extent.xMaximum():.6f}")
                    metadata_content.append(f"  Latitude m√≠nima: {extent.yMinimum():.6f}")
                    metadata_content.append(f"  Latitude m√°xima: {extent.yMaximum():.6f}")
                
                metadata_content.append("")  # NOVO: Linha em branco antes dos campos da tabela
                    
                # Campos da tabela (classes de uso)
                fields = final_layer.fields()
                if len(fields) > 0:
                    metadata_content.append(f"Campos da tabela:")
                    for field in fields:
                        metadata_content.append(f"  {field.name()}: {field.typeName()}")
                        
                    metadata_content.append("")  # NOVO: Linha em branco ap√≥s campos da tabela
                    
                    # An√°lise das classes de uso presentes
                    metadata_content.append("CLASSES DE USO E COBERTURA IDENTIFICADAS:")
                    
                    # Busca por campos que podem conter classes de uso
                    class_fields = []
                    for field in fields:
                        field_name = field.name().lower()
                        if any(keyword in field_name for keyword in ['class', 'uso', 'cover', 'terra']):
                            class_fields.append(field.name())
                    
                    if class_fields:
                        for class_field in class_fields[:2]:  # Primeiros 2 campos de classe
                            unique_values = []
                            for feature in final_layer.getFeatures():
                                value = feature[class_field]
                                if value and value not in unique_values:
                                    unique_values.append(value)
                            
                            if unique_values:
                                metadata_content.append(f"  Campo '{class_field}':")
                                for value in sorted(unique_values)[:15]:  # Primeiras 15 classes
                                    metadata_content.append(f"    - {value}")
                                if len(unique_values) > 15:
                                    metadata_content.append(f"    ... e mais {len(unique_values) - 15} classes")
            
            metadata_content.append("")
            metadata_content.append("INFORMA√á√ïES ADICIONAIS:")
            metadata_content.append("O TerraClass √© uma iniciativa conjunta do INPE (Instituto Nacional de Pesquisas Espaciais)")
            metadata_content.append("e EMBRAPA (Empresa Brasileira de Pesquisa Agropecu√°ria) para qualifica√ß√£o do uso da terra")
            metadata_content.append("em √°reas desflorestadas dos biomas brasileiros.")
            metadata_content.append("")
            metadata_content.append("Palavras-chave: uso da terra, cobertura da terra, desflorestamento, PRODES, sensoriamento remoto")
            metadata_content.append("")
            
            # NOVO: Se√ß√£o espec√≠fica de processamentos TERRACLASS
            metadata_content.append("=" * 60)
            metadata_content.append("PROCESSAMENTOS REALIZADOS:")
            metadata_content.append("=" * 60)
            processing_summary = self.get_processing_summary()
            
            if len(processing_summary) == 1 and "Nenhum processamento" in processing_summary[0]:
                metadata_content.append("Dados utilizados conforme baixados da fonte original (arquivo ZIP).")
                metadata_content.append("Processamento realizado: Extra√ß√£o de arquivo ZIP + Aplica√ß√£o de simbologia padr√£o.")
            else:
                metadata_content.append("Os seguintes processamentos foram aplicados aos dados originais:")
                metadata_content.append("")
                
                for i, process in enumerate(processing_summary, 1):
                    metadata_content.append(f"{i:2d}. {process}")
                
                metadata_content.append("")
                metadata_content.append("NOTA: Todos os processamentos utilizaram algoritmos nativos do QGIS.")
                metadata_content.append("Os dados TERRACLASS preservam a classifica√ß√£o original INPE/EMBRAPA.")
                
            metadata_content.append("")
            metadata_content.append("=" * 60)
            metadata_content.append("Gerado pelo plugin DesagregaBiomasBR")
            metadata_content.append(f"Desenvolvido para processamento de dados TERRACLASS")
            metadata_content.append("=" * 60)
            
            # Salva arquivo
            with open(metadata_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(metadata_content))
            
            return True
            
        except Exception as e:
            from qgis.core import QgsMessageLog, Qgis
            error_msg = f"‚ùå ERRO generate_terraclass_metadata_file: {str(e)}"
            QgsMessageLog.logMessage(error_msg, "DesagregaBiomasBR", Qgis.Critical)
            return False

    def generate_deter_output_filename(self):
        """Gera nome do arquivo de sa√≠da para DETER"""
        try:
            # Componentes do nome
            theme = self.selected_theme.lower()
            biome = self.selected_biome.lower().replace(' ', '_').replace('√¢', 'a').replace('√¥', 'o')
            period = f"{self.deter_start_year}_{self.deter_end_year}"
            
            # Classes selecionadas com l√≥gica inteligente
            if self.selected_biome and self.selected_biome in self.deter_classes:
                available_classes = self.deter_classes[self.selected_biome]
                total_available = len(available_classes)
                total_selected = len(self.deter_selected_classes)
                
                if total_selected == total_available:
                    # Todas as classes = sem filtro
                    classes_part = "todas_classes"
                elif total_selected == 1:
                    # Uma classe espec√≠fica
                    classes_part = self.deter_selected_classes[0].lower().replace('_', '')
                else:
                    # Algumas classes
                    classes_part = f"select_{total_selected}_de_{total_available}"
            else:
                # Fallback
                classes_part = "classes_selecionadas"
            
            # Tipo de corte
            cut_name = self.get_cut_option_name()
            
            # Nome final
            filename = f"{theme}_{biome}_{period}_{classes_part}_{cut_name}"
            
            # Limita tamanho do nome
            if len(filename) > 100:
                filename = f"{theme}_{biome}_{period}_{cut_name}"
            
            print(f"üìÅ DEBUG: Nome DETER gerado: {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå ERROR generate_deter_output_filename: {str(e)}")
            return f"deter_{self.selected_biome.lower()}_{self.deter_start_year}_{self.deter_end_year}"



    def create_prodes_step2_content(self):
        """Cria o conte√∫do espec√≠fico para configura√ß√£o temporal do PRODES"""
        
        # Campo 1: Tipo de Dados (renumerado de 2 para 1)
        data_type_group = QGroupBox("1. Tipo de Dados PRODES")
        data_type_layout = QVBoxLayout()
        
        self.data_type_button_group = QButtonGroup()
        
        self.radio_incremental = QRadioButton("Incremental (apenas os anos do intervalo)")
        self.radio_incremental.setToolTip("Intervalo de desmatamento entre um per√≠odo de anos espec√≠fico")
        self.radio_incremental.setChecked(True)  # Padr√£o incremental
        
        self.radio_acumulado = QRadioButton("Acumulado (do primeiro ano at√© o ano final)")
        self.radio_acumulado.setToolTip("Parte do zero de cada bioma at√© o ano final escolhido")
        
        self.data_type_button_group.addButton(self.radio_incremental, 0)
        self.data_type_button_group.addButton(self.radio_acumulado, 1)
        self.data_type_button_group.buttonClicked.connect(self.on_data_type_changed)
        
        data_type_layout.addWidget(self.radio_incremental)
        data_type_layout.addWidget(self.radio_acumulado)
        data_type_group.setLayout(data_type_layout)
        self.content_layout.addWidget(data_type_group)
        
        # Campo 2: Sele√ß√£o de Anos (renumerado de 3 para 2)
        self.years_group = QGroupBox("2. Sele√ß√£o de Anos")
        years_layout = QGridLayout()
        
        # Labels e combos para anos
        self.start_year_label = QLabel("Ano inicial:")
        self.start_year_combo = QComboBox()
        self.start_year_combo.currentTextChanged.connect(self.on_start_year_changed)
        
        self.end_year_label = QLabel("Ano final:")
        self.end_year_combo = QComboBox()
        self.end_year_combo.currentTextChanged.connect(self.on_end_year_changed)
        
        years_layout.addWidget(self.start_year_label, 0, 0)
        years_layout.addWidget(self.start_year_combo, 0, 1)
        years_layout.addWidget(self.end_year_label, 1, 0)
        years_layout.addWidget(self.end_year_combo, 1, 1)
        
        self.years_group.setLayout(years_layout)
        self.content_layout.addWidget(self.years_group)
        
        # Inicializa valores padr√£o (SEM temporal_unit, apenas data_type)
        self.data_type = "incremental"
        
        # Popula anos baseado no bioma selecionado
        self.populate_years()
        
        # Atualiza interface inicial
        self.update_years_interface()
        self.update_prodes_notes()

    def create_deter_step2_content(self):
        """Cria o conte√∫do espec√≠fico para configura√ß√£o temporal do DETER"""
        
        # Campo 1: Per√≠odo de An√°lise (direto, sem escolha civil/PRODES)
        periodo_group = QGroupBox("1. Per√≠odo de An√°lise")
        periodo_layout = QGridLayout()
        
        # Labels e combos para anos
        self.deter_start_year_label = QLabel("Ano inicial:")
        self.deter_start_year_combo = QComboBox()
        self.deter_start_year_combo.currentTextChanged.connect(self.on_deter_start_year_changed)
        
        self.deter_end_year_label = QLabel("Ano final:")
        self.deter_end_year_combo = QComboBox()
        self.deter_end_year_combo.currentTextChanged.connect(self.on_deter_end_year_changed)
        
        periodo_layout.addWidget(self.deter_start_year_label, 0, 0)
        periodo_layout.addWidget(self.deter_start_year_combo, 0, 1)
        periodo_layout.addWidget(self.deter_end_year_label, 1, 0)
        periodo_layout.addWidget(self.deter_end_year_combo, 1, 1)
        
        periodo_group.setLayout(periodo_layout)
        self.content_layout.addWidget(periodo_group)
        
        # Campo 2: Classes de Alertas DETER
        classes_group = QGroupBox("2. Classes de Alertas DETER")
        classes_layout = QVBoxLayout()
        
        # Container para checkboxes das classes
        self.deter_classes_widget = QWidget()
        self.deter_classes_layout = QVBoxLayout(self.deter_classes_widget)
        self.deter_classes_checkboxes = {}
        
        classes_layout.addWidget(self.deter_classes_widget)
        
        classes_group.setLayout(classes_layout)
        self.content_layout.addWidget(classes_group)
        
        # Inicializa valores padr√£o
        self.deter_selected_classes = []
        
        # Popula anos e classes baseado no bioma selecionado
        self.populate_deter_years()
        self.populate_deter_classes()
        
        # Atualiza interface e notas
        self.update_deter_notes()

    def create_terraclass_step2_content(self):
        """Cria o conte√∫do espec√≠fico para configura√ß√£o temporal do TERRACLASS"""
        
        # Campo 1: Sele√ß√£o de Ano
        year_group = QGroupBox("1. Sele√ß√£o de Ano")
        year_layout = QVBoxLayout()
        
        self.terraclass_year_combo = QComboBox()
        self.terraclass_year_combo.currentTextChanged.connect(self.on_terraclass_year_changed)
        
        year_layout.addWidget(self.terraclass_year_combo)
        year_group.setLayout(year_layout)
        self.content_layout.addWidget(year_group)
        
        # Campo 2: Sele√ß√£o de Estado
        state_group = QGroupBox("2. Sele√ß√£o de Estado")
        state_layout = QVBoxLayout()
        
        self.terraclass_state_combo = QComboBox()
        self.terraclass_state_combo.currentTextChanged.connect(self.on_terraclass_state_changed)
        
        state_layout.addWidget(self.terraclass_state_combo)
        state_group.setLayout(state_layout)
        self.content_layout.addWidget(state_group)
        
        # Campo 3: Sele√ß√£o de Munic√≠pio (opcional)
        municipality_group = QGroupBox("3. Sele√ß√£o de Munic√≠pio (opcional)")
        municipality_layout = QVBoxLayout()
        
        self.terraclass_municipality_combo = QComboBox()
        self.terraclass_municipality_combo.currentTextChanged.connect(self.on_terraclass_municipality_changed)
        
        municipality_layout.addWidget(self.terraclass_municipality_combo)
        municipality_group.setLayout(municipality_layout)
        self.content_layout.addWidget(municipality_group)
        
        # Inicializa valores padr√£o
        self.terraclass_year = None
        self.terraclass_state = None
        self.terraclass_municipality = None
        
        # Popula anos baseado no bioma selecionado
        self.populate_terraclass_years()
        self.populate_terraclass_states()
        
        # Atualiza interface e notas
        self.update_terraclass_notes()

    def on_theme_changed_responsive(self, theme):
        """Callback RESPONSIVO para mudan√ßa de tema"""
        print(f"üîß DEBUG on_theme_changed_responsive: theme='{theme}'")
        self.selected_theme = theme
        print(f"üîß DEBUG on_theme_changed_responsive: self.selected_theme='{self.selected_theme}'")
        
        if theme and theme in self.biome_options:
            # Popula e mostra o combo de bioma
            self.biome_combo.clear()
            self.biome_combo.addItem("")
            self.biome_combo.addItems(self.biome_options[theme])
            self.biome_group.setVisible(True)
            
            # TRATAMENTO ESPECIAL PARA TERRACLASS
            if theme == "TERRACLASS":
                # Para TERRACLASS, esconde completamente as op√ß√µes de corte
                self.cut_group.setVisible(False)
                self.specific_config_widget.setVisible(False)
                
                # Define automaticamente op√ß√£o IBGE (mas escondida)
                self.cut_option = 3
            else:
                # Para PRODES e DETER, comportamento normal
                # ESCONDE as op√ß√µes de corte at√© bioma ser selecionado
                self.cut_group.setVisible(False)
                self.specific_config_widget.setVisible(False)
                
                # Mostra todas as op√ß√µes novamente
                self.radio_no_cut.setVisible(True)
                self.radio_loaded_layer.setVisible(True)
                self.radio_draw.setVisible(True)
            
            # Limpa sele√ß√£o anterior de bioma (interface responsiva)
            self.selected_biome = None
            
            # Atualiza notas
            self.update_comprehensive_notes_responsive()
            
            # Ajusta tamanho para acomodar bioma
            QTimer.singleShot(10, self.adjustSize)
            
        else:
            # Esconde tudo exceto tema quando n√£o h√° tema selecionado
            self.biome_group.setVisible(False)
            self.cut_group.setVisible(False)
            self.specific_config_widget.setVisible(False)
            self.biome_combo.clear()
            
            # Limpa sele√ß√µes
            self.selected_biome = None
            self.cut_option = None
            
            # Mostra todas as op√ß√µes de corte novamente
            self.radio_no_cut.setVisible(True)
            self.radio_loaded_layer.setVisible(True)
            self.radio_draw.setVisible(True)
            
            if not theme:
                self.update_notes("üí° DesagregaBiomasBR √© um plugin que facilita o acesso e processamento de dados dos principais sistemas de monitoramento ambiental brasileiro: üå≤ PRODES (desmatamento), üö® DETER (alertas), üî• QUEIMADAS (√°reas queimadas) e üèûÔ∏è TERRACLASS (uso da terra).")
            else:
                self.update_comprehensive_notes_responsive()
            
            # For√ßa tamanho m√≠nimo
            QTimer.singleShot(10, self.force_resize_minimal)
        
        # Atualiza bot√µes de navega√ß√£o
        self.update_navigation_buttons()
        print(f"üîß DEBUG on_theme_changed_responsive: can_advance = {self.can_advance()}")

    # Mant√©m fun√ß√£o original para compatibilidade
    def on_theme_changed(self, theme):
        """Callback original (compatibilidade) - redireciona para responsivo"""
        self.on_theme_changed_responsive(theme)

    def on_biome_changed_responsive(self, biome):
        """Callback RESPONSIVO para mudan√ßa de bioma"""
        print(f"üîß DEBUG on_biome_changed_responsive: biome='{biome}'")
        print(f"üîß DEBUG on_biome_changed_responsive: self.selected_biome anterior='{self.selected_biome}'")
        
        # Atualiza selected_biome
        if biome and biome.strip():
            self.selected_biome = biome
            print(f"üîß DEBUG on_biome_changed_responsive: self.selected_biome atualizado para='{self.selected_biome}'")
            
            # TRATAMENTO ESPECIAL PARA TERRACLASS
            if self.selected_theme == "TERRACLASS":
                # Para TERRACLASS, automaticamente configura IBGE e mostra configura√ß√µes espec√≠ficas
                self.cut_option = 3  # For√ßa IBGE
                
                # Esconde op√ß√µes de corte (n√£o necess√°rias para TERRACLASS)
                self.cut_group.setVisible(False)
                
                # Limpa e cria configura√ß√µes TERRACLASS na etapa 1
                self.clear_layout(self.specific_config_layout)
                self.create_terraclass_direct_config()
                self.specific_config_widget.setVisible(True)
                
                print(f"üîß DEBUG: TERRACLASS - configura√ß√µes diretas criadas para {biome}")
            else:
                # Para PRODES e DETER, comportamento normal
                # MOSTRA as op√ß√µes de corte quando bioma √© selecionado
                self.cut_group.setVisible(True)
                # Radio "Sem limite" j√° est√° marcado por padr√£o
                self.cut_option = 0  # Sem limite
                
                # Limpa configura√ß√µes espec√≠ficas anteriores
                self.clear_layout(self.specific_config_layout)
                self.specific_config_widget.setVisible(False)
            
            # Atualiza notas
            self.update_comprehensive_notes_responsive()
            
            # Ajusta tamanho para acomodar op√ß√µes de corte
            QTimer.singleShot(10, self.adjustSize)
            
        elif not biome:
            # ESCONDE op√ß√µes de corte quando bioma √© desmarcado
            self.cut_group.setVisible(False)
            self.specific_config_widget.setVisible(False)
            self.selected_biome = None
            self.cut_option = None
            print(f"üîß DEBUG on_biome_changed_responsive: self.selected_biome limpo")
            
            # Atualiza notas
            self.update_comprehensive_notes_responsive()
            
            # Volta ao tamanho menor
            QTimer.singleShot(10, self.adjustSize)
        
        # Atualiza bot√µes de navega√ß√£o
        self.update_navigation_buttons()
        print(f"üîß DEBUG on_biome_changed_responsive: can_advance = {self.can_advance()}")

    # Mant√©m fun√ß√£o original para compatibilidade
    def on_biome_changed(self, biome):
        """Callback original (compatibilidade) - redireciona para responsivo"""
        self.on_biome_changed_responsive(biome)

    def on_cut_option_changed_responsive(self, button):
        """Callback RESPONSIVO para mudan√ßa de op√ß√£o de corte"""
        option_id = self.cut_button_group.id(button)
        self.cut_option = option_id
        print(f"üîß DEBUG on_cut_option_changed_responsive: option_id='{option_id}'")
        
        # Limpa configura√ß√µes espec√≠ficas anteriores
        self.clear_layout(self.specific_config_layout)
        
        if option_id == 0:  # Sem limite de corte
            # ESCONDE configura√ß√µes espec√≠ficas para op√ß√£o "sem limite"
            self.specific_config_widget.setVisible(False)
            print(f"üîß DEBUG: Sem limite de corte - escondendo configura√ß√µes espec√≠ficas")
            
        elif option_id == 1:  # Layer carregado no QGIS
            self.create_loaded_layer_config()
            self.specific_config_widget.setVisible(True)
            print(f"üîß DEBUG: Layer carregado - mostrando configura√ß√µes espec√≠ficas")
            
        elif option_id == 2:  # Desenhar na tela
            self.create_draw_config()
            self.specific_config_widget.setVisible(True)
            print(f"üîß DEBUG: Desenhar na tela - mostrando configura√ß√µes espec√≠ficas")
            
        elif option_id == 3:  # IBGE
            self.create_ibge_config()
            self.specific_config_widget.setVisible(True)
            print(f"üîß DEBUG: IBGE - mostrando configura√ß√µes espec√≠ficas")
        
        # Atualiza notas
        self.update_comprehensive_notes_responsive()
        
        # RESPONSIVIDADE: Ajusta tamanho baseado na op√ß√£o
        if option_id == 0:
            # Para "Sem limite", compacta interface
            QTimer.singleShot(10, self.adjustSize)
        else:
            # Para outras op√ß√µes, permite crescimento
            QTimer.singleShot(10, self.adjustSize)
            # Timer adicional para garantir ajuste ap√≥s carregar configura√ß√µes
            QTimer.singleShot(50, self.force_resize)

    # Mant√©m fun√ß√£o original para compatibilidade
    def on_cut_option_changed(self, button):
        """Callback original (compatibilidade) - redireciona para responsivo"""
        self.on_cut_option_changed_responsive(button)

    def update_comprehensive_notes_responsive(self):
        """Atualiza as notas de forma RESPONSIVA conforme sele√ß√µes"""
        notes_parts = []
        
        # Sempre mostra tema se selecionado
        if self.selected_theme:
            notes_parts.append(f"üìä Tema: {self.selected_theme}")
        
        # Mostra bioma apenas se tema estiver selecionado
        if self.selected_biome and self.selected_theme:
            notes_parts.append(f"üåø Bioma: {self.selected_biome}")
        
        # TRATAMENTO ESPECIAL PARA TERRACLASS
        if self.selected_theme == "TERRACLASS" and self.selected_biome:
            # Para TERRACLASS, sempre mostra "Limites IBGE" e as configura√ß√µes espec√≠ficas
            notes_parts.append("üáßüá∑ Limite: IBGE")
            
            # Informa√ß√µes de ano
            if hasattr(self, 'terraclass_year') and self.terraclass_year:
                notes_parts.append(f"üóìÔ∏è Ano: {self.terraclass_year}")
            
            # Informa√ß√µes de estado
            if hasattr(self, 'terraclass_state') and self.terraclass_state:
                notes_parts.append(f"üèõÔ∏è Estado: {self.terraclass_state}")
            
            # Informa√ß√µes de munic√≠pio
            if hasattr(self, 'terraclass_municipality') and self.terraclass_municipality:
                notes_parts.append(f"üèòÔ∏è Munic√≠pio: {self.terraclass_municipality}")
        
        # Mostra informa√ß√µes de corte apenas se bioma estiver selecionado E N√ÉO FOR TERRACLASS
        elif self.cut_option is not None and self.selected_biome:
            if self.cut_option == 0:
                notes_parts.append("üåç Limite: Todo o bioma (sem corte)")
            elif self.cut_option == 1:
                if self.selected_layer:
                    layer_info = f"üìã Layer: {self.selected_layer.name()}"
                    if self.selected_field:
                        layer_info += f" ‚Üí Campo: {self.selected_field}"
                        if self.selected_element:
                            layer_info += f" ‚Üí Elemento: {self.selected_element}"
                    notes_parts.append(layer_info)
                else:
                    notes_parts.append("üìã Limite: Layer do QGIS (selecione um layer)")
            elif self.cut_option == 2:
                if hasattr(self, 'drawn_rectangle') and self.drawn_rectangle:
                    notes_parts.append(f"üéØ Limite: Ret√¢ngulo desenhado ({self.drawn_rectangle.xMinimum():.3f}, {self.drawn_rectangle.yMinimum():.3f}) - ({self.drawn_rectangle.xMaximum():.3f}, {self.drawn_rectangle.yMaximum():.3f})")
                else:
                    notes_parts.append("üéØ Limite: Desenho na tela (ative a ferramenta)")
            elif self.cut_option == 3:
                # IBGE - informa√ß√µes da sele√ß√£o hier√°rquica
                ibge_info = f"üáßüá∑ IBGE: {self.ibge_shapefile_name}"
                if hasattr(self, 'ibge_state') and self.ibge_state:
                    ibge_info += f" ‚Üí {self.ibge_state}"
                    if hasattr(self, 'ibge_municipality') and self.ibge_municipality:
                        ibge_info += f" ‚Üí {self.ibge_municipality}"
                notes_parts.append(ibge_info)
        
        # Preserva mensagens de debug existentes
        current_text = self.notes_text.toPlainText()
        debug_lines = []
        if current_text:
            lines = current_text.split('\n')
            for line in lines:
                if 'üìç' in line:  # Preserva linhas de debug BBOX
                    debug_lines.append(line)
        
        # Usa o novo sistema de notas
        if notes_parts:
            config_text = " | ".join(notes_parts)
            self.update_notes(config_text, "config")
        else:
            if not self.selected_theme:
                config_text = "üí° DesagregaBiomasBR √© um plugin que facilita o acesso e processamento de dados dos principais sistemas de monitoramento ambiental brasileiro: üå≤ PRODES (desmatamento), üö® DETER (alertas), üî• QUEIMADAS (√°reas queimadas) e üèûÔ∏è TERRACLASS (uso da terra)."
            elif not self.selected_biome:
                config_text = f"üìä Tema: {self.selected_theme} | üéØ Selecione um bioma/regi√£o para continuar"
            else:
                config_text = f"üìä Tema: {self.selected_theme} | üåø Bioma: {self.selected_biome} | üéØ Configure o limite de corte"
            
            self.update_notes(config_text, "config")

    # Mant√©m fun√ß√£o original para compatibilidade
    def update_comprehensive_notes(self):
        """Fun√ß√£o original (compatibilidade) - redireciona para responsiva"""
        self.update_comprehensive_notes_responsive()

    def create_loaded_layer_config(self):
        """Cria configura√ß√µes para layer j√° carregado"""
        print(f"üéØ DEBUG: create_loaded_layer_config INICIADA")
        config_group = QGroupBox("Configura√ß√µes de Layer")
        config_layout = QVBoxLayout()
        
        # Lista de layers carregados
        layer_label = QLabel("Layer:")
        self.layer_combo = QComboBox()
        
        # Popula com layers vectoriais carregados
        layers = QgsProject.instance().mapLayers().values()
        vector_layers = [layer for layer in layers if isinstance(layer, QgsVectorLayer)]
        
        self.layer_combo.addItem("")
        for layer in vector_layers:
            self.layer_combo.addItem(layer.name(), layer)
        
        self.layer_combo.currentIndexChanged.connect(self.on_layer_selected)
        print(f"üîó DEBUG: Sinal layer_combo conectado a on_layer_selected")
        
        config_layout.addWidget(layer_label)
        config_layout.addWidget(self.layer_combo)
        
        # Campo para sele√ß√£o de atributo
        self.field_label = QLabel("Campo (opcional):")
        self.field_combo = QComboBox()
        self.field_combo.currentTextChanged.connect(self.on_field_selected)
        print(f"üîó DEBUG: Sinal field_combo conectado a on_field_selected")
        
        config_layout.addWidget(self.field_label)
        config_layout.addWidget(self.field_combo)
        
        # Campo para sele√ß√£o de elemento
        self.element_label = QLabel("Elemento (opcional):")
        self.element_combo = QComboBox()
        self.element_combo.currentTextChanged.connect(self.on_element_selected)
        print(f"üîó DEBUG: Sinal element_combo conectado a on_element_selected")
        
        config_layout.addWidget(self.element_label)
        config_layout.addWidget(self.element_combo)
        
        config_group.setLayout(config_layout)
        self.specific_config_layout.addWidget(config_group)
        
        # Inicialmente ocultos
        self.field_label.setVisible(False)
        self.field_combo.setVisible(False)
        self.element_label.setVisible(False)
        self.element_combo.setVisible(False)
        
        # CORRE√á√ÉO: Ajusta tamanho imediatamente ap√≥s criar as configura√ß√µes
        self.adjustSize()
        
        # CORRE√á√ÉO MELHORADA: Usa timer para garantir ajuste ap√≥s processamento completo
        QTimer.singleShot(10, self.force_resize)

    def force_resize(self):
        """For√ßa o redimensionamento da janela"""
        self.content_widget.updateGeometry()
        self.updateGeometry()
        self.adjustSize()
        # For√ßa repaint
        self.repaint()

    def force_resize_minimal(self):
        """For√ßa redimensionamento ao tamanho m√≠nimo (para op√ß√£o sem limite)"""
        # Remove qualquer tamanho fixo
        self.setMaximumSize(16777215, 16777215)  # Remove limite m√°ximo
        
        # Define tamanho m√≠nimo e redimensiona
        self.resize(600, 450)
        self.content_widget.adjustSize()
        self.adjustSize()
        
        # For√ßa repaint
        self.repaint()
        
        # Define tamanho m√≠nimo apropriado
        self.setMinimumSize(500, 400)

    def create_draw_config(self):
        """Cria configura√ß√µes para desenho na tela"""
        config_group = QGroupBox("Desenhar Ret√¢ngulo")
        config_layout = QVBoxLayout()
        
        info_label = QLabel("Clique no bot√£o abaixo para ativar a ferramenta de desenho:")
        draw_button = QPushButton("Ativar Desenho")
        draw_button.clicked.connect(self.activate_drawing_tool)
        
        config_layout.addWidget(info_label)
        config_layout.addWidget(draw_button)
        
        config_group.setLayout(config_layout)
        self.specific_config_layout.addWidget(config_group)
        
        # CORRE√á√ÉO: Ajuste de tamanho consistente
        self.adjustSize()
        QTimer.singleShot(10, self.force_resize)

    def create_ibge_config(self):
        """Cria configura√ß√µes para shapefile IBGE"""
        if not self.selected_biome:
            info_label = QLabel("Selecione primeiro um bioma/regi√£o para ver as op√ß√µes IBGE dispon√≠veis.")
            self.specific_config_layout.addWidget(info_label)
            self.adjustSize()
            QTimer.singleShot(10, self.force_resize)
            return
            
        # Carrega o shapefile IBGE se ainda n√£o foi carregado
        if not self.ibge_layer:
            self.load_ibge_shapefile()
            
        if not self.ibge_layer:
            error_label = QLabel("‚ùå Erro ao carregar o shapefile IBGE. Verifique se o arquivo existe na pasta 'shapefile'.")
            self.specific_config_layout.addWidget(error_label)
            self.adjustSize()
            QTimer.singleShot(10, self.force_resize)
            return
            
        config_group = QGroupBox(f"Configura√ß√µes IBGE - {self.ibge_shapefile_name}")
        config_layout = QVBoxLayout()
        
        # Define automaticamente o bioma/regi√£o com base na sele√ß√£o j√° feita
        self.ibge_biome_region = self.selected_biome
        
        # Primeira sele√ß√£o: Estado (filtrado pelo bioma j√° selecionado)
        self.ibge_state_label = QLabel("Estado:")
        self.ibge_state_combo = QComboBox()
        self.populate_states_combo(self.selected_biome)  # Usa o bioma j√° selecionado
        self.ibge_state_combo.currentTextChanged.connect(self.on_ibge_state_changed)
        
        config_layout.addWidget(self.ibge_state_label)
        config_layout.addWidget(self.ibge_state_combo)
        
        # Segunda sele√ß√£o: Munic√≠pio (ser√° populado ap√≥s sele√ß√£o do estado)
        self.ibge_municipality_label = QLabel("Munic√≠pio (opcional):")
        self.ibge_municipality_combo = QComboBox()
        self.ibge_municipality_combo.currentTextChanged.connect(self.on_ibge_municipality_changed)
        
        config_layout.addWidget(self.ibge_municipality_label)
        config_layout.addWidget(self.ibge_municipality_combo)
        
        # Inicialmente oculto at√© sele√ß√£o do estado
        self.ibge_municipality_label.setVisible(False)
        self.ibge_municipality_combo.setVisible(False)
        
        config_group.setLayout(config_layout)
        self.specific_config_layout.addWidget(config_group)
        
        self.adjustSize()
        QTimer.singleShot(10, self.force_resize)

    def create_terraclass_direct_config(self):
        """Cria configura√ß√µes TERRACLASS diretamente na etapa 1 (ano, estado, munic√≠pio)"""
        print(f"üîß DEBUG: create_terraclass_direct_config para bioma {self.selected_biome}")
        
        # Campo: Sele√ß√£o de Ano
        year_group = QGroupBox("Sele√ß√£o de Ano")
        year_layout = QVBoxLayout()
        
        self.terraclass_year_combo = QComboBox()
        self.terraclass_year_combo.currentTextChanged.connect(self.on_terraclass_year_changed)
        
        year_layout.addWidget(self.terraclass_year_combo)
        year_group.setLayout(year_layout)
        self.specific_config_layout.addWidget(year_group)
        
        # Campo: Sele√ß√£o de Estado
        state_group = QGroupBox("Sele√ß√£o de Estado")
        state_layout = QVBoxLayout()
        
        self.terraclass_state_combo = QComboBox()
        self.terraclass_state_combo.currentTextChanged.connect(self.on_terraclass_state_changed)
        
        state_layout.addWidget(self.terraclass_state_combo)
        state_group.setLayout(state_layout)
        self.specific_config_layout.addWidget(state_group)
        
        # Campo: Sele√ß√£o de Munic√≠pio (opcional)
        municipality_group = QGroupBox("Sele√ß√£o de Munic√≠pio (opcional)")
        municipality_layout = QVBoxLayout()
        
        self.terraclass_municipality_combo = QComboBox()
        self.terraclass_municipality_combo.currentTextChanged.connect(self.on_terraclass_municipality_changed)
        
        municipality_layout.addWidget(self.terraclass_municipality_combo)
        municipality_group.setLayout(municipality_layout)
        self.specific_config_layout.addWidget(municipality_group)
        
        # Inicializa valores padr√£o
        self.terraclass_year = None
        self.terraclass_state = None
        self.terraclass_municipality = None
        
        # Popula anos e estados baseado no bioma selecionado
        self.populate_terraclass_years()
        self.populate_terraclass_states()
        
        # Atualiza interface e notas
        self.update_terraclass_notes()
        
        # Ajusta tamanho da janela
        self.adjustSize()
        QTimer.singleShot(10, self.force_resize)

    def on_layer_selected(self, index):
        """Callback para sele√ß√£o de layer"""
        print(f"üö® DEBUG: on_layer_selected CHAMADA com index: {index}")
        if index > 0:
            layer = self.layer_combo.itemData(index)
            self.selected_layer = layer
            
            print(f"üîç DEBUG: LAYER SELECIONADO: '{layer.name() if layer else 'None'}'")
            print(f"üîç DEBUG: Layer tem {layer.featureCount() if layer else 0} fei√ß√µes")
            
            # Testa BBOX imediatamente quando layer √© selecionado (sem filtro)
            if layer:
                print(f"üîç DEBUG: TESTANDO BBOX do layer completo...")
                try:
                    # M√©todo direto: pega extent do layer sem usar get_cut_geometry_bbox 
                    extent = layer.extent()
                    if extent and not extent.isEmpty():
                        # Formata como WFS BBOX
                        bbox_wfs = f"{extent.xMinimum():.6f},{extent.yMinimum():.6f},{extent.xMaximum():.6f},{extent.yMaximum():.6f},EPSG:4674"
                        print(f"üîç DEBUG: BBOX LAYER COMPLETO: {bbox_wfs}")
                        # Adiciona diretamente nas notas
                        current_text = self.notes_text.toPlainText()
                        self.notes_text.setPlainText(current_text + f"\nüìç BBOX Layer Completo: {bbox_wfs}")
                    else:
                        print(f"üîç DEBUG: BBOX LAYER COMPLETO: Extent vazio")
                        current_text = self.notes_text.toPlainText()
                        self.notes_text.setPlainText(current_text + f"\nüìç BBOX Layer Completo: Extent vazio")
                except Exception as e:
                    print(f"üîç DEBUG: ERRO ao extrair BBOX: {e}")
                    current_text = self.notes_text.toPlainText()
                    self.notes_text.setPlainText(current_text + f"\nüìç ERRO ao extrair BBOX: {e}")
            
            # Popula campos
            self.field_combo.clear()
            self.field_combo.addItem("")
            
            if layer:
                for field in layer.fields():
                    self.field_combo.addItem(field.name())
                
                self.field_label.setVisible(True)
                self.field_combo.setVisible(True)
                
                # CORRE√á√ÉO 4: Usar notas completas
                self.update_comprehensive_notes()
                
                # CORRE√á√ÉO 2: Ajustar tamanho
                self.adjustSize()
        else:
            self.field_label.setVisible(False)
            self.field_combo.setVisible(False)
            self.element_label.setVisible(False)
            self.element_combo.setVisible(False)
            self.selected_layer = None
            self.selected_field = None
            self.selected_element = None
            self.update_comprehensive_notes()

    def on_field_selected(self, field_name):
        """Callback para sele√ß√£o de campo"""
        print(f"üö® DEBUG: on_field_selected CHAMADA com field_name: '{field_name}'")
        self.selected_field = field_name
        
        print(f"üîç DEBUG: CAMPO SELECIONADO: '{field_name}'")
        
        if field_name and self.selected_layer:
            # Popula elementos √∫nicos do campo
            self.element_combo.clear()
            self.element_combo.addItem("")
            
            unique_values = self.selected_layer.uniqueValues(self.selected_layer.fields().indexFromName(field_name))
            print(f"üîç DEBUG: Campo '{field_name}' tem {len(unique_values)} valores √∫nicos")
            
            for value in sorted(unique_values):
                if value is not None:
                    self.element_combo.addItem(str(value))
            
            self.element_label.setVisible(True)
            self.element_combo.setVisible(True)
            
            # CORRE√á√ÉO 4: Usar notas completas
            self.update_comprehensive_notes()
            
            # CORRE√á√ÉO 2: Ajustar tamanho
            self.adjustSize()
        else:
            self.element_label.setVisible(False)
            self.element_combo.setVisible(False)
            self.selected_field = None
            self.selected_element = None
            self.update_comprehensive_notes()

    def on_element_selected(self, element):
        """Callback para sele√ß√£o de elemento"""
        print(f"üö® DEBUG: on_element_selected CHAMADA com element: '{element}'")
        self.selected_element = element
        print(f"üîç DEBUG: ELEMENTO SELECIONADO: '{element}'")
        print(f"üîç DEBUG: Campo atual: '{getattr(self, 'selected_field', 'None')}'")
        print(f"üîç DEBUG: Layer atual: '{getattr(self, 'selected_layer', 'None')}'")
        
        # Testa BBOX imediatamente para ver se muda
        if hasattr(self, 'selected_layer') and self.selected_layer and hasattr(self, 'selected_field') and self.selected_field and element:
            print(f"üîç DEBUG: TESTANDO BBOX ap√≥s sele√ß√£o do elemento...")
            
            # Testa filtro direto sem usar get_cut_layer
            try:
                # Cria express√£o de filtro
                expression = f'"{self.selected_field}" = \'{element}\''
                print(f"üîç DEBUG: Express√£o de filtro: {expression}")
                
                # Aplica filtro
                from qgis.core import QgsFeatureRequest
                request = QgsFeatureRequest().setFilterExpression(expression)
                filtered_layer = self.selected_layer.materialize(request)
                
                if filtered_layer and filtered_layer.featureCount() > 0:
                    print(f"üîç DEBUG: Layer filtrado criado com {filtered_layer.featureCount()} fei√ß√µes")
                    current_text = self.notes_text.toPlainText()
                    self.notes_text.setPlainText(current_text + f"\nüìç Layer filtrado: {filtered_layer.featureCount()} fei√ß√µes para '{element}'")
                    
                    # Calcula BBOX do elemento espec√≠fico
                    extent = filtered_layer.extent()
                    if extent and not extent.isEmpty():
                        bbox_wfs = f"{extent.xMinimum():.6f},{extent.yMinimum():.6f},{extent.xMaximum():.6f},{extent.yMaximum():.6f},EPSG:4674"
                        print(f"üîç DEBUG: BBOX ELEMENTO ESPEC√çFICO: {bbox_wfs}")
                        current_text = self.notes_text.toPlainText()
                        self.notes_text.setPlainText(current_text + f"\nüìç BBOX Elemento '{element}': {bbox_wfs}")
                    else:
                        print(f"üîç DEBUG: BBOX ELEMENTO ESPEC√çFICO: Extent vazio")
                        current_text = self.notes_text.toPlainText()
                        self.notes_text.setPlainText(current_text + f"\nüìç BBOX Elemento '{element}': Extent vazio")
                else:
                    print(f"üîç DEBUG: Nenhuma fei√ß√£o encontrada para '{element}'")
                    current_text = self.notes_text.toPlainText()
                    self.notes_text.setPlainText(current_text + f"\nüìç ERRO: Nenhuma fei√ß√£o encontrada para '{element}'")
                    
            except Exception as e:
                print(f"üîç DEBUG: ERRO ao filtrar elemento: {e}")
                current_text = self.notes_text.toPlainText()
                self.notes_text.setPlainText(current_text + f"\nüìç ERRO ao filtrar elemento: {e}")
        elif element:
            print(f"üîç DEBUG: Elemento selecionado mas faltam layer/campo")
            current_text = self.notes_text.toPlainText()
            self.notes_text.setPlainText(current_text + f"\nüìç Elemento '{element}' selecionado (aguardando layer/campo)")
        
        # CORRE√á√ÉO 4: Usar notas completas
        self.update_comprehensive_notes()

    def on_wfs_type_changed(self, wfs_type):
        """Callback para mudan√ßa do tipo WFS - conecta automaticamente"""
        print(f"üîß DEBUG: on_wfs_type_changed chamada com: '{wfs_type}'")
        print(f"üîß DEBUG: selected_biome atual: '{self.selected_biome}'")
        
        if wfs_type:
            print(f"üîß DEBUG: wfs_type v√°lido, chamando connect_wfs...")
            # Conecta automaticamente quando tipo for selecionado
            self.connect_wfs()
        else:
            print(f"üîß DEBUG: wfs_type vazio, limpando campos...")
            # Limpa campos se tipo for deselecionado
            if hasattr(self, 'wfs_field_combo'):
                self.wfs_field_combo.clear()
                self.wfs_field_label.setVisible(False)
                self.wfs_field_combo.setVisible(False)
                self.wfs_element_label.setVisible(False)
                self.wfs_element_combo.setVisible(False)
        
        # Atualizar notas
        self.update_comprehensive_notes()

    # WFS Real direto - sem fallbacks simulados
    def connect_wfs(self):
        """Conecta diretamente ao servi√ßo WFS real"""
        print(f"üîß DEBUG: connect_wfs iniciada")
        
        wfs_type = self.wfs_type_combo.currentText()
        print(f"üîß DEBUG: wfs_type obtido: '{wfs_type}'")
        
        # Mapeia os tipos para as chaves do dicion√°rio  
        type_mapping = {
            "Unidades de Conserva√ß√£o": "conservation_units",
            "Terras Ind√≠genas": "indigenous_area", 
            "Munic√≠pios": "municipalities",
            "Estados": "states"
        }
        
        type_key = type_mapping.get(wfs_type)
        print(f"üîß DEBUG: type_key mapeado: '{type_key}'")
        if not type_key:
            print(f"üîß DEBUG: type_key n√£o encontrado, retornando")
            return
            
        print(f"üîß DEBUG: Verificando se bioma '{self.selected_biome}' existe em wfs_urls[{type_key}]")
        if self.selected_biome not in self.wfs_urls[type_key]:
            print(f"üîß DEBUG: Bioma n√£o encontrado em wfs_urls")
            print(f"üîß DEBUG: Biomas dispon√≠veis: {list(self.wfs_urls[type_key].keys())}")
            self.update_notes(f"‚ùå WFS n√£o dispon√≠vel para {wfs_type} no bioma {self.selected_biome}")
            return
            
        base_url = self.wfs_urls[type_key][self.selected_biome]
        print(f"üîß DEBUG: URL WFS encontrada: {base_url}")
        
        self.update_notes(f"üîÑ Conectando ao WFS: {wfs_type} - {self.selected_biome}...")
        print(f"üîß DEBUG: Chamando create_wfs_layer...")
        
        # ESTRAT√âGIA 1: Tenta fun√ß√£o robusta primeiro
        wfs_layer = self.create_wfs_layer(base_url, type_key)
        
        # ESTRAT√âGIA 2: Se falhou, tenta fun√ß√£o simples
        if not wfs_layer or not wfs_layer.isValid() or wfs_layer.featureCount() == 0:
            print(f"üîß DEBUG: Fun√ß√£o robusta falhou, tentando fun√ß√£o simplificada...")
            wfs_layer = self.create_simple_wfs_layer(base_url, type_key)
        
        if wfs_layer and wfs_layer.isValid() and wfs_layer.featureCount() > 0:
            print(f"üîß DEBUG: WFS conectado com sucesso!")
            # WFS conectado com sucesso
            self.wfs_layer = wfs_layer
            
            # Obt√©m campos reais da camada
            fields = [field.name() for field in wfs_layer.fields()]
            print(f"üîß DEBUG: Campos obtidos: {fields}")
            
            # Popula combo de campos com dados reais
            self.wfs_field_combo.clear()
            self.wfs_field_combo.addItem("")
            self.wfs_field_combo.addItems(fields)
            
            # Conecta sinal para povoar elementos reais
            self.wfs_field_combo.currentTextChanged.connect(self.on_wfs_field_selected_real)
            
            # Mostra campos de configura√ß√£o
            self.wfs_field_label.setVisible(True)
            self.wfs_field_combo.setVisible(True)
            
            self.update_notes(f"‚úÖ WFS conectado: {wfs_layer.featureCount()} fei√ß√µes de {wfs_type}")
            self.update_comprehensive_notes()
            
            # Ajustar tamanho ap√≥s mostrar campos WFS
            self.adjustSize()
            QTimer.singleShot(10, self.force_resize)
            
        else:
            print(f"üîß DEBUG: Falha na conex√£o WFS")
            # Falha na conex√£o WFS
            self.update_notes(f"‚ùå Falha na conex√£o WFS: {wfs_type} - {self.selected_biome}")
            
            # Limpa campos
            if hasattr(self, 'wfs_field_combo'):
                self.wfs_field_combo.clear()
                self.wfs_field_label.setVisible(False)
                self.wfs_field_combo.setVisible(False)
                self.wfs_element_label.setVisible(False)
                self.wfs_element_combo.setVisible(False)

    def create_wfs_layer(self, base_url, type_key):
        """Cria layer WFS com m√∫ltiplas estrat√©gias para m√°xima compatibilidade"""
        
        print(f"üîß DEBUG: Iniciando create_wfs_layer com URL: {base_url}")
        
        try:
            # Extrai namespace e layer name da URL
            url_parts = base_url.split('/geoserver/')[1].split('/ows')[0].split('/')
            if len(url_parts) >= 2:
                namespace = url_parts[0]
                layer_name = url_parts[1]
                full_type_name = f"{namespace}:{layer_name}"
                print(f"üîç TypeName extra√≠do: {full_type_name}")
                print(f"üîó URL base: {base_url}")
            else:
                print(f"‚ùå URL inv√°lida: {base_url}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao extrair typeName: {str(e)}")
            return None
        
        # ESTRAT√âGIA 1: Tenta m√∫ltiplas vers√µes WFS
        wfs_versions = ["1.0.0", "1.1.0", "2.0.0"]
        
        # ESTRAT√âGIA 2: M√∫ltiplos formatos (ordem de prefer√™ncia)
        formats_strategy = [
            ("text/xml; subtype=gml/2.1.2", "GML2"),
            ("text/xml; subtype=gml/3.1.1", "GML3"),
            ("application/gml+xml", "GML"),
            ("text/xml", "XML"),
            ("application/json", "GeoJSON")
        ]
        
        # ESTRAT√âGIA 3: M√∫ltiplas formas de especificar o layer
        layer_strategies = [
            full_type_name,  # namespace:layer (padr√£o)
            layer_name,      # apenas layer name
            namespace + ":" + layer_name.replace("_", ":")  # tentativa alternativa
        ]
        
        attempt_count = 0
        
        for version in wfs_versions:
            for layer_strategy in layer_strategies:
                for output_format, format_name in formats_strategy:
                    attempt_count += 1
                    
                    try:
                        # Monta URL WFS com estrat√©gia atual
                        wfs_url = f"{base_url}?service=WFS&version={version}&request=GetFeature&typeName={layer_strategy}&outputFormat={output_format}&srsName=EPSG:4674"
                        
                        print(f"üåê Tentativa {attempt_count}: {format_name} (v{version}) - {layer_strategy}")
                        print(f"üîó URL: {wfs_url}")
                        
                        # ESTRAT√âGIA 4: Configura√ß√µes diferentes de layer
                        layer_configs = [
                            # Configura√ß√£o 1: WFS direto
                            {
                                'url': wfs_url,
                                'name': f"WFS_{type_key}_{attempt_count}",
                                'provider': "WFS"
                            },
                            # Configura√ß√£o 2: WFS com op√ß√µes
                            {
                                'url': f"url='{wfs_url}' typename='{layer_strategy}' version='{version}'",
                                'name': f"WFS_OPT_{type_key}_{attempt_count}",
                                'provider': "WFS"
                            }
                        ]
                        
                        for config in layer_configs:
                            try:
                                print(f"   üîÑ Testando configura√ß√£o: {config['provider']}")
                                
                                # Cria layer WFS
                                temp_layer = QgsVectorLayer(config['url'], config['name'], config['provider'])
                                
                                # Verifica se layer √© v√°lida
                                if temp_layer.isValid():
                                    feature_count = temp_layer.featureCount()
                                    print(f"   üìä Layer v√°lida com {feature_count} fei√ß√µes")
                                    
                                    if feature_count > 0:
                                        fields = [f.name() for f in temp_layer.fields()]
                                        print(f"   ‚úÖ SUCESSO! {feature_count} fei√ß√µes carregadas")
                                        print(f"   üìã Campos dispon√≠veis: {fields}")
                                        return temp_layer
                                    else:
                                        print(f"   ‚ö†Ô∏è Layer v√°lida mas vazia")
                                else:
                                    error = temp_layer.error().message() if temp_layer.error() else "Erro desconhecido"
                                    print(f"   ‚ùå Layer inv√°lida: {error}")
                                    
                            except Exception as e:
                                print(f"   ‚ùå Erro na configura√ß√£o: {str(e)}")
                                continue
                                
                    except Exception as e:
                        print(f"‚ùå Erro na tentativa {attempt_count}: {str(e)}")
                        continue
        
        print(f"‚ùå Todas as {attempt_count} tentativas falharam para {full_type_name}")
        
        # ESTRAT√âGIA 5: Teste de conectividade b√°sica
        print(f"üîç Testando conectividade b√°sica com {base_url}")
        try:
            test_url = f"{base_url}?service=WFS&version=1.0.0&request=GetCapabilities"
            print(f"üåê Teste GetCapabilities: {test_url}")
            
            # Tenta criar uma layer apenas para testar conectividade
            test_layer = QgsVectorLayer(test_url, "test_connectivity", "WFS")
            if test_layer.isValid():
                print(f"‚úÖ Conectividade OK - servidor WFS responde")
            else:
                print(f"‚ùå Problema de conectividade ou servidor indispon√≠vel")
                
        except Exception as e:
            print(f"‚ùå Erro no teste de conectividade: {str(e)}")
        
        return None

    def on_wfs_field_selected_real(self, field_name):
        """Callback para sele√ß√£o de campo WFS real"""
        print(f"üîß DEBUG: Campo selecionado: '{field_name}'")
        print(f"üîß DEBUG: WFS Layer v√°lida? {hasattr(self, 'wfs_layer') and self.wfs_layer and self.wfs_layer.isValid()}")
        print(f"üîß DEBUG: WFS Layer featureCount: {self.wfs_layer.featureCount() if hasattr(self, 'wfs_layer') and self.wfs_layer else 'N/A'}")
        
        if not field_name:
            print(f"üîß DEBUG: Campo vazio, ocultando elementos")
            self.wfs_element_label.setVisible(False)
            self.wfs_element_combo.setVisible(False)
            self.adjustSize()
            QTimer.singleShot(10, self.force_resize)
            self.update_comprehensive_notes()
            return
            
        # SEMPRE mostra o campo elemento primeiro
        self.wfs_element_label.setVisible(True)
        self.wfs_element_combo.setVisible(True)
        self.wfs_element_combo.clear()
        self.wfs_element_combo.addItem("üîÑ Carregando...")
        
        # For√ßa atualiza√ß√£o visual imediata
        self.wfs_element_label.repaint()
        self.wfs_element_combo.repaint()
        self.adjustSize()
        
        print(f"‚úÖ DEBUG: Campo 'Elemento' MOSTRADO imediatamente")
        
        # Tenta obter valores reais com m√∫ltiplas estrat√©gias
        real_values = self.get_real_field_values(field_name)
        
        # Limpa o combo e popula com dados reais ou padr√£o
        self.wfs_element_combo.clear()
        self.wfs_element_combo.addItem("")  # Op√ß√£o vazia
        
        if real_values:
            print(f"‚úÖ DEBUG: Obtidos {len(real_values)} valores reais: {real_values[:3]}...")
            self.wfs_element_combo.addItems(real_values)
            self.update_notes(f"‚úÖ WFS: {len(real_values)} elementos carregados para {field_name}")
        else:
            print(f"‚ö†Ô∏è DEBUG: Nenhum valor real obtido para {field_name}")
            # Em vez de valores padr√£o, mostra mensagem de erro
            error_messages = ["‚ùå Falha ao carregar dados", "Tente outro campo", "Verifique conex√£o WFS"]
            self.wfs_element_combo.addItems(error_messages)
            self.update_notes(f"‚ùå Falha ao carregar elementos de {field_name} - erro de conex√£o WFS")
        
        # Conecta sinal
        try:
            self.wfs_element_combo.currentTextChanged.disconnect()
        except:
            pass
        self.wfs_element_combo.currentTextChanged.connect(self.on_wfs_element_selected_real)
        
        print(f"üéØ DEBUG: Campo populado com {self.wfs_element_combo.count()-1} op√ß√µes")
        
        # Atualizar notas
        self.update_comprehensive_notes()

    def get_real_field_values(self, field_name):
        """Tenta obter valores REAIS do campo usando m√∫ltiplas estrat√©gias"""
        print(f"üîç DEBUG: === FOR√áANDO LEITURA DE VALORES REAIS PARA '{field_name}' ===")
        
        # NOVA ESTRAT√âGIA 0: Tenta criar layer m√≠nima nova
        print(f"üîÑ DEBUG: ESTRAT√âGIA 0 - Criando layer WFS m√≠nima nova...")
        values = self.create_minimal_wfs_layer(field_name)
        if values:
            print(f"‚úÖ DEBUG: ESTRAT√âGIA 0 SUCESSO! {len(values)} valores REAIS obtidos")
            return values
        
        # ESTRAT√âGIA 1: For√ßa leitura da layer atual ignorando erros
        print(f"üîÑ DEBUG: ESTRAT√âGIA 1 - For√ßando leitura da layer WFS atual...")
        values = self.force_read_current_layer(field_name)
        if values:
            print(f"‚úÖ DEBUG: ESTRAT√âGIA 1 SUCESSO! {len(values)} valores REAIS obtidos")
            return values
        
        # ESTRAT√âGIA 2: Recarrega layer com par√¢metros diferentes
        print(f"üîÑ DEBUG: ESTRAT√âGIA 2 - Recarregando WFS com novos par√¢metros...")
        values = self.reload_wfs_with_different_params(field_name)
        if values:
            print(f"‚úÖ DEBUG: ESTRAT√âGIA 2 SUCESSO! {len(values)} valores REAIS obtidos")
            return values
            
        # ESTRAT√âGIA 3: For√ßa download direto via HTTP
        print(f"üîÑ DEBUG: ESTRAT√âGIA 3 - Download direto via HTTP...")
        values = self.force_http_download(field_name)
        if values:
            print(f"‚úÖ DEBUG: ESTRAT√âGIA 3 SUCESSO! {len(values)} valores REAIS obtidos")
            return values
        
        print(f"‚ùå DEBUG: === FALHA AO OBTER VALORES REAIS ===")
        return []

    def create_minimal_wfs_layer(self, field_name):
        """Cria uma layer WFS m√≠nima nova apenas para extrair valores do campo"""
        try:
            print(f"üîß DEBUG: Criando layer WFS m√≠nima para campo '{field_name}'...")
            
            wfs_type = self.wfs_type_combo.currentText()
            type_mapping = {
                "Unidades de Conserva√ß√£o": "conservation_units",
                "Terras Ind√≠genas": "indigenous_area", 
                "Munic√≠pios": "municipalities",
                "Estados": "states"
            }
            
            type_key = type_mapping.get(wfs_type)
            if not type_key or self.selected_biome not in self.wfs_urls[type_key]:
                print(f"‚ùå DEBUG: URL n√£o dispon√≠vel para {wfs_type} - {self.selected_biome}")
                return []
                
            base_url = self.wfs_urls[type_key][self.selected_biome]
            
            # Extrai namespace e layer name
            try:
                url_parts = base_url.split('/geoserver/')[1].split('/ows')[0].split('/')
                namespace = url_parts[0]
                layer_name = url_parts[1]
                print(f"üîß DEBUG: Namespace: {namespace}, Layer: {layer_name}")
            except:
                print(f"‚ùå DEBUG: Erro ao extrair namespace/layer da URL")
                return []
            
            # Estrat√©gia super m√≠nima - apenas 1 fei√ß√£o, apenas o campo desejado
            minimal_urls = [
                # Tenta com propertyName para pegar apenas o campo desejado
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}&propertyName={field_name}&srsName=EPSG:4674",
                # Tenta formato JSON que pode ser mais tolerante
                f"{base_url}?service=WFS&version=1.1.0&request=GetFeature&typeName={namespace}:{layer_name}&outputFormat=application/json&propertyName={field_name}&srsName=EPSG:4674",
                # Tenta com srsName especificado
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}&srsName=EPSG:4674"
            ]
            
            unique_values = set()
            
            for i, test_url in enumerate(minimal_urls, 1):
                try:
                    print(f"üåê DEBUG: Tentativa m√≠nima {i}/3...")
                    
                    # Cria layer tempor√°ria
                    temp_layer = QgsVectorLayer(test_url, f"minimal_{i}", "WFS")
                    
                    # Tenta capturar dados imediatamente, mesmo antes de valida√ß√£o completa
                    if temp_layer:
                        # Busca o campo mesmo que a layer n√£o seja "v√°lida"
                        fields = temp_layer.fields()
                        field_names = [f.name() for f in fields]
                        print(f"üîß DEBUG: Campos encontrados: {field_names}")
                        
                        # Tenta encontrar o campo
                        field_idx = -1
                        for idx, f in enumerate(fields):
                            if f.name() == field_name or field_name.lower() in f.name().lower():
                                field_idx = idx
                                actual_field_name = f.name()
                                print(f"‚úÖ DEBUG: Campo encontrado: {actual_field_name} (√≠ndice {field_idx})")
                                break
                        
                        if field_idx >= 0:
                            # Tenta obter features mesmo com erros
                            try:
                                feature_count = 0
                                features = temp_layer.getFeatures()
                                
                                for feat in features:
                                    try:
                                        # M√∫ltiplas tentativas de acesso
                                        val = None
                                        try:
                                            val = feat.attribute(actual_field_name)
                                        except:
                                            try:
                                                val = feat[field_idx]
                                            except:
                                                try:
                                                    attrs = feat.attributes()
                                                    if len(attrs) > field_idx:
                                                        val = attrs[field_idx]
                                                except:
                                                    pass
                                        
                                        if val is not None and str(val).strip():
                                            unique_values.add(str(val).strip())
                                            feature_count += 1
                                            
                                    except Exception as e:
                                        continue
                                
                                if unique_values:
                                    print(f"‚úÖ DEBUG: {len(unique_values)} valores extra√≠dos na tentativa {i}")
                                    
                            except Exception as e:
                                print(f"‚ö†Ô∏è DEBUG: Erro ao iterar features: {str(e)}")
                    
                    # Deleta a layer tempor√°ria
                    del temp_layer
                    
                except Exception as e:
                    print(f"‚ùå DEBUG: Erro na tentativa m√≠nima {i}: {str(e)}")
                    continue
            
            if unique_values:
                result = sorted(list(unique_values))
                print(f"‚úÖ DEBUG: Total de {len(result)} valores √∫nicos extra√≠dos")
                return result
            else:
                print(f"‚ùå DEBUG: Nenhum valor extra√≠do na estrat√©gia m√≠nima")
                return []
                
        except Exception as e:
            print(f"‚ùå DEBUG: Erro geral na estrat√©gia m√≠nima: {str(e)}")
            return []

    def force_read_current_layer(self, field_name):
        """For√ßa leitura da layer atual ignorando warnings e erros"""
        try:
            if not hasattr(self, 'wfs_layer') or not self.wfs_layer:
                print(f"‚ö†Ô∏è DEBUG: Layer WFS n√£o existe")
                return []
            
            # Ignora valida√ß√£o e for√ßa leitura
            print(f"üîß DEBUG: For√ßando leitura mesmo com erros...")
            
            field_index = -1
            # Busca o campo de forma mais robusta
            for i, field in enumerate(self.wfs_layer.fields()):
                if field.name() == field_name:
                    field_index = i
                    break
                    
            if field_index < 0:
                print(f"‚ö†Ô∏è DEBUG: Campo n√£o encontrado, tentando por nome similar...")
                # Tenta buscar por nome similar
                for i, field in enumerate(self.wfs_layer.fields()):
                    if field_name.lower() in field.name().lower():
                        field_index = i
                        field_name = field.name()
                        print(f"‚úÖ DEBUG: Campo similar encontrado: {field_name}")
                        break
                        
            if field_index < 0:
                return []
            
            unique_values = set()
            error_count = 0
            success_count = 0
            
            # For√ßa itera√ß√£o com timeout e tratamento de erros
            print(f"üîß DEBUG: Tentando ler fei√ß√µes (ignorando erros)...")
            
            # Tenta diferentes formas de acessar as fei√ß√µes
            try:
                # M√©todo 1: getFeatures direto
                features = self.wfs_layer.getFeatures()
                for i, feature in enumerate(features):
                    try:
                        # Tenta v√°rias formas de acessar o valor
                        value = None
                        try:
                            value = feature.attribute(field_name)
                        except:
                            try:
                                value = feature[field_index]
                            except:
                                try:
                                    value = feature.attributes()[field_index]
                                except:
                                    pass
                                    
                        if value is not None and str(value).strip():
                            unique_values.add(str(value).strip())
                            success_count += 1
                            if success_count % 10 == 0:
                                print(f"   ‚úÖ {success_count} valores lidos...")
                    except Exception as e:
                        error_count += 1
                        if error_count <= 3:
                            print(f"   ‚ö†Ô∏è Erro na fei√ß√£o {i}: {str(e)}")
                        continue
                        
            except Exception as e:
                print(f"‚ö†Ô∏è DEBUG: Erro no m√©todo 1: {str(e)}")
                
                # M√©todo 2: Tenta com QgsFeatureRequest
                try:
                    print(f"üîß DEBUG: Tentando m√©todo alternativo...")
                    request = QgsFeatureRequest()
                    request.setFlags(QgsFeatureRequest.NoGeometry)
                    request.setSubsetOfAttributes([field_index])
                    
                    features = self.wfs_layer.getFeatures(request)
                    for feature in features:
                        try:
                            value = feature[field_index]
                            if value is not None and str(value).strip():
                                unique_values.add(str(value).strip())
                        except:
                            continue
                            
                except Exception as e2:
                    print(f"‚ö†Ô∏è DEBUG: Erro no m√©todo 2: {str(e2)}")
            
            if unique_values:
                result = sorted(list(unique_values))
                print(f"‚úÖ DEBUG: {len(result)} valores √∫nicos extra√≠dos com {error_count} erros ignorados")
                return result
            else:
                print(f"‚ùå DEBUG: Nenhum valor extra√≠do ap√≥s {error_count} erros")
                return []
                
        except Exception as e:
            print(f"‚ùå DEBUG: Erro geral for√ßando leitura: {str(e)}")
            return []

    def reload_wfs_with_different_params(self, field_name):
        """Recarrega WFS com par√¢metros diferentes para contornar erro XML"""
        try:
            print(f"üîß DEBUG: Tentando recarregar WFS com par√¢metros alternativos...")
            
            wfs_type = self.wfs_type_combo.currentText()
            type_mapping = {
                "Unidades de Conserva√ß√£o": "conservation_units",
                "Terras Ind√≠genas": "indigenous_area", 
                "Munic√≠pios": "municipalities",
                "Estados": "states"
            }
            
            type_key = type_mapping.get(wfs_type)
            if not type_key or self.selected_biome not in self.wfs_urls[type_key]:
                return []
                
            base_url = self.wfs_urls[type_key][self.selected_biome]
            
            # Extrai namespace e layer name
            url_parts = base_url.split('/geoserver/')[1].split('/ows')[0].split('/')
            namespace = url_parts[0]
            layer_name = url_parts[1]
            
            # Tenta diferentes configura√ß√µes de URL
            test_urls = [
                # JSON com diferentes vers√µes
                f"{base_url}?service=WFS&version=2.0.0&request=GetFeature&typeName={namespace}:{layer_name}&outputFormat=application/json&propertyName={field_name}",
                f"{base_url}?service=WFS&version=1.1.0&request=GetFeature&typeName={namespace}:{layer_name}&outputFormat=json&propertyName={field_name}",
                # CSV format (mais simples de parsear)
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}&outputFormat=csv",
                # GML com limite pequeno
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}"
            ]
            
            unique_values = set()
            
            for i, test_url in enumerate(test_urls, 1):
                print(f"üåê DEBUG: Tentativa {i}/{len(test_urls)}: {test_url[:100]}...")
                
                try:
                    # Cria layer tempor√°ria
                    temp_layer = QgsVectorLayer(test_url, f"temp_reload_{i}", "WFS")
                    
                    # Aguarda um momento para carregamento
                    QgsApplication.processEvents()
                    
                    if temp_layer.featureCount() > 0:
                        print(f"‚úÖ DEBUG: Layer carregada com {temp_layer.featureCount()} fei√ß√µes")
                        
                        # Busca o campo
                        field_index = -1
                        for idx, field in enumerate(temp_layer.fields()):
                            if field.name() == field_name or field_name.lower() in field.name().lower():
                                field_index = idx
                                break
                                
                        if field_index >= 0:
                            unique_values = set()
                            for feature in temp_layer.getFeatures():
                                try:
                                    value = feature[field_index]
                                    if value is not None and str(value).strip():
                                        unique_values.add(str(value).strip())
                                except:
                                    continue
                                    
                            if unique_values:
                                result = sorted(list(unique_values))
                                print(f"‚úÖ DEBUG: {len(result)} valores extra√≠dos via reload")
                                return result
                                
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG: Tentativa {i} falhou: {str(e)}")
                    continue
                    
            return []
            
        except Exception as e:
            print(f"‚ùå DEBUG: Erro no reload: {str(e)}")
            return []

    def force_http_download(self, field_name):
        """For√ßa download direto via HTTP e processa resposta manualmente"""
        try:
            print(f"üîß DEBUG: Tentando download HTTP direto...")
            
            from qgis.PyQt.QtCore import QUrl, QEventLoop
            from qgis.PyQt.QtNetwork import QNetworkRequest, QNetworkReply
            
            wfs_type = self.wfs_type_combo.currentText()
            type_mapping = {
                "Unidades de Conserva√ß√£o": "conservation_units",
                "Terras Ind√≠genas": "indigenous_area", 
                "Munic√≠pios": "municipalities",
                "Estados": "states"
            }
            
            type_key = type_mapping.get(wfs_type)
            if not type_key or self.selected_biome not in self.wfs_urls[type_key]:
                return []
                
            base_url = self.wfs_urls[type_key][self.selected_biome]
            
            # Extrai namespace e layer
            try:
                url_parts = base_url.split('/geoserver/')[1].split('/ows')[0].split('/')
                namespace = url_parts[0]
                layer_name = url_parts[1]
            except:
                print(f"‚ùå DEBUG: Erro ao extrair namespace/layer")
                return []
            
            # M√∫ltiplas URLs para testar
            test_urls = [
                # GetCapabilities primeiro para verificar formatos dispon√≠veis
                f"{base_url}?service=WFS&request=GetCapabilities",
                # Tenta pegar apenas 1 feature em diferentes formatos
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}&srsName=EPSG:4674",
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}&outputFormat=GML2&srsName=EPSG:4674",
                f"{base_url}?service=WFS&version=1.1.0&request=GetFeature&typeName={namespace}:{layer_name}&outputFormat=text/xml&srsName=EPSG:4674",
                # Tenta JSON explicitamente
                f"{base_url}?service=WFS&version=2.0.0&request=GetFeature&typeName={namespace}:{layer_name}&outputFormat=application/json&srsName=EPSG:4674",
                # Tenta GeoJSON
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}&outputFormat=json&srsName=EPSG:4674"
            ]
            
            unique_values = set()
            
            for i, test_url in enumerate(test_urls):
                try:
                    print(f"üåê DEBUG: Tentativa HTTP {i+1}/{len(test_urls)}: {test_url[:80]}...")
                    
                    # Cria request
                    request = QNetworkRequest(QUrl(test_url))
                    request.setRawHeader(b"User-Agent", b"QGIS")
                    reply = self.network_manager.get(request)
                    
                    # Aguarda resposta
                    loop = QEventLoop()
                    reply.finished.connect(loop.quit)
                    loop.exec_()
                    
                    if reply.error() == QNetworkReply.NoError:
                        # L√™ resposta
                        data = reply.readAll()
                        
                        # Tenta decodificar com diferentes encodings
                        text = ""
                        for encoding in ['utf-8', 'latin-1', 'iso-8859-1', 'windows-1252']:
                            try:
                                text = data.data().decode(encoding, errors='ignore')
                                break
                            except:
                                continue
                        
                        print(f"‚úÖ DEBUG: {len(text)} bytes baixados")
                        
                        # Mostra primeiros caracteres para debug
                        print(f"üîç DEBUG: Primeiros 200 caracteres: {text[:200]}")
                        
                        # Se for GetCapabilities, apenas mostra formatos dispon√≠veis
                        if "GetCapabilities" in test_url:
                            import re
                            formats = re.findall(r'<Format>([^<]+)</Format>', text)
                            if formats:
                                print(f"üìã DEBUG: Formatos WFS dispon√≠veis: {formats}")
                            continue
                        
                        # Procura valores do campo no texto
                        if field_name and len(text) > 0:
                            import re
                            
                            # Lista expandida de padr√µes para buscar
                            patterns = [
                                # XML/GML patterns
                                f'<[^:>]*:{field_name}>([^<]+)<',  # namespace:field
                                f'<{field_name}>([^<]+)</{field_name}>',  # field direto
                                f'<[^>]*{field_name}[^>]*>([^<]+)<',  # field em qualquer tag
                                f'{field_name}="([^"]+)"',  # atributo
                                # JSON patterns
                                f'"{field_name}"\\s*:\\s*"([^"]+)"',  # JSON string
                                f'"{field_name}"\\s*:\\s*([^,\\]\\}}]+)',  # JSON any value
                                f"'{field_name}'\\s*:\\s*'([^']+)'",  # JSON single quotes
                                # CSV/texto patterns
                                f'{field_name}[=:]\\s*([^,;\\n]+)',  # key=value ou key:value
                                # Busca mais gen√©rica
                                f'\\b{field_name}\\b[^>]*>([^<]+)',  # palavra seguida de valor
                            ]
                            
                            # Tenta tamb√©m varia√ß√µes do nome do campo
                            field_variations = [
                                field_name,
                                field_name.lower(),
                                field_name.upper(),
                                field_name.replace('_', ''),
                                field_name.replace('_', '-')
                            ]
                            
                            for field_var in field_variations:
                                for pattern in patterns:
                                    try:
                                        actual_pattern = pattern.replace(field_name, field_var)
                                        matches = re.findall(actual_pattern, text, re.IGNORECASE | re.MULTILINE)
                                        
                                        for match in matches:
                                            if match and str(match).strip() and len(str(match).strip()) > 0:
                                                value = str(match).strip()
                                                # Limpa valores comuns de XML
                                                value = value.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>')
                                                if value and value not in ['null', 'NULL', 'None', '']:
                                                    unique_values.add(value)
                                                    if len(unique_values) <= 5:  # Mostra primeiros valores
                                                        print(f"   ‚úÖ Valor encontrado: '{value}'")
                                    except Exception as re_error:
                                        continue
                            
                            print(f"üîß DEBUG: {len(unique_values)} valores √∫nicos encontrados at√© agora")
                    else:
                        error_string = reply.errorString()
                        print(f"‚ùå DEBUG: Erro HTTP: {error_string}")
                        
                        # Mesmo com erro, tenta ler conte√∫do
                        data = reply.readAll()
                        if data.size() > 0:
                            error_text = data.data().decode('utf-8', errors='ignore')
                            print(f"üîç DEBUG: Resposta de erro: {error_text[:200]}")
                    
                    reply.deleteLater()
                    
                except Exception as e:
                    print(f"‚ùå DEBUG: Erro na tentativa HTTP {i+1}: {str(e)}")
                    continue
            
            if unique_values:
                result = sorted(list(unique_values))
                print(f"‚úÖ DEBUG: Total de {len(result)} valores √∫nicos extra√≠dos via HTTP")
                print(f"üìã DEBUG: Primeiros valores: {result[:5]}")
                return result
            else:
                print(f"‚ùå DEBUG: Nenhum valor extra√≠do via HTTP")
                
                # √öltima tentativa desesperada - tenta acessar diretamente o GeoServer REST API
                print(f"üîß DEBUG: Tentando GeoServer REST API como √∫ltima op√ß√£o...")
                rest_url = base_url.replace('/ows', f'/wfs?service=WFS&version=1.0.0&request=DescribeFeatureType&typeName={namespace}:{layer_name}')
                print(f"üåê DEBUG: REST URL: {rest_url[:80]}...")
                
                try:
                    request = QNetworkRequest(QUrl(rest_url))
                    reply = self.network_manager.get(request)
                    loop = QEventLoop()
                    reply.finished.connect(loop.quit)
                    loop.exec_()
                    
                    if reply.error() == QNetworkReply.NoError:
                        data = reply.readAll().data().decode('utf-8', errors='ignore')
                        print(f"üìã DEBUG: DescribeFeatureType response: {data[:300]}")
                    
                    reply.deleteLater()
                except:
                    pass
                
            return []
            
        except Exception as e:
            print(f"‚ùå DEBUG: Erro geral no download HTTP: {str(e)}")
            import traceback
            traceback.print_exc()
            return []

    def get_known_values_for_wfs_type(self, field_name):
        """REMOVIDO - N√£o usar valores fict√≠cios"""
        return []

    def get_default_options_for_field(self, field_name):
        """Retorna mensagem informativa em vez de valores fict√≠cios"""
        return ["Erro ao carregar dados do WFS", "Verifique a conex√£o", "Tente recarregar"]

    def on_wfs_element_selected_real(self, element):
        """Callback para sele√ß√£o de elemento WFS real"""
        print(f"üîß DEBUG: on_wfs_element_selected_real chamada com elemento: '{element}'")
        
        self.wfs_element = element
        
        if element:
            print(f"‚úÖ DEBUG: Elemento selecionado: '{element}'")
        else:
            print(f"üîß DEBUG: Elemento vazio/desmarcado")
            
        self.update_comprehensive_notes()

    def get_cut_layer(self):
        """Retorna a layer de corte baseada na op√ß√£o selecionada"""
        print(f"üîß DEBUG get_cut_layer: Iniciando...")
        print(f"üîß DEBUG get_cut_layer: cut_option = {getattr(self, 'cut_option', 'UNDEFINED')}")
        
        if not hasattr(self, 'cut_option'):
            print(f"‚ùå DEBUG get_cut_layer: cut_option n√£o existe!")
            return None
            
        if self.cut_option == 0:
            # Sem limite de corte
            print(f"üîß DEBUG get_cut_layer: cut_option=0 (sem corte)")
            return None
            
        elif self.cut_option == 1:
            # Layer carregado no QGIS
            print(f"üîß DEBUG get_cut_layer: cut_option=1 (layer carregado)")
            print(f"üîß DEBUG get_cut_layer: selected_layer = {getattr(self, 'selected_layer', 'UNDEFINED')}")
            print(f"üîß DEBUG get_cut_layer: selected_field = {getattr(self, 'selected_field', 'UNDEFINED')}")
            print(f"üîß DEBUG get_cut_layer: selected_element = {getattr(self, 'selected_element', 'UNDEFINED')}")
            
            if self.selected_layer:
                if self.selected_field and self.selected_element:
                    # Cria layer filtrada
                    try:
                        print(f"üîß DEBUG get_cut_layer: Tentando criar layer filtrada...")
                        expression = f'"{self.selected_field}" = \'{self.selected_element}\''
                        print(f"üîß DEBUG get_cut_layer: Expression = {expression}")
                        
                        request = QgsFeatureRequest().setFilterExpression(expression)
                        filtered_layer = self.selected_layer.materialize(request)
                        
                        if filtered_layer and filtered_layer.isValid():
                            feature_count = filtered_layer.featureCount()
                            print(f"‚úÖ DEBUG get_cut_layer: Layer filtrada criada com {feature_count} fei√ß√µes")
                            
                            if feature_count > 0:
                                filtered_layer.setName(f"{self.selected_layer.name()}_{self.selected_field}_{self.selected_element}")
                                return filtered_layer
                            else:
                                print(f"‚ö†Ô∏è DEBUG get_cut_layer: Layer filtrada vazia - usando layer original")
                                return self.selected_layer
                        else:
                            print(f"‚ùå DEBUG get_cut_layer: Falha ao criar layer filtrada - usando layer original")
                            return self.selected_layer
                            
                    except Exception as e:
                        print(f"‚ùå DEBUG get_cut_layer: Erro ao filtrar: {e}")
                        print(f"üîß DEBUG get_cut_layer: Retornando layer original")
                        return self.selected_layer
                else:
                    print(f"üîß DEBUG get_cut_layer: Sem filtro - retornando layer original")
                    return self.selected_layer
            else:
                print(f"‚ùå DEBUG get_cut_layer: selected_layer √© None!")
                return None
            
        elif self.cut_option == 2:
            # Desenho na tela
            print(f"üîß DEBUG get_cut_layer: cut_option=2 (desenho)")
            print(f"üîß DEBUG get_cut_layer: drawn_rectangle = {getattr(self, 'drawn_rectangle', 'UNDEFINED')}")
            
            if hasattr(self, 'drawn_rectangle') and self.drawn_rectangle:
                try:
                    print(f"üîß DEBUG get_cut_layer: Criando layer de ret√¢ngulo...")
                    # Cria layer de mem√≥ria com o ret√¢ngulo
                    rect_layer = QgsVectorLayer("Polygon?crs=EPSG:4674", "RetanguloDesenhado", "memory")
                    provider = rect_layer.dataProvider()
                    
                    # Cria fei√ß√£o com geometria do ret√¢ngulo
                    rect_feature = QgsFeature()
                    rect_geometry = QgsGeometry.fromRect(self.drawn_rectangle)
                    rect_feature.setGeometry(rect_geometry)
                    
                    # Adiciona fei√ß√£o
                    provider.addFeature(rect_feature)
                    rect_layer.updateExtents()
                    
                    print(f"‚úÖ DEBUG get_cut_layer: Layer de ret√¢ngulo criada")
                    return rect_layer
                except Exception as e:
                    print(f"‚ùå DEBUG get_cut_layer: Erro ao criar ret√¢ngulo: {e}")
                    return None
            else:
                print(f"‚ùå DEBUG get_cut_layer: drawn_rectangle n√£o existe ou √© None!")
                return None
            
        elif self.cut_option == 3:
            # IBGE
            print(f"üîß DEBUG get_cut_layer: cut_option=3 (IBGE)")
            try:
                ibge_layer = self.get_ibge_cut_layer()
                if ibge_layer:
                    print(f"‚úÖ DEBUG get_cut_layer: Layer IBGE obtida: {ibge_layer.featureCount()} fei√ß√µes")
                else:
                    print(f"‚ùå DEBUG get_cut_layer: get_ibge_cut_layer retornou None")
                return ibge_layer
            except Exception as e:
                print(f"‚ùå DEBUG get_cut_layer: Erro ao obter layer IBGE: {e}")
                return None
        
        print(f"‚ùå DEBUG get_cut_layer: cut_option inv√°lido: {self.cut_option}")
        return None

    def get_wfs_cut_layer(self):
        """Retorna a layer de corte WFS configurada"""
        if not hasattr(self, 'wfs_layer') or not self.wfs_layer or not self.wfs_layer.isValid():
            return None
            
        # Se n√£o h√° filtro por campo/elemento, retorna a layer completa
        if not hasattr(self, 'wfs_field_combo') or not self.wfs_field_combo.currentText():
            # Cria uma c√≥pia da layer para n√£o afetar a original
            temp_layer = self.wfs_layer.clone()
            temp_layer.setName(f"WFS_{self.wfs_type_combo.currentText()}")
            return temp_layer
            
        # Se h√° filtro, cria layer filtrada
        field_name = self.wfs_field_combo.currentText()
        element_value = self.wfs_element_combo.currentText() if hasattr(self, 'wfs_element_combo') else None
        
        if element_value:
            try:
                # Cria express√£o de filtro
                expression = f'"{field_name}" = \'{element_value}\''
                
                # Cria layer filtrada em mem√≥ria
                request = QgsFeatureRequest().setFilterExpression(expression)
                filtered_layer = self.wfs_layer.materialize(request)
                filtered_layer.setName(f"WFS_Filtrado_{field_name}_{element_value}")
                
                return filtered_layer
                
            except Exception as e:
                # Em caso de erro, retorna layer original
                temp_layer = self.wfs_layer.clone()
                temp_layer.setName(f"WFS_{self.wfs_type_combo.currentText()}_ErroFiltro")
                return temp_layer
        
        temp_layer = self.wfs_layer.clone()
        temp_layer.setName(f"WFS_{self.wfs_type_combo.currentText()}")
        return temp_layer

    def activate_drawing_tool(self):
        """Ativa a ferramenta de desenho"""
        try:
            from qgis.utils import iface
            canvas = iface.mapCanvas()
            
            self.draw_tool = DrawRectangleTool(canvas)
            self.draw_tool.rectangleDrawn.connect(self.on_rectangle_drawn)
            
            canvas.setMapTool(self.draw_tool)
            self.hide()  # Esconde a janela temporariamente
            
            self.update_notes("üéØ Clique e arraste no mapa para desenhar um ret√¢ngulo")
            
        except Exception as e:
            self.update_notes(f"‚ùå Erro ao ativar ferramenta de desenho: {str(e)}")

    def on_rectangle_drawn(self, rectangle):
        """Callback para ret√¢ngulo desenhado"""
        self.drawn_rectangle = rectangle
        
        # CORRE√á√ÉO 4: Usar notas completas
        self.update_comprehensive_notes()
        
        # Restaura a ferramenta anterior e mostra a janela
        try:
            from qgis.utils import iface
            canvas = iface.mapCanvas()
            canvas.unsetMapTool(self.draw_tool)
        except:
            pass
            
        self.show()

    def update_notes(self, message, note_type="status"):
        """
        Atualiza o quadro de notas com sistema inteligente
        
        Args:
            message: Mensagem a ser exibida
            note_type: 'config' (linha fixa), 'status' (din√¢mico), 'final' (resultado)
        """
        if note_type == "config":
            # Linha de configura√ß√£o fixa - substitui ou define a primeira linha
            self.config_note = message
            self._update_notes_display()
        elif note_type == "status":
            # Status din√¢mico - sobrescreve linha de status
            self.status_note = message
            self._update_notes_display()
        elif note_type == "final":
            # Resultado final - adiciona ao final
            self.final_note = message
            self._update_notes_display()
        else:
            # Compatibilidade - comportamento antigo para casos n√£o especificados
            current_text = self.notes_text.toPlainText()
            if current_text:
                self.notes_text.setPlainText(current_text + "\n" + message)
            else:
                self.notes_text.setPlainText(message)
    
    def _update_notes_display(self):
        """Atualiza a exibi√ß√£o das notas com sistema de partes"""
        parts = []
        
        # Linha de configura√ß√£o (sempre no topo)
        if hasattr(self, 'config_note') and self.config_note:
            parts.append(self.config_note)
        
        # Linha de status (din√¢mica)
        if hasattr(self, 'status_note') and self.status_note:
            parts.append(self.status_note)
        
        # Resultado final (se existir)
        if hasattr(self, 'final_note') and self.final_note:
            parts.append(self.final_note)
        
        # Atualiza display
        if parts:
            self.notes_text.setPlainText("\n".join(parts))
        else:
            self.notes_text.clear()
    
    def clear_notes(self):
        """Limpa todas as notas"""
        self.config_note = ""
        self.status_note = ""
        self.final_note = ""
        self.notes_text.clear()

    def update_navigation_buttons(self):
        """Atualiza o estado dos bot√µes de navega√ß√£o"""
        can_advance = self.can_advance()
        
        print(f"üîß DEBUG update_navigation_buttons: current_step={self.current_step}")
        print(f"üîß DEBUG update_navigation_buttons: can_advance={can_advance}")
        print(f"üîß DEBUG update_navigation_buttons: max_steps={self.max_steps}")
        
        # CORRE√á√ÉO CR√çTICA: Garantir que can_advance seja sempre um boolean
        if can_advance is None:
            print("‚ö†Ô∏è WARNING: can_advance retornou None! Definindo como False")
            can_advance = False
        elif isinstance(can_advance, list):
            print(f"‚ö†Ô∏è WARNING: can_advance retornou uma lista ({can_advance})! Convertendo para boolean")
            can_advance = bool(can_advance and len(can_advance) > 0)
        elif not isinstance(can_advance, bool):
            print(f"‚ö†Ô∏è WARNING: can_advance retornou tipo inv√°lido ({type(can_advance)}: {can_advance})! Convertendo para boolean")
            can_advance = bool(can_advance)
        
        self.btn_back.setEnabled(self.current_step > 1)
        self.btn_next.setEnabled(self.current_step < self.max_steps and can_advance)
        
        # NOVO: L√≥gica para etapa 3 (processamento)
        if self.current_step == self.max_steps:
            # Etapa 3: Esconde "Finalizar" e "Avan√ßar", mostra processamento
            self.btn_finish.setVisible(False)
            self.btn_next.setVisible(False)
            
            # L√≥gica de bot√µes de processamento baseada no estado do download
            if hasattr(self, 'btn_process') and hasattr(self, 'btn_abort'):
                if self.download_in_progress:
                    # Durante download: esconde processar, mostra abortar
                    self.btn_process.setVisible(False)
                    self.btn_abort.setVisible(True)
                    self.btn_abort.setEnabled(True)
                else:
                    # Fora do download: mostra processar, esconde abortar
                    self.btn_process.setVisible(True)
                    self.btn_process.setEnabled(can_advance)
                    self.btn_abort.setVisible(False)
        else:
            # Etapas 1 e 2: Mostra navega√ß√£o normal
            self.btn_finish.setVisible(False)  # Sempre oculto, n√£o usamos mais
            self.btn_next.setVisible(True)
            
            # Esconde bot√µes de processamento se existirem
            if hasattr(self, 'btn_process'):
                self.btn_process.setVisible(False)
            if hasattr(self, 'btn_abort'):
                self.btn_abort.setVisible(False)
        
        # Bot√£o cancelar sempre habilitado
        self.btn_cancel.setEnabled(True)
        
        print(f"üîß DEBUG update_navigation_buttons: btn_next.isEnabled()={self.btn_next.isEnabled()}")
        print(f"üîß DEBUG update_navigation_buttons: btn_back.isEnabled()={self.btn_back.isEnabled()}")

    def can_advance(self):
        """Verifica se pode avan√ßar para o pr√≥ximo passo"""
        try:
            if self.current_step == 1:
                # Para avan√ßar da etapa 1, precisa ter tema e bioma selecionados
                has_theme_biome = bool(self.selected_theme and self.selected_biome)
                print(f"üîß DEBUG can_advance: step=1, theme={self.selected_theme}, biome={self.selected_biome}, has_theme_biome={has_theme_biome}")
                
                # L√ìGICA ESPECIAL PARA TERRACLASS: valida configura√ß√µes j√° na etapa 1
                if self.selected_theme == "TERRACLASS" and has_theme_biome:
                    terraclass_valid = self.validate_terraclass_settings()
                    print(f"üîß DEBUG can_advance: TERRACLASS step=1, terraclass_valid={terraclass_valid}")
                    return terraclass_valid
                else:
                    return has_theme_biome
            elif self.current_step == 2:
                # Para avan√ßar da etapa 2, verifica se as configura√ß√µes temporais est√£o completas
                result = self.validate_temporal_settings()
                print(f"üîß DEBUG can_advance: step=2, temporal_valid={result}")
                return result if result is not None else False
            else:
                return True
        except Exception as e:
            print(f"‚ùå ERROR can_advance: {str(e)}")
            return False  # Retorna False em caso de erro, nunca None

    def cancel_wizard(self):
        """Cancela o assistente e destr√≥i a inst√¢ncia para garantir estado limpo"""
        print("üîß DEBUG: cancel_wizard called - executando limpeza completa")
        
        # Limpa ferramentas de desenho se ativas
        if hasattr(self, 'draw_tool') and self.draw_tool:
            try:
                from qgis.utils import iface
                canvas = iface.mapCanvas()
                canvas.unsetMapTool(self.draw_tool)
                print("üîß DEBUG: Ferramenta de desenho removida")
            except:
                pass
        
        # NOVA ESTRAT√âGIA: Em vez de reset, destr√≥i diretamente a inst√¢ncia
        # Isso garante que a pr√≥xima abertura seja com estado 100% limpo
        print("‚úÖ DEBUG: Cancelamento executado - destruindo inst√¢ncia")
        
        # CORRE√á√ÉO: Fecha e DESTR√ìI a janela para garantir estado limpo na pr√≥xima abertura
        print("üóëÔ∏è DEBUG: Destruindo inst√¢ncia do dialog para garantir estado limpo")
        self.close()
        self.deleteLater()  # Marca para o PyQt destruir o objeto

    def validate_temporal_settings(self):
        """Valida se as configura√ß√µes temporais est√£o completas"""
        try:
            if self.current_step != 2:
                return True
                
            if not self.selected_theme:
                return False
                
            # Verifica√ß√µes espec√≠ficas por tema
            if self.selected_theme == "PRODES":
                result = self.validate_prodes_settings()
                return result if result is not None else False
            elif self.selected_theme == "DETER":
                result = self.validate_deter_settings()
                return result if result is not None else False
            elif self.selected_theme == "TERRACLASS":
                result = self.validate_terraclass_settings()
                return result if result is not None else False
            elif self.selected_theme == "√ÅREA QUEIMADA":
                result = self.validate_queimadas_settings()
                return result if result is not None else False
                
            return False
        except Exception as e:
            print(f"‚ùå ERROR validate_temporal_settings: {str(e)}")
            return False  # Sempre retorna False em caso de erro

    def validate_prodes_settings(self):
        """Valida configura√ß√µes espec√≠ficas do PRODES"""
        try:
            print(f"üîß DEBUG validate_prodes_settings: checking PRODES settings")
            
            # Verifica se tipo de dado foi escolhido (SEM verificar temporal_unit)
            has_data_type = hasattr(self, 'data_type') and self.data_type
            print(f"üîß DEBUG validate_prodes_settings: data_type={getattr(self, 'data_type', None)}, has_data_type={has_data_type}")
            
            if not has_data_type:
                return False
                
            # Verifica anos baseado no tipo de dado
            if self.data_type == "incremental":
                has_start = hasattr(self, 'start_year') and self.start_year
                has_end = hasattr(self, 'end_year') and self.end_year
                valid_range = has_start and has_end and self.start_year <= self.end_year
                print(f"üîß DEBUG validate_prodes_settings: incremental - start_year={getattr(self, 'start_year', None)}, end_year={getattr(self, 'end_year', None)}, valid_range={valid_range}")
                return valid_range
            elif self.data_type == "acumulado":
                has_end = hasattr(self, 'end_year') and self.end_year
                print(f"üîß DEBUG validate_prodes_settings: acumulado - end_year={getattr(self, 'end_year', None)}, has_end={has_end}")
                return has_end
                
            return False
        except Exception as e:
            print(f"‚ùå ERROR validate_prodes_settings: {str(e)}")
            return False  # Sempre retorna False em caso de erro

    def validate_deter_settings(self):
        """Valida configura√ß√µes espec√≠ficas do DETER"""
        try:
            print(f"üîß DEBUG validate_deter_settings: checking DETER settings")
            
            # Verifica anos selecionados
            has_start = hasattr(self, 'deter_start_year') and self.deter_start_year
            has_end = hasattr(self, 'deter_end_year') and self.deter_end_year
            valid_range = has_start and has_end and self.deter_start_year <= self.deter_end_year
            print(f"üîß DEBUG validate_deter_settings: start_year={getattr(self, 'deter_start_year', None)}, end_year={getattr(self, 'deter_end_year', None)}, valid_range={valid_range}")
            
            if not valid_range:
                return False
                
            # L√ìGICA INTELIGENTE DE CLASSES DETER
            deter_classes = getattr(self, 'deter_selected_classes', None)
            print(f"üîß DEBUG validate_deter_settings: deter_selected_classes={deter_classes}, type={type(deter_classes)}")
            
            # Garantia que seja sempre uma lista
            if not isinstance(deter_classes, list):
                print(f"‚ö†Ô∏è WARNING: deter_selected_classes n√£o √© lista! Tipo: {type(deter_classes)}")
                return False
            
            # Obtem classes dispon√≠veis para o bioma
            if not self.selected_biome or self.selected_biome not in self.deter_classes:
                print(f"‚ö†Ô∏è WARNING: Bioma n√£o encontrado: {self.selected_biome}")
                return False
                
            available_classes = self.deter_classes[self.selected_biome]
            total_available = len(available_classes)
            total_selected = len(deter_classes)
            
            print(f"üîß DEBUG validate_deter_settings: bioma={self.selected_biome}")
            print(f"üîß DEBUG validate_deter_settings: available_classes={available_classes} (total: {total_available})")
            print(f"üîß DEBUG validate_deter_settings: selected_classes={deter_classes} (total: {total_selected})")
            
            # REGRA: Pelo menos uma classe deve estar selecionada
            if total_selected == 0:
                print("‚ùå ERRO: Nenhuma classe DETER foi selecionada!")
                return False
            
            # REGRA: Se todas as classes est√£o selecionadas = SEM FILTRO (v√°lido)
            if total_selected == total_available:
                print("‚úÖ INFO: Todas as classes selecionadas - ser√° baixado SEM filtro de classes")
                return True
                
            # REGRA: Se algumas classes est√£o selecionadas = COM FILTRO (v√°lido)
            print(f"‚úÖ INFO: {total_selected}/{total_available} classes selecionadas - ser√° aplicado filtro")
            return True
            
        except Exception as e:
            print(f"‚ùå ERROR validate_deter_settings: {str(e)}")
            return False

    def validate_terraclass_settings(self):
        """Valida configura√ß√µes espec√≠ficas do TERRACLASS"""
        try:
            print(f"üîß DEBUG validate_terraclass_settings: checking TERRACLASS settings")
            
            # Verifica se ano foi selecionado
            has_year = hasattr(self, 'terraclass_year') and self.terraclass_year
            print(f"üîß DEBUG validate_terraclass_settings: year={getattr(self, 'terraclass_year', None)}, has_year={has_year}")
            
            if not has_year:
                return False
                
            # Verifica se estado foi selecionado
            has_state = hasattr(self, 'terraclass_state') and self.terraclass_state
            print(f"üîß DEBUG validate_terraclass_settings: state={getattr(self, 'terraclass_state', None)}, has_state={has_state}")
            
            if not has_state:
                return False
                
            # Munic√≠pio √© opcional - se ano e estado estiverem selecionados, j√° √© v√°lido
            print(f"üîß DEBUG validate_terraclass_settings: municipality={getattr(self, 'terraclass_municipality', None)} (opcional)")
            
            return True
        except Exception as e:
            print(f"‚ùå ERROR validate_terraclass_settings: {str(e)}")
            return False  # Sempre retorna False em caso de erro

    def go_back(self):
        """Volta para o passo anterior"""
        print(f"üîß DEBUG go_back: current_step={self.current_step}")
        
        if self.current_step > 1:
            # L√ìGICA ESPECIAL PARA TERRACLASS: Volta da etapa 3 para etapa 1 (sem passar pela etapa 2)
            if (self.selected_theme == "TERRACLASS" and self.current_step == 3):
                print(f"üîß DEBUG go_back: TERRACLASS detectado - voltando da etapa 3 para etapa 1")
                self.current_step = 1  # Volta direto para etapa 1
            else:
                self.current_step -= 1
            
            print(f"üîß DEBUG go_back: voltando para step {self.current_step}")
            
            # CORRE√á√ÉO: Preserva sele√ß√µes ao voltar
            if self.current_step == 1:
                # Ao voltar para etapa 1, preserva tema e bioma selecionados
                print(f"üîß DEBUG go_back: preservando tema={self.selected_theme}, bioma={self.selected_biome}")
            
            self.update_interface()
            
            # CORRE√á√ÉO: Restaura sele√ß√µes ap√≥s atualizar interface
            if self.current_step == 1:
                self.restore_step1_selections()
            
            # For√ßa responsividade
            self.adjustSize()
            QTimer.singleShot(10, self.force_resize)

    def restore_step1_selections(self):
        """Restaura as sele√ß√µes da etapa 1 ap√≥s voltar"""
        try:
            print(f"üîß DEBUG restore_step1_selections: restaurando tema={self.selected_theme}, bioma={self.selected_biome}")
            
            # Restaura tema
            if self.selected_theme and hasattr(self, 'theme_combo'):
                self.theme_combo.setCurrentText(self.selected_theme)
                print(f"‚úÖ DEBUG: Tema restaurado: {self.theme_combo.currentText()}")
                
                # CORRE√á√ÉO: For√ßa chamada do on_theme_changed para mostrar bioma
                print(f"üîß DEBUG: For√ßando atualiza√ß√£o do bioma ap√≥s restaurar tema")
                self.on_theme_changed(self.selected_theme)
            
            # NOVA ESTRAT√âGIA: Restaura bioma com m√∫ltiplas tentativas e timers escalonados
            if self.selected_biome and hasattr(self, 'biome_combo'):
                print(f"üîß DEBUG: Iniciando restaura√ß√£o escalonada do bioma")
                # Primeira tentativa: 200ms
                QTimer.singleShot(200, lambda: self.restore_biome_direct())
                # Segunda tentativa: 400ms (se primeira falhar)
                QTimer.singleShot(400, lambda: self.restore_biome_fallback())
                # Terceira tentativa: 600ms (for√ßa total)
                QTimer.singleShot(600, lambda: self.restore_biome_force())
                
            # Restaura op√ß√£o de corte
            if hasattr(self, 'cut_option') and self.cut_option is not None:
                if hasattr(self, 'cut_button_group'):
                    button = self.cut_button_group.button(self.cut_option)
                    if button:
                        button.setChecked(True)
                        # Recria configura√ß√µes espec√≠ficas
                        self.on_cut_option_changed(button)
                        
        except Exception as e:
            print(f"‚ö†Ô∏è WARNING restore_step1_selections: {str(e)}")

    def restore_biome_direct(self):
        """Primeira tentativa de restaura√ß√£o direta do bioma"""
        try:
            if not self.selected_biome or not hasattr(self, 'biome_combo'):
                return
                
            print(f"üîß DEBUG restore_biome_direct: Tentativa 1 - bioma={self.selected_biome}")
            print(f"üîß DEBUG restore_biome_direct: combo tem {self.biome_combo.count()} itens")
            
            # Bloqueia sinais temporariamente para evitar conflitos
            self.biome_combo.blockSignals(True)
            
            # Procura e seleciona o bioma
            biome_found = False
            for i in range(self.biome_combo.count()):
                item_text = self.biome_combo.itemText(i)
                if item_text == self.selected_biome:
                    print(f"‚úÖ DEBUG: Bioma encontrado no √≠ndice {i} - selecionando")
                    self.biome_combo.setCurrentIndex(i)
                    biome_found = True
                    break
            
            # Reativa sinais
            self.biome_combo.blockSignals(False)
            
            if biome_found:
                # For√ßa atualiza√ß√£o das notas sem chamar callback problem√°tico
                print(f"‚úÖ DEBUG: Bioma restaurado com sucesso - atualizando notas")
                self.update_comprehensive_notes()
                self.update_navigation_buttons()
            else:
                print(f"‚ö†Ô∏è DEBUG: Bioma n√£o encontrado na tentativa 1")
                
        except Exception as e:
            print(f"‚ùå DEBUG restore_biome_direct: {str(e)}")

    def restore_biome_fallback(self):
        """Segunda tentativa - verifica se ainda precisa restaurar"""
        try:
            if not self.selected_biome or not hasattr(self, 'biome_combo'):
                return
                
            # Verifica se j√° foi restaurado
            current_text = self.biome_combo.currentText()
            if current_text == self.selected_biome:
                print(f"‚úÖ DEBUG: Bioma j√° restaurado corretamente: {current_text}")
                return
                
            print(f"üîß DEBUG restore_biome_fallback: Tentativa 2 - current='{current_text}', target='{self.selected_biome}'")
            
            # Tenta novamente com bloqueio de sinais
            self.biome_combo.blockSignals(True)
            
            # For√ßa refresh da lista primeiro
            if self.selected_theme and self.selected_theme in self.biome_options:
                self.biome_combo.clear()
                self.biome_combo.addItem("")
                self.biome_combo.addItems(self.biome_options[self.selected_theme])
                print(f"üîß DEBUG: Lista de biomas recarregada: {self.biome_combo.count()} itens")
            
            # Procura e seleciona novamente
            for i in range(self.biome_combo.count()):
                if self.biome_combo.itemText(i) == self.selected_biome:
                    self.biome_combo.setCurrentIndex(i)
                    print(f"‚úÖ DEBUG: Bioma selecionado na tentativa 2")
                    break
            
            self.biome_combo.blockSignals(False)
            self.update_comprehensive_notes()
            
        except Exception as e:
            print(f"‚ùå DEBUG restore_biome_fallback: {str(e)}")

    def restore_biome_force(self):
        """Terceira tentativa - for√ßa total com callback"""
        try:
            if not self.selected_biome or not hasattr(self, 'biome_combo'):
                return
                
            current_text = self.biome_combo.currentText()
            if current_text == self.selected_biome:
                print(f"‚úÖ DEBUG: Bioma j√° restaurado na for√ßa: {current_text}")
                return
                
            print(f"üîß DEBUG restore_biome_force: Tentativa 3 (FOR√áA) - for√ßando restaura√ß√£o")
            
            # √öltima tentativa: permite sinais e for√ßa callback
            for i in range(self.biome_combo.count()):
                if self.biome_combo.itemText(i) == self.selected_biome:
                    print(f"üîß DEBUG: Aplicando for√ßa bruta - setCurrentIndex({i})")
                    self.biome_combo.setCurrentIndex(i)
                    
                    # For√ßa callback manual se necess√°rio
                    if self.biome_combo.currentText() == self.selected_biome:
                        print(f"‚úÖ DEBUG: For√ßa total bem-sucedida!")
                        # N√£o chama on_biome_changed para evitar conflitos, s√≥ atualiza notas
                        self.update_comprehensive_notes()
                        self.update_navigation_buttons()
                    else:
                        print(f"‚ùå DEBUG: For√ßa total falhou")
                    break
                    
        except Exception as e:
            print(f"‚ùå DEBUG restore_biome_force: {str(e)}")

    def go_next(self):
        """Avan√ßa para o pr√≥ximo passo"""
        print(f"üîß DEBUG go_next: current_step={self.current_step}, max_steps={self.max_steps}")
        print(f"üîß DEBUG go_next: can_advance={self.can_advance()}")
        
        if self.current_step < self.max_steps and self.can_advance():
            # L√ìGICA ESPECIAL PARA TERRACLASS: Pula da etapa 1 para etapa 3 (sem filtros)
            if (self.selected_theme == "TERRACLASS" and self.current_step == 1):
                print(f"üîß DEBUG go_next: TERRACLASS detectado - pulando etapa 2 (sem filtros)")
                self.current_step = 3  # Pula direto para processamento final
            else:
                self.current_step += 1
            
            print(f"üîß DEBUG go_next: advancing to step {self.current_step}")
            self.update_interface()
        else:
            print(f"üîß DEBUG go_next: cannot advance - step={self.current_step}, max={self.max_steps}, can_advance={self.can_advance()}")

    def finish_wizard(self):
        """Finaliza o assistente"""
        self.accept()

    def closeEvent(self, event):
        """Evento de fechamento da janela"""
        print("üóëÔ∏è DEBUG: closeEvent chamado - limpando recursos e destruindo inst√¢ncia")
        
        # Limpa ferramentas de desenho se ativas
        if self.draw_tool:
            try:
                from qgis.utils import iface
                canvas = iface.mapCanvas()
                canvas.unsetMapTool(self.draw_tool)
                print("üîß DEBUG: Ferramenta de desenho removida")
            except:
                pass
        
        # For√ßa destrui√ß√£o da inst√¢ncia para garantir estado limpo na pr√≥xima abertura
        self.deleteLater()
        print("‚úÖ DEBUG: Inst√¢ncia marcada para destrui√ß√£o - pr√≥xima abertura ser√° com estado limpo")
        
        event.accept()

    def get_selection_summary(self):
        """Retorna um resumo das sele√ß√µes para usar nas pr√≥ximas etapas"""
        summary = {
            'theme': self.selected_theme,
            'biome': self.selected_biome,
            'cut_option': self.cut_option,
            'cut_layer': self.get_cut_layer()
        }
        
        # Adiciona detalhes espec√≠ficos de cada op√ß√£o
        if self.cut_option == 1 and self.selected_layer:
            summary['layer_name'] = self.selected_layer.name()
            summary['field_name'] = self.selected_field
            summary['element_value'] = self.selected_element
            
        elif self.cut_option == 2 and self.drawn_rectangle:
            summary['rectangle'] = self.drawn_rectangle
            
        elif self.cut_option == 3:
            summary['wfs_type'] = getattr(self, 'wfs_type_combo', None) and self.wfs_type_combo.currentText()
            summary['wfs_field'] = getattr(self, 'wfs_field_combo', None) and self.wfs_field_combo.currentText()
            summary['wfs_element'] = getattr(self, 'wfs_element', None)
            
        return summary

    def create_simple_wfs_layer(self, base_url, type_key):
        """Fun√ß√£o simplificada para WFS - usado como fallback"""
        return self.create_wfs_layer_simple(base_url, type_key)



    def create_direct_download_layer(self, base_url, type_key):
        """Tenta criar layer WFS com download direto e m√∫ltiplas estrat√©gias"""
        try:
            print(f"üåê DEBUG: === CRIANDO LAYER COM DOWNLOAD DIRETO ===")
            
            # Extrai informa√ß√µes da URL
            try:
                url_parts = base_url.split('/geoserver/')[1].split('/ows')[0].split('/')
                namespace = url_parts[0]
                layer_name = url_parts[1]
                print(f"üîß DEBUG: Namespace: {namespace}, Layer: {layer_name}")
            except:
                print(f"‚ùå DEBUG: Erro ao extrair namespace/layer")
                return None
            
            # Estrat√©gias de URL mais simples para download
            simple_strategies = [
                # Estrat√©gia 1: WFS 1.0.0 simples
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}",
                # Estrat√©gia 2: Apenas layer name
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={layer_name}",
                # Estrat√©gia 3: Com CRS expl√≠cito
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}&srsName=EPSG:4674",
                # Estrat√©gia 4: GML2 que √© mais compat√≠vel
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}&outputFormat=text/xml;subtype=gml/2.1.2",
                # Estrat√©gia 5: Com timeout maior
                f"url='{base_url}' typename='{namespace}:{layer_name}' version='1.0.0'",
            ]
            
            for i, url_strategy in enumerate(simple_strategies, 1):
                try:
                    print(f"üåê DEBUG: Estrat√©gia direta {i}/{len(simple_strategies)}")
                    print(f"üîó DEBUG: URL: {url_strategy[:100]}...")
                    
                    # Cria layer
                    layer = QgsVectorLayer(url_strategy, f"DirectWFS_{i}", "WFS")
                    
                    # Aguarda carregamento
                    QgsApplication.processEvents()
                    
                    print(f"üîß DEBUG: Layer v√°lida: {layer.isValid()}")
                    
                    if layer.isValid():
                        feature_count = layer.featureCount()
                        print(f"üîß DEBUG: Fei√ß√µes: {feature_count}")
                        
                        if feature_count > 0:
                            print(f"‚úÖ DEBUG: Estrat√©gia {i} bem-sucedida! {feature_count} fei√ß√µes")
                            
                            # Testa algumas fei√ß√µes para garantir que t√™m geometria
                            features = list(layer.getFeatures())[:3]
                            valid_geom_count = 0
                            for feat in features:
                                if feat.hasGeometry() and not feat.geometry().isEmpty():
                                    valid_geom_count += 1
                            
                            print(f"‚úÖ DEBUG: {valid_geom_count}/3 fei√ß√µes testadas t√™m geometria v√°lida")
                            return layer
                        else:
                            print(f"‚ö†Ô∏è DEBUG: Layer v√°lida mas vazia")
                    else:
                        error = layer.error().message() if layer.error() else "Erro desconhecido"
                        print(f"‚ùå DEBUG: Layer inv√°lida: {error}")
                        
                except Exception as e:
                    print(f"‚ùå DEBUG: Erro na estrat√©gia {i}: {str(e)}")
                    continue
            
            print(f"‚ùå DEBUG: Todas as estrat√©gias diretas falharam")
            return None
            
        except Exception as e:
            print(f"‚ùå DEBUG: Erro geral no download direto: {str(e)}")
            return None

    def create_fresh_wfs_layer(self):
        """Cria uma nova layer WFS do zero"""
        try:
            print(f"üîß DEBUG: Criando nova layer WFS...")
            
            wfs_type = self.wfs_type_combo.currentText()
            type_mapping = {
                "Unidades de Conserva√ß√£o": "conservation_units",
                "Terras Ind√≠genas": "indigenous_area", 
                "Munic√≠pios": "municipalities",
                "Estados": "states"
            }
            
            type_key = type_mapping.get(wfs_type)
            if not type_key or self.selected_biome not in self.wfs_urls[type_key]:
                print(f"‚ùå DEBUG: URL WFS n√£o dispon√≠vel")
                return None
                
            base_url = self.wfs_urls[type_key][self.selected_biome]
            
            # Cria layer WFS com estrat√©gia mais robusta
            layer = self.create_wfs_layer(base_url, type_key)
            
            if layer and layer.isValid():
                print(f"‚úÖ DEBUG: Nova layer WFS criada com sucesso")
                return layer
            else:
                print(f"‚ùå DEBUG: Falha ao criar nova layer WFS")
                return None
                
        except Exception as e:
            print(f"‚ùå DEBUG: Erro ao criar nova layer WFS: {str(e)}")
            return None

    def create_wfs_debug_layer(self):
        """Cria layer de debug espec√≠fica para WFS"""
        try:
            if not self.wfs_layer or not self.wfs_layer.isValid():
                print(f"‚ùå DEBUG: Layer WFS base inv√°lida")
                return None
                
            print(f"üîß DEBUG: === CRIANDO LAYER DE DEBUG WFS ===")
            print(f"üîß DEBUG: Layer base tem {self.wfs_layer.featureCount()} fei√ß√µes")
            
            # TESTE CR√çTICO: Verifica se a layer base realmente tem fei√ß√µes
            print(f"üîç DEBUG: === VERIFICA√á√ÉO CR√çTICA DA LAYER BASE ===")
            base_feature_test = self.test_layer_features(self.wfs_layer, "Base WFS")
            
            if not base_feature_test:
                print(f"‚ùå DEBUG: Layer base n√£o tem fei√ß√µes reais!")
                return None
            
            # PRIMEIRO: Verifica se h√° filtro
            has_filter = (hasattr(self, 'wfs_field_combo') and self.wfs_field_combo.currentText() and 
                         hasattr(self, 'wfs_element_combo') and self.wfs_element_combo.currentText())
            
            field_name = self.wfs_field_combo.currentText() if has_filter else None
            element_value = self.wfs_element_combo.currentText() if has_filter else None
            
            print(f"üîß DEBUG: Filtro ativo: {has_filter}")
            if has_filter:
                print(f"üîß DEBUG: Campo: '{field_name}', Elemento: '{element_value}'")
            
            # SEGUNDO: Testa layer SEM filtro primeiro (para verificar geometrias)
            print(f"üîß DEBUG: === TESTANDO LAYER SEM FILTRO ===")
            base_layer = self.wfs_layer.clone()
            
            if base_layer and base_layer.isValid():
                base_count = base_layer.featureCount()
                print(f"‚úÖ DEBUG: Layer sem filtro: {base_count} fei√ß√µes")
                
                # TESTE CR√çTICO: Verifica se o clone tem fei√ß√µes reais
                print(f"üîç DEBUG: === VERIFICA√á√ÉO DO CLONE ===")
                clone_feature_test = self.test_layer_features(base_layer, "Clone Base")
                
                if not clone_feature_test:
                    print(f"‚ùå DEBUG: Clone perdeu as fei√ß√µes!")
                    print(f"üîß DEBUG: Tentando criar nova layer sem clone...")
                    base_layer = self.wfs_layer  # Usa original
                    
                    # Testa original novamente
                    original_test = self.test_layer_features(base_layer, "Original WFS")
                    if not original_test:
                        print(f"‚ùå DEBUG: Nem a layer original tem fei√ß√µes reais!")
                        return None
                
                if base_count > 0:
                    # Testa algumas geometrias
                    geometry_stats = self.check_geometry_validity(base_layer)
                    print(f"üîç DEBUG: Geometrias - V√°lidas: {geometry_stats['valid']}, Inv√°lidas: {geometry_stats['invalid']}, Vazias: {geometry_stats['empty']}")
                    
                    # Se h√° geometrias inv√°lidas, aplica fix
                    if geometry_stats['invalid'] > 0:
                        print(f"üîß DEBUG: === APLICANDO FIX GEOMETRY ===")
                        fixed_layer = self.fix_layer_geometries(base_layer)
                        if fixed_layer:
                            base_layer = fixed_layer
                            print(f"‚úÖ DEBUG: Fix geometry aplicado")
                
                # Se n√£o h√° filtro, retorna a layer base
                if not has_filter:
                    print(f"‚úÖ DEBUG: Retornando layer completa (sem filtro): {base_layer.featureCount()} fei√ß√µes")
                    
                    # TESTE FINAL: Verifica se a layer final tem fei√ß√µes reais
                    final_test = self.test_layer_features(base_layer, "Final Sem Filtro")
                    if not final_test:
                        print(f"‚ùå DEBUG: Layer final perdeu as fei√ß√µes!")
                        return None
                        
                    return base_layer
            else:
                print(f"‚ùå DEBUG: Erro ao clonar layer base")
                return None
            
            # TERCEIRO: Se h√° filtro, verifica se os valores existem ANTES de aplicar
            if has_filter:
                print(f"üîß DEBUG: === VERIFICANDO FILTRO ===")
                
                # Lista valores reais do campo
                real_values = self.list_real_field_values(base_layer, field_name)
                print(f"üîç DEBUG: Valores reais no campo '{field_name}': {real_values[:10]}...")  # Primeiros 10
                
                # Verifica se o elemento procurado existe
                if element_value not in real_values:
                    print(f"‚ùå DEBUG: ELEMENTO '{element_value}' N√ÉO ENCONTRADO!")
                    print(f"üîç DEBUG: Valores dispon√≠veis: {real_values}")
                    print(f"‚ö†Ô∏è DEBUG: Retornando layer SEM filtro para an√°lise")
                    
                    # Retorna layer sem filtro para o usu√°rio ver o que h√° dispon√≠vel
                    base_layer.setName(f"DEBUG_SemFiltro_VerifiqueElementos")
                    return base_layer
                else:
                    print(f"‚úÖ DEBUG: Elemento '{element_value}' encontrado na lista")
                
                # QUARTO: Aplica filtro COM VERIFICA√á√ÉO DETALHADA
                print(f"üîß DEBUG: === APLICANDO FILTRO COM VERIFICA√á√ÉO ===")
                try:
                    expression = f'"{field_name}" = \'{element_value}\''
                    print(f"üîß DEBUG: Express√£o: {expression}")
                    
                    # Testa a express√£o primeiro
                    print(f"üîç DEBUG: Testando express√£o antes de aplicar...")
                    test_count = 0
                    for feature in base_layer.getFeatures():
                        try:
                            value = feature.attribute(field_name)
                            if str(value).strip() == element_value.strip():
                                test_count += 1
                        except:
                            continue
                    
                    print(f"üîß DEBUG: Teste manual encontrou {test_count} fei√ß√µes que atendem o filtro")
                    
                    # Aplica filtro oficial
                    request = QgsFeatureRequest().setFilterExpression(expression)
                    
                    print(f"üîß DEBUG: Criando layer filtrada...")
                    filtered_layer = base_layer.materialize(request)
                    
                    filtered_count = filtered_layer.featureCount()
                    print(f"‚úÖ DEBUG: Layer filtrada criada: {filtered_count} fei√ß√µes")
                    
                    # TESTE CR√çTICO: Verifica se a materializa√ß√£o preservou as fei√ß√µes
                    print(f"üîç DEBUG: === VERIFICA√á√ÉO DA MATERIALIZA√á√ÉO ===")
                    if filtered_count > 0:
                        material_test = self.test_layer_features(filtered_layer, "Materializada")
                        if not material_test:
                            print(f"‚ùå DEBUG: Materializa√ß√£o perdeu as fei√ß√µes!")
                            print(f"üîß DEBUG: Tentando m√©todo alternativo...")
                            
                            # M√©todo alternativo: cria layer em mem√≥ria manualmente
                            alt_layer = self.create_filtered_layer_manually(base_layer, field_name, element_value)
                            if alt_layer:
                                print(f"‚úÖ DEBUG: Layer alternativa criada: {alt_layer.featureCount()} fei√ß√µes")
                                alt_test = self.test_layer_features(alt_layer, "Alternativa")
                                if alt_test:
                                    return alt_layer
                        else:
                            return filtered_layer
                    
                    if filtered_count > 0:
                        return filtered_layer
                    else:
                        print(f"‚ö†Ô∏è DEBUG: Filtro resultou em 0 fei√ß√µes")
                        print(f"üîß DEBUG: Tentando filtro case-insensitive...")
                        
                        # Tenta filtro case-insensitive
                        expression_ci = f'upper("{field_name}") = upper(\'{element_value}\')'
                        request_ci = QgsFeatureRequest().setFilterExpression(expression_ci)
                        filtered_layer_ci = base_layer.materialize(request_ci)
                        
                        filtered_count_ci = filtered_layer_ci.featureCount()
                        print(f"üîß DEBUG: Filtro case-insensitive: {filtered_count_ci} fei√ß√µes")
                        
                        if filtered_count_ci > 0:
                            # Verifica a materializa√ß√£o case-insensitive
                            ci_test = self.test_layer_features(filtered_layer_ci, "Case-Insensitive")
                            if ci_test:
                                return filtered_layer_ci
                        
                        print(f"‚ö†Ô∏è DEBUG: Mesmo case-insensitive n√£o funcionou")
                        print(f"üîß DEBUG: Retornando layer sem filtro para investiga√ß√£o")
                        base_layer.setName(f"DEBUG_FiltroFalhou_VerifiqueValores")
                        return base_layer
                        
                except Exception as e:
                    print(f"‚ùå DEBUG: Erro ao aplicar filtro: {str(e)}")
                    print(f"üîß DEBUG: Retornando layer sem filtro")
                    return base_layer
            
            print(f"‚ùå DEBUG: Chegou ao final sem retornar layer")
            return None
                
        except Exception as e:
            print(f"‚ùå DEBUG: Erro ao criar layer de debug: {str(e)}")
            import traceback
            traceback.print_exc()
            return None

    def test_layer_features(self, layer, layer_name):
        """Testa se a layer realmente tem fei√ß√µes acess√≠veis"""
        try:
            print(f"üîç DEBUG: Testando fei√ß√µes da layer '{layer_name}'...")
            
            if not layer or not layer.isValid():
                print(f"‚ùå DEBUG: Layer inv√°lida")
                return False
            
            # Teste 1: featureCount()
            count = layer.featureCount()
            print(f"üîß DEBUG: featureCount(): {count}")
            
            if count == 0:
                print(f"‚ùå DEBUG: featureCount() retorna 0")
                return False
            
            # Teste 2: Tenta iterar as fei√ß√µes
            print(f"üîß DEBUG: Tentando iterar fei√ß√µes...")
            real_count = 0
            features_with_attrs = 0
            features_with_geom = 0
            
            try:
                for i, feature in enumerate(layer.getFeatures()):
                    real_count += 1
                    
                    # Testa atributos
                    attrs = feature.attributes()
                    if attrs and any(attr is not None for attr in attrs):
                        features_with_attrs += 1
                    
                    # Testa geometria
                    if feature.hasGeometry() and not feature.geometry().isEmpty():
                        features_with_geom += 1
                    
                    # S√≥ testa as primeiras 5 para performance
                    if i >= 4:
                        break
                        
                print(f"‚úÖ DEBUG: Itera√ß√£o bem-sucedida:")
                print(f"   Real count: {real_count}")
                print(f"   Com atributos: {features_with_attrs}")
                print(f"   Com geometria: {features_with_geom}")
                
                if real_count == 0:
                    print(f"‚ùå DEBUG: Itera√ß√£o n√£o retornou fei√ß√µes!")
                    return False
                
                if features_with_attrs == 0:
                    print(f"‚ö†Ô∏è DEBUG: Nenhuma fei√ß√£o tem atributos!")
                    
                return True
                
            except Exception as iter_error:
                print(f"‚ùå DEBUG: Erro na itera√ß√£o: {str(iter_error)}")
                return False
            
        except Exception as e:
            print(f"‚ùå DEBUG: Erro no teste de fei√ß√µes: {str(e)}")
            return False

    def create_filtered_layer_manually(self, base_layer, field_name, element_value):
        """Cria layer filtrada manualmente copiando fei√ß√µes uma por uma"""
        try:
            print(f"üîß DEBUG: Criando layer filtrada manualmente...")
            
            from qgis.core import QgsVectorLayer, QgsFeature, QgsField
            from qgis.PyQt.QtCore import QVariant
            
            # Cria layer de mem√≥ria
            geom_type = QgsWkbTypes.displayString(base_layer.wkbType())
            crs = base_layer.crs().authid()
            
            memory_layer = QgsVectorLayer(f"{geom_type}?crs={crs}", "FilteredManual", "memory")
            
            if not memory_layer.isValid():
                print(f"‚ùå DEBUG: Falha ao criar layer de mem√≥ria")
                return None
            
            # Copia campos
            memory_layer.dataProvider().addAttributes(base_layer.fields())
            memory_layer.updateFields()
            
            # Filtra e copia fei√ß√µes manualmente
            copied_count = 0
            
            for feature in base_layer.getFeatures():
                try:
                    value = feature.attribute(field_name)
                    if str(value).strip() == element_value.strip():
                        # Copia a fei√ß√£o
                        new_feature = QgsFeature(memory_layer.fields())
                        new_feature.setAttributes(feature.attributes())
                        if feature.hasGeometry():
                            new_feature.setGeometry(feature.geometry())
                        
                        success = memory_layer.dataProvider().addFeature(new_feature)
                        if success:
                            copied_count += 1
                        
                except Exception as feat_error:
                    print(f"‚ö†Ô∏è DEBUG: Erro ao copiar fei√ß√£o: {str(feat_error)}")
                    continue
            
            memory_layer.updateExtents()
            
            print(f"‚úÖ DEBUG: Layer manual criada com {copied_count} fei√ß√µes")
            
            if copied_count > 0:
                return memory_layer
            else:
                return None
                
        except Exception as e:
            print(f"‚ùå DEBUG: Erro na cria√ß√£o manual: {str(e)}")
            return None

    def check_geometry_validity(self, layer):
        """Verifica a validade das geometrias da layer"""
        try:
            stats = {'valid': 0, 'invalid': 0, 'empty': 0, 'total': 0}
            
            # Testa at√© 10 fei√ß√µes para estat√≠stica
            features = list(layer.getFeatures())[:10]
            
            for feature in features:
                stats['total'] += 1
                
                if not feature.hasGeometry():
                    stats['empty'] += 1
                elif feature.geometry().isEmpty():
                    stats['empty'] += 1
                elif feature.geometry().isGeosValid():
                    stats['valid'] += 1
                else:
                    stats['invalid'] += 1
                    
            return stats
            
        except Exception as e:
            print(f"‚ùå DEBUG: Erro ao verificar geometrias: {str(e)}")
            return {'valid': 0, 'invalid': 0, 'empty': 0, 'total': 0}

    def fix_layer_geometries(self, layer):
        """Aplica fix geometry na layer"""
        try:
            print(f"üîß DEBUG: Aplicando fix geometry...")
            
            from qgis.core import QgsVectorFileWriter
            from processing import run as processing_run
            import tempfile
            import os
            
            # Cria arquivo tempor√°rio
            temp_dir = tempfile.gettempdir()
            temp_file = os.path.join(temp_dir, f"temp_wfs_{id(layer)}.gpkg")
            
            # Salva layer temporariamente
            options = QgsVectorFileWriter.SaveVectorOptions()
            options.driverName = "GPKG"
            
            error = QgsVectorFileWriter.writeAsVectorFormatV3(
                layer, temp_file, layer.transformContext(), options
            )
            
            if error[0] == QgsVectorFileWriter.NoError:
                print(f"‚úÖ DEBUG: Layer salva temporariamente")
                
                # Aplica fix geometry usando processing
                try:
                    result = processing_run("native:fixgeometries", {
                        'INPUT': temp_file,
                        'OUTPUT': 'memory:'
                    })
                    
                    fixed_layer = result['OUTPUT']
                    
                    if fixed_layer and fixed_layer.isValid():
                        print(f"‚úÖ DEBUG: Fix geometry aplicado com sucesso")
                        print(f"‚úÖ DEBUG: Layer corrigida: {fixed_layer.featureCount()} fei√ß√µes")
                        return fixed_layer
                    else:
                        print(f"‚ùå DEBUG: Fix geometry falhou")
                        
                except Exception as proc_error:
                    print(f"‚ùå DEBUG: Erro no processing fix geometry: {str(proc_error)}")
                
                # Limpa arquivo tempor√°rio
                try:
                    os.remove(temp_file)
                except:
                    pass
                    
            else:
                print(f"‚ùå DEBUG: Erro ao salvar layer tempor√°ria: {error}")
                
            return None
            
        except Exception as e:
            print(f"‚ùå DEBUG: Erro geral no fix geometry: {str(e)}")
            return None

    def list_real_field_values(self, layer, field_name):
        """Lista valores reais de um campo da layer"""
        try:
            if not layer or not layer.isValid():
                return []
                
            print(f"üîç DEBUG: Listando valores do campo '{field_name}'...")
            
            # Encontra √≠ndice do campo
            field_index = layer.fields().indexOf(field_name)
            if field_index < 0:
                print(f"‚ùå DEBUG: Campo '{field_name}' n√£o encontrado")
                # Lista campos dispon√≠veis
                available_fields = [f.name() for f in layer.fields()]
                print(f"üîç DEBUG: Campos dispon√≠veis: {available_fields}")
                return []
            
            # Coleta valores √∫nicos
            unique_values = set()
            feature_count = 0
            
            for feature in layer.getFeatures():
                try:
                    value = feature.attribute(field_name)
                    if value is not None:
                        unique_values.add(str(value).strip())
                    feature_count += 1
                    
                    # Limite para performance
                    if feature_count >= 1000:
                        break
                        
                except Exception as e:
                    continue
            
            result = sorted(list(unique_values))
            print(f"‚úÖ DEBUG: {len(result)} valores √∫nicos encontrados em {feature_count} fei√ß√µes")
            
            return result
            
        except Exception as e:
            print(f"‚ùå DEBUG: Erro ao listar valores: {str(e)}")
            return []

    def get_cut_option_name(self):
        """Retorna o nome da op√ß√£o de corte selecionada"""
        if self.cut_option == 0:
            return "SemCorte"
        elif self.cut_option == 1:
            return f"Layer_{self.selected_layer.name() if self.selected_layer else 'Indefinido'}"
        elif self.cut_option == 2:
            return "RetanguloDesenhado"
        elif self.cut_option == 3:
            # IBGE
            parts = ["IBGE"]
            if self.ibge_state:
                parts.append(self.ibge_state.replace(" ", "_"))
            if self.ibge_municipality:
                parts.append(self.ibge_municipality.replace(" ", "_"))
            return "_".join(parts)
        else:
            return "Desconhecido"

    def get_cut_option_details(self):
        """Retorna detalhes da op√ß√£o de corte para exibi√ß√£o"""
        if self.cut_option == 0:
            return "Todo o bioma (sem corte)"
        elif self.cut_option == 1:
            details = f"Layer: {self.selected_layer.name()}" if self.selected_layer else "Layer n√£o definido"
            if self.selected_field:
                details += f", Campo: {self.selected_field}"
                if self.selected_element:
                    details += f", Elemento: {self.selected_element}"
            return details
        elif self.cut_option == 2:
            if self.drawn_rectangle:
                return f"Ret√¢ngulo: ({self.drawn_rectangle.xMinimum():.3f}, {self.drawn_rectangle.yMinimum():.3f}) - ({self.drawn_rectangle.xMaximum():.3f}, {self.drawn_rectangle.yMaximum():.3f})"
            else:
                return "Ret√¢ngulo n√£o desenhado"
        elif self.cut_option == 3:
            # IBGE
            details = f"IBGE: {self.ibge_shapefile_name}"
            if self.ibge_state:
                details += f", {self.ibge_state}"
            if self.ibge_municipality:
                details += f", {self.ibge_municipality}"
            return details
        else:
            return "Op√ß√£o n√£o reconhecida"









    def test_wfs_connectivity(self, url):
        """Testa conectividade WFS para dados PRODES/DETER"""
        try:
            print(f"üåê DEBUG: Testando conectividade WFS: {url[:80]}...")
            
            # Extrai URL base sem par√¢metros
            base_url = url.split('?')[0]
            
            # Testa GetCapabilities simples
            import requests
            caps_url = f"{base_url}?service=WFS&request=GetCapabilities&version=2.0.0"
            
            response = requests.get(caps_url, timeout=10)
            
            if response.status_code == 200:
                # Verifica se tem conte√∫do WFS v√°lido
                content = response.text.lower()
                if 'wfs_capabilities' in content or 'featurecollection' in content or 'wfs:wfs_capabilities' in content:
                    print(f"‚úÖ DEBUG: Conectividade WFS OK")
                    return True
                else:
                    print(f"‚ùå DEBUG: Resposta inv√°lida - n√£o cont√©m capabilities WFS")
                    return False
            else:
                print(f"‚ùå DEBUG: Erro HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå DEBUG: Erro na conectividade WFS: {str(e)}")
            return False

    def normalize_terraclass_text(self, text):
        """Normaliza texto para URLs TERRACLASS - remove acentos e caracteres especiais"""
        import unicodedata
        import re
        
        # Remove acentos
        text_normalized = unicodedata.normalize('NFD', text)
        text_ascii = ''.join(c for c in text_normalized if unicodedata.category(c) != 'Mn')
        
        # Converte para mai√∫sculo e substitui espa√ßos por _
        text_clean = text_ascii.upper().replace(' ', '_')
        
        # Remove outros caracteres especiais
        text_clean = re.sub(r'[^A-Z0-9_]', '', text_clean)
        
        return text_clean

    def create_wfs_layer_simple(self, base_url, type_key):
        """Cria uma layer WFS com m√∫ltiplas estrat√©gias"""
        try:
            # Extrai namespace e layer
            try:
                url_parts = base_url.split('/geoserver/')[1].split('/ows')[0].split('/')
                namespace = url_parts[0]
                layer_name = url_parts[1]
            except:
                return None
            
            # URLs de teste - estrat√©gias QGIS-nativas
            qgis_native_urls = [
                f"url='{base_url}' typename='{namespace}:{layer_name}' version='1.0.0'",
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}",
                f"url='{base_url}' typename='{namespace}:{layer_name}' version='1.1.0'",
                f"{base_url}?service=WFS&version=1.1.0&request=GetFeature&typename={namespace}:{layer_name}",
                f"url='{base_url}' typename='{layer_name}' version='1.0.0'",
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}&srsName=EPSG:4674",
                base_url,
                f"{base_url}?service=WFS&version=1.0.0&request=GetFeature&typeName={namespace}:{layer_name}&outputFormat=GML2"
            ]
            
            for i, url in enumerate(qgis_native_urls, 1):
                try:
                    layer = QgsVectorLayer(url, f"WFS_{i}", "WFS")
                    
                    # For√ßa carregamento
                    QgsApplication.processEvents()
                    
                    # Aguarda carregamento completo
                    import time
                    time.sleep(1)
                    QgsApplication.processEvents()
                    
                    layer.reload()
                    layer.dataProvider().reloadData()
                    QgsApplication.processEvents()
                    
                    if layer.isValid():
                        feature_count = layer.featureCount()
                        
                        if feature_count > 0:
                            # Testa se tem dados reais
                            try:
                                features = []
                                feature_iter = layer.getFeatures()
                                
                                for idx, feature in enumerate(feature_iter):
                                    if idx >= 3:
                                        break
                                    features.append(feature)
                                
                                actual_count = len(features)
                                
                                if actual_count > 0:
                                    first_feature = features[0]
                                    attrs = first_feature.attributes()
                                    has_geom = first_feature.hasGeometry()
                                    
                                    # Sucesso se tem atributos OU geometria
                                    if (attrs and any(attr is not None for attr in attrs)) or has_geom:
                                        return layer
                                
                            except Exception as iter_error:
                                # Verifica se √© erro conhecido do servidor
                                if any(err in str(iter_error).lower() for err in ['not well-formed', 'invalid token', 'primary key', 'natural order']):
                                    continue
                                else:
                                    # Erro diferente, layer pode funcionar mesmo assim
                                    if feature_count > 0:
                                        return layer
                        
                except Exception as e:
                    # Verifica se √© erro conhecido do servidor
                    known_errors = ['not well-formed', 'invalid token', 'primary key', 'natural order', 'boundedBy']
                    if any(err in str(e).lower() for err in known_errors):
                        continue
            
            # Se todas as estrat√©gias falharam, retorna None
            return None
            
        except Exception as e:
            return None



    def on_data_type_changed(self, button):
        """Callback para mudan√ßa do tipo de dados"""
        option_id = self.data_type_button_group.id(button)
        if option_id == 0:
            self.data_type = "incremental"
        elif option_id == 1:
            self.data_type = "acumulado"
        
        self.update_years_interface()
        self.update_prodes_notes()
        self.update_navigation_buttons()

    def populate_years(self):
        """Popula os combos de anos baseado no bioma selecionado e tipo de dados"""
        if not self.selected_biome:
            return
        
        # Escolhe a lista de anos baseada no tipo de dados
        if self.data_type == "acumulado":
            # Para acumulado, usa a lista estendida que inclui anos iniciais
            if self.selected_biome not in self.prodes_years_acumulado:
                return
            available_years = self.prodes_years_acumulado[self.selected_biome]
        else:
            # Para incremental, usa a lista padr√£o
            if self.selected_biome not in self.prodes_years:
                return
            available_years = self.prodes_years[self.selected_biome]
        
        # Limpa combos
        self.start_year_combo.clear()
        self.end_year_combo.clear()
        
        # Adiciona op√ß√£o vazia
        self.start_year_combo.addItem("")
        self.end_year_combo.addItem("")
        
        # Adiciona anos dispon√≠veis
        for year in available_years:
            self.start_year_combo.addItem(str(year))
            self.end_year_combo.addItem(str(year))
        
        # Define valores padr√£o
        if available_years:
            # Para incremental: primeiro e √∫ltimo ano
            if self.data_type == "incremental":
                self.start_year_combo.setCurrentText(str(available_years[0]))
                self.end_year_combo.setCurrentText(str(available_years[-1]))
            # Para acumulado: s√≥ √∫ltimo ano
            else:
                self.end_year_combo.setCurrentText(str(available_years[-1]))

    def update_years_interface(self):
        """Atualiza interface dos anos baseado no tipo de dados"""
        if not hasattr(self, 'years_group'):
            return
            
        if self.data_type == "incremental":
            # Mostra ambos os campos
            self.start_year_label.setVisible(True)
            self.start_year_combo.setVisible(True)
            self.end_year_label.setVisible(True)
            self.end_year_combo.setVisible(True)
        elif self.data_type == "acumulado":
            # Esconde ano inicial
            self.start_year_label.setVisible(False)
            self.start_year_combo.setVisible(False)
            self.end_year_label.setVisible(True)
            self.end_year_combo.setVisible(True)
        
        # Repopula anos
        self.populate_years()
        
        # Ajusta tamanho da janela
        self.adjustSize()
        QTimer.singleShot(10, self.force_resize)

    def on_start_year_changed(self, year_text):
        """Callback para mudan√ßa do ano inicial"""
        try:
            print(f"üîß DEBUG on_start_year_changed: year_text='{year_text}'")
            
            if year_text and year_text.strip():
                self.start_year = int(year_text)
                print(f"üîß DEBUG on_start_year_changed: start_year definido como {self.start_year}")
                # CORRE√á√ÉO: Valida imediatamente para feedback r√°pido
                if not self.validate_year_range():
                    # Se ano inv√°lido, a fun√ß√£o validate_year_range j√° resetou
                    return
            else:
                self.start_year = None
                print(f"üîß DEBUG on_start_year_changed: start_year definido como None")
            
            self.update_prodes_notes()
            
            # CORRE√á√ÉO: Prote√ß√£o adicional
            try:
                self.update_navigation_buttons()
            except Exception as nav_error:
                print(f"‚ö†Ô∏è WARNING on_start_year_changed navigation error: {str(nav_error)}")
                
        except Exception as e:
            print(f"‚ùå ERROR on_start_year_changed: {str(e)}")
            self.start_year = None

    def on_end_year_changed(self, year_text):
        """Callback para mudan√ßa do ano final"""
        try:
            print(f"üîß DEBUG on_end_year_changed: year_text='{year_text}'")
            
            if year_text and year_text.strip():
                self.end_year = int(year_text)
                print(f"üîß DEBUG on_end_year_changed: end_year definido como {self.end_year}")
                # CORRE√á√ÉO: Valida imediatamente para feedback r√°pido
                if not self.validate_year_range():
                    # Se ano inv√°lido, a fun√ß√£o validate_year_range j√° resetou
                    return
            else:
                self.end_year = None
                print(f"üîß DEBUG on_end_year_changed: end_year definido como None")
            
            self.update_prodes_notes()
            
            # CORRE√á√ÉO: Prote√ß√£o adicional
            try:
                self.update_navigation_buttons()
            except Exception as nav_error:
                print(f"‚ö†Ô∏è WARNING on_end_year_changed navigation error: {str(nav_error)}")
                
        except Exception as e:
            print(f"‚ùå ERROR on_end_year_changed: {str(e)}")
            self.end_year = None

    def validate_year_range(self):
        """Valida o intervalo de anos selecionado"""
        try:
            if (hasattr(self, 'data_type') and self.data_type == "incremental" and 
                hasattr(self, 'start_year') and self.start_year and 
                hasattr(self, 'end_year') and self.end_year and 
                self.start_year > self.end_year):
                
                # CORRE√á√ÉO: Preenchimento autom√°tico ao inv√©s de reset
                print(f"‚ö†Ô∏è WARNING: Ano inv√°lido detectado - start: {self.start_year}, end: {self.end_year}")
                
                # CORRE√á√ÉO: Estrat√©gia inteligente - detecta qual foi alterado
                import inspect
                caller_frame = inspect.currentframe().f_back
                caller_name = caller_frame.f_code.co_name if caller_frame else ""
                
                if "start_year" in caller_name:
                    # Foi alterado o ano inicial, ajusta o ano final para ser igual
                    print(f"üîß DEBUG: Ano inicial alterado, ajustando ano final para {self.start_year}")
                    if hasattr(self, 'end_year_combo'):
                        self.end_year_combo.setCurrentText(str(self.start_year))
                        self.end_year = self.start_year
                    self.update_notes(f"‚úÖ Ano final ajustado automaticamente para {self.start_year}")
                else:
                    # Foi alterado o ano final, mant√©m o final e ajusta o inicial se necess√°rio
                    print(f"üîß DEBUG: Ano final alterado para valor menor, ajustando para {self.start_year}")
                    if hasattr(self, 'end_year_combo'):
                        self.end_year_combo.setCurrentText(str(self.start_year))
                        self.end_year = self.start_year
                    self.update_notes(f"‚úÖ Ano final ajustado automaticamente para {self.start_year}")
                
                return True  # CORRE√á√ÉO: Retorna True porque corrigiu automaticamente
            
            return True
        except Exception as e:
            print(f"‚ùå ERROR validate_year_range: {str(e)}")
            return True  # Em caso de erro, n√£o bloqueia

    def update_prodes_notes(self):
        """Atualiza as notas com informa√ß√µes do PRODES - SISTEMA SIMPLIFICADO"""
        if self.current_step != 2 or self.selected_theme != "PRODES":
            return
        
        # Apenas informa√ß√µes espec√≠ficas da etapa 2 - n√£o repete config da etapa 1
        status_parts = []
        
        # Informa√ß√µes temporais (apenas tipo de dados)
        if hasattr(self, 'data_type') and self.data_type:
            type_text = "Incremental" if self.data_type == "incremental" else "Acumulado"
            status_parts.append(f"üìà Tipo: {type_text}")
        
        # Informa√ß√µes de anos
        if hasattr(self, 'data_type') and self.data_type:
            if self.data_type == "incremental":
                if (hasattr(self, 'start_year') and self.start_year and 
                    hasattr(self, 'end_year') and self.end_year):
                    status_parts.append(f"üóìÔ∏è Per√≠odo: {self.start_year} - {self.end_year}")
            elif self.data_type == "acumulado":
                if hasattr(self, 'end_year') and self.end_year:
                    base_year = self.prodes_base_years.get(self.selected_biome, 2000)
                    status_parts.append(f"üóìÔ∏è Per√≠odo: {base_year} - {self.end_year} (acumulado)")
        
        # Atualiza apenas a linha de status (n√£o toda a configura√ß√£o)
        if status_parts:
            self.update_notes(" | ".join(status_parts), "status")
        else:
            self.update_notes("üí° Configure o tipo e per√≠odo PRODES", "status")

    def get_ibge_shapefile_name(self):
        """Busca dinamicamente o nome do shapefile IBGE na pasta shapefile (sem extens√£o)"""
        shapefile_dir = os.path.join(os.path.dirname(__file__), 'shapefile')
        
        if not os.path.exists(shapefile_dir):
            print(f"‚ùå Diret√≥rio shapefile n√£o encontrado: {shapefile_dir}")
            return "shapefile_not_found"
        
        # Busca por arquivos .shp na pasta
        shp_files = [f for f in os.listdir(shapefile_dir) if f.endswith('.shp')]
        
        if not shp_files:
            print(f"‚ùå Nenhum arquivo .shp encontrado em: {shapefile_dir}")
            return "no_shapefile_found"
        
        # Usa o primeiro arquivo .shp encontrado (sem extens√£o)
        shapefile_name = shp_files[0][:-4]  # Remove .shp
        print(f"‚úÖ Shapefile IBGE encontrado: {shapefile_name}.shp")
        return shapefile_name

    def load_ibge_shapefile(self):
        """Carrega o shapefile IBGE dos limites"""
        try:
            if os.path.exists(self.ibge_shapefile_path):
                self.ibge_layer = QgsVectorLayer(self.ibge_shapefile_path, "IBGE_Limites", "ogr")
                if self.ibge_layer.isValid():
                    print(f"‚úÖ Shapefile IBGE carregado: {self.ibge_layer.featureCount()} fei√ß√µes")
                    return True
                else:
                    print(f"‚ùå Shapefile IBGE inv√°lido: {self.ibge_shapefile_path}")
                    return False
            else:
                print(f"‚ùå Shapefile IBGE n√£o encontrado: {self.ibge_shapefile_path}")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao carregar shapefile IBGE: {str(e)}")
            return False



    def populate_states_combo(self, biome_region):
        """Popula o combo de estados baseado na sele√ß√£o de bioma/regi√£o"""
        self.ibge_state_combo.clear()
        self.ibge_state_combo.addItem("")
        
        if not self.ibge_layer:
            return
        
        # Determina filtro baseado na sele√ß√£o
        if biome_region == 'Amaz√¥nia Legal':
            expression = f'"regiao" = \'Amaz√¥nia Legal\''
        else:
            expression = f'"bioma" = \'{biome_region}\''
        
        # Aplica filtro e obt√©m estados √∫nicos
        request = QgsFeatureRequest().setFilterExpression(expression)
        states = set()
        
        for feature in self.ibge_layer.getFeatures(request):
            state = feature['estado']
            if state:
                states.add(state)
        
        # Adiciona estados ordenados ao combo
        for state in sorted(states):
            self.ibge_state_combo.addItem(state)

    def on_ibge_state_changed(self, selection):
        """Callback para mudan√ßa de estado - popula lista de munic√≠pios"""
        self.ibge_state = selection
        
        if selection:
            # Popula munic√≠pios baseado na sele√ß√£o (usa self.selected_biome j√° definido)
            self.populate_municipalities_combo(self.selected_biome, selection)
            self.ibge_municipality_label.setVisible(True)
            self.ibge_municipality_combo.setVisible(True)
            
            # Limpa sele√ß√£o de munic√≠pio
            self.ibge_municipality = None
        else:
            # Oculta campo de munic√≠pio
            self.ibge_municipality_label.setVisible(False)
            self.ibge_municipality_combo.setVisible(False)
            self.ibge_state = None
            self.ibge_municipality = None
        
        self.update_comprehensive_notes()
        self.adjustSize()

    def populate_municipalities_combo(self, biome_region, state):
        """Popula o combo de munic√≠pios baseado na sele√ß√£o de bioma/regi√£o e estado"""
        self.ibge_municipality_combo.clear()
        self.ibge_municipality_combo.addItem("")
        
        if not self.ibge_layer:
            return
        
        # Constr√≥i filtro combinado
        if biome_region == 'Amaz√¥nia Legal':
            expression = f'"regiao" = \'Amaz√¥nia Legal\' AND "estado" = \'{state}\''
        else:
            expression = f'"bioma" = \'{biome_region}\' AND "estado" = \'{state}\''
        
        # Aplica filtro e obt√©m munic√≠pios √∫nicos
        request = QgsFeatureRequest().setFilterExpression(expression)
        municipalities = set()
        
        for feature in self.ibge_layer.getFeatures(request):
            municipality = feature['nome']
            if municipality:
                municipalities.add(municipality)
        
        # Adiciona munic√≠pios ordenados ao combo
        for municipality in sorted(municipalities):
            self.ibge_municipality_combo.addItem(municipality)

    def on_ibge_municipality_changed(self, selection):
        """Callback para mudan√ßa de munic√≠pio"""
        self.ibge_municipality = selection
        self.update_comprehensive_notes()

    def get_ibge_cut_layer(self):
        """Obt√©m a camada de corte baseada na sele√ß√£o IBGE"""
        if not self.ibge_layer:
            return None
        
        # Constr√≥i filtro baseado na sele√ß√£o hier√°rquica
        filters = []
        
        # Filtro por bioma/regi√£o
        if self.ibge_biome_region:
            if self.ibge_biome_region == 'Amaz√¥nia Legal':
                filters.append(f'"regiao" = \'Amaz√¥nia Legal\'')
            else:
                filters.append(f'"bioma" = \'{self.ibge_biome_region}\'')
        
        # Filtro por estado
        if self.ibge_state:
            filters.append(f'"estado" = \'{self.ibge_state}\'')
        
        # Filtro por munic√≠pio (se selecionado)
        if self.ibge_municipality:
            filters.append(f'"nome" = \'{self.ibge_municipality}\'')
        
        if not filters:
            return None
        
        # Aplica filtros
        expression = ' AND '.join(filters)
        request = QgsFeatureRequest().setFilterExpression(expression)
        
        # Cria nova camada com as fei√ß√µes filtradas
        filtered_layer = QgsVectorLayer(f"Polygon?crs={self.ibge_layer.crs().authid()}", "IBGE_Filtered", "memory")
        provider = filtered_layer.dataProvider()
        provider.addAttributes(self.ibge_layer.fields())
        filtered_layer.updateFields()
        
        # Adiciona fei√ß√µes filtradas
        features = []
        for feature in self.ibge_layer.getFeatures(request):
            features.append(feature)
        
        provider.addFeatures(features)
        
        if not self.ibge_municipality and self.ibge_state:
            # Se n√£o selecionou munic√≠pio, dissolve por estado
            dissolved_layer = self.dissolve_layer(filtered_layer, 'estado')
            return dissolved_layer if dissolved_layer else filtered_layer
        
        return filtered_layer

    def dissolve_layer(self, layer, field):
        """Dissolve uma camada por um campo espec√≠fico"""
        try:
            from qgis.analysis import QgsNativeAlgorithms
            import processing
            
            # Configura par√¢metros para dissolu√ß√£o
            params = {
                'INPUT': layer,
                'FIELD': [field],
                'OUTPUT': 'memory:'
            }
            
            # Executa algoritmo de dissolu√ß√£o
            result = processing.run("native:dissolve", params)
            dissolved_layer = result['OUTPUT']
            
            if dissolved_layer and dissolved_layer.isValid():
                original_count = layer.featureCount()
                dissolved_count = dissolved_layer.featureCount()
                
                # NOVO: Registra processamento de dissolve
                if dissolved_count < original_count:
                    reduction_count = original_count - dissolved_count
                    reduction_percent = (reduction_count / original_count) * 100
                    self.add_processing_log(
                        f"DISSOLU√á√ÉO POR CAMPO '{field}'",
                        f"{original_count} fei√ß√µes ‚Üí {dissolved_count} fei√ß√µes dissolvidas (uni√£o de {reduction_count} pol√≠gonos - {reduction_percent:.1f}% redu√ß√£o)"
                    )
                else:
                    self.add_processing_log(
                        f"DISSOLU√á√ÉO POR CAMPO '{field}'",
                        f"{original_count} fei√ß√µes analisadas ‚Üí {dissolved_count} fei√ß√µes (nenhum pol√≠gono foi unido)"
                    )
            
            return dissolved_layer
        except Exception as e:
            print(f"‚ùå Erro ao dissolver camada: {str(e)}")
            return None
    def dissolve_queimadas_layer(self, layer):
        """Dissolve √°reas queimadas com tratamento de sobreposi√ß√µes"""
        try:
            import processing
            
            print(f"üî• DEBUG: Aplicando dissolve em √°reas queimadas...")
            original_count = layer.featureCount()
            
            # ETAPA 1: Buffer 0 para limpar sobreposi√ß√µes
            print(f"üî• DEBUG: Limpando sobreposi√ß√µes com buffer 0...")
            clean_params = {
                'INPUT': layer,
                'DISTANCE': 0,
                'OUTPUT': 'memory:'
            }
            
            clean_result = processing.run("native:buffer", clean_params)
            clean_layer = clean_result['OUTPUT']
            
            if not clean_layer or not clean_layer.isValid():
                print(f"‚ùå DEBUG: Buffer 0 falhou")
                return None
            
            # ETAPA 2: Dissolve completo (une TODAS as geometrias adjacentes)
            print(f"üî• DEBUG: Aplicando dissolve completo...")
            dissolve_params = {
                'INPUT': clean_layer,
                'FIELD': [],  # Sem campo = dissolve tudo
                'OUTPUT': 'memory:'
            }
            
            result = processing.run("native:dissolve", dissolve_params)
            dissolved_layer = result['OUTPUT']
            
            if dissolved_layer and dissolved_layer.isValid():
                dissolved_count = dissolved_layer.featureCount()
                
                print(f"‚úÖ DEBUG: Dissolve conclu√≠do: {original_count} ‚Üí {dissolved_count} fei√ß√µes")
                
                # LOGS REMOVIDOS: Evita duplica√ß√£o com o novo log otimizado
                # O log detalhado agora √© feito na fun√ß√£o queimadas_step_dissolve_after_cut
                
                dissolved_layer.setName(f"{layer.name()}_dissolved")
                return dissolved_layer
            else:
                print(f"‚ùå DEBUG: Dissolve retornou layer inv√°lida")
                return None
            
        except Exception as e:
            print(f"‚ùå ERROR dissolve_queimadas_layer: {str(e)}")
            # LOGS REMOVIDOS: Evita duplica√ß√£o com o novo log otimizado
            # O log detalhado de erro agora √© feito na fun√ß√£o queimadas_step_dissolve_after_cut
            return None
    # =====================================
    # FUN√á√ïES DETER
    # =====================================

    def populate_deter_years(self):
        """Popula os combos de anos baseado no bioma DETER selecionado"""
        if not self.selected_biome or self.selected_biome not in self.deter_start_dates:
            print(f"üîß DEBUG: Bioma n√£o encontrado nas datas DETER: {self.selected_biome}")
            return
        
        from datetime import datetime
        
        # Data de in√≠cio baseada no bioma
        start_date_str = self.deter_start_dates[self.selected_biome]
        start_year = int(start_date_str.split('-')[0])
        
        # Ano atual
        current_year = datetime.now().year
        
        # Gera lista de anos - do ano de in√≠cio at√© o ano atual (incluindo o atual)
        available_years = list(range(start_year, current_year + 1))
        print(f"üîß DEBUG DETER: Anos dispon√≠veis para {self.selected_biome}: {start_year} - {current_year}")
        
        # Limpa combos
        self.deter_start_year_combo.clear()
        self.deter_end_year_combo.clear()
        
        # Adiciona anos dispon√≠veis (SEM op√ß√£o vazia)
        for year in available_years:
            self.deter_start_year_combo.addItem(str(year))
            self.deter_end_year_combo.addItem(str(year))
        
        # Define valores padr√£o: primeiro ano e ano atual
        if len(available_years) >= 1:
            # Primeiro ano dispon√≠vel e √∫ltimo ano
            first_year = available_years[0]
            last_year = available_years[-1]
            
            self.deter_start_year_combo.setCurrentText(str(first_year))
            self.deter_end_year_combo.setCurrentText(str(last_year))
            
            # Define vari√°veis
            self.deter_start_year = first_year
            self.deter_end_year = last_year
            
            print(f"üîß DEBUG DETER: Valores padr√£o definidos: {first_year} - {last_year}")

    def populate_deter_classes(self):
        """Popula as classes DETER baseado no bioma selecionado"""
        if not self.selected_biome or self.selected_biome not in self.deter_classes:
            print(f"üîß DEBUG: Bioma n√£o encontrado nas classes DETER: {self.selected_biome}")
            return
        
        print(f"üîß DEBUG DETER: Populando classes para {self.selected_biome}")
        
        # Limpa checkboxes anteriores se existirem
        if hasattr(self, 'deter_classes_checkboxes'):
            for checkbox in self.deter_classes_checkboxes.values():
                try:
                    checkbox.setParent(None)
                    checkbox.deleteLater()
                except:
                    pass
        
        # Inicializa dicion√°rio
        self.deter_classes_checkboxes = {}
        
        # Classes dispon√≠veis para o bioma
        available_classes = self.deter_classes[self.selected_biome]
        print(f"üîß DEBUG DETER: Classes dispon√≠veis: {available_classes}")
        
        # Cria checkboxes para cada classe - BLOQUEANDO SINAIS durante cria√ß√£o
        for class_name in available_classes:
            checkbox = QCheckBox(class_name)
            checkbox.blockSignals(True)  # BLOQUEIA sinais durante inicializa√ß√£o
            checkbox.setChecked(True)  # Marca todas por padr√£o
            
            self.deter_classes_checkboxes[class_name] = checkbox
            self.deter_classes_layout.addWidget(checkbox)
            print(f"üîß DEBUG DETER: Checkbox criado para {class_name}")
        
        # Atualiza lista de classes selecionadas - SEMPRE UMA LISTA
        self.deter_selected_classes = list(available_classes) if available_classes else []
        print(f"üîß DEBUG DETER: deter_selected_classes inicializada como: {self.deter_selected_classes}")
        
        # AGORA conecta os sinais e reativa ap√≥s TODA a inicializa√ß√£o
        for class_name, checkbox in self.deter_classes_checkboxes.items():
            checkbox.blockSignals(False)  # REATIVA sinais
            checkbox.stateChanged.connect(self.on_deter_class_changed)
            print(f"üîß DEBUG DETER: Signal conectado para {class_name}")
        
        # Mostra informa√ß√£o espec√≠fica do bioma
        if self.selected_biome == 'Cerrado':
            info_label = QLabel("‚ÑπÔ∏è Cerrado possui apenas a classe DESMATAMENTO_CR")
            info_label.setStyleSheet("color: #666666; font-style: italic;")
            self.deter_classes_layout.addWidget(info_label)

    def on_deter_start_year_changed(self, year_text):
        """Callback para mudan√ßa do ano inicial DETER"""
        try:
            print(f"üîß DEBUG on_deter_start_year_changed: year_text='{year_text}'")
            
            if year_text and year_text.strip():
                self.deter_start_year = int(year_text)
                print(f"üîß DEBUG on_deter_start_year_changed: start_year definido como {self.deter_start_year}")
                # Valida imediatamente para feedback r√°pido
                if not self.validate_deter_year_range():
                    return
            else:
                self.deter_start_year = None
                print(f"üîß DEBUG on_deter_start_year_changed: start_year definido como None")
            
            self.update_deter_notes()
            
            # Prote√ß√£o adicional
            try:
                self.update_navigation_buttons()
            except Exception as nav_error:
                print(f"‚ö†Ô∏è WARNING on_deter_start_year_changed navigation error: {str(nav_error)}")
                
        except Exception as e:
            print(f"‚ùå ERROR on_deter_start_year_changed: {str(e)}")
            self.deter_start_year = None

    def on_deter_end_year_changed(self, year_text):
        """Callback para mudan√ßa do ano final DETER"""
        try:
            print(f"üîß DEBUG on_deter_end_year_changed: year_text='{year_text}'")
            
            if year_text and year_text.strip():
                self.deter_end_year = int(year_text)
                print(f"üîß DEBUG on_deter_end_year_changed: end_year definido como {self.deter_end_year}")
                # Valida imediatamente para feedback r√°pido
                if not self.validate_deter_year_range():
                    return
            else:
                self.deter_end_year = None
                print(f"üîß DEBUG on_deter_end_year_changed: end_year definido como None")
            
            self.update_deter_notes()
            
            # Prote√ß√£o adicional
            try:
                self.update_navigation_buttons()
            except Exception as nav_error:
                print(f"‚ö†Ô∏è WARNING on_deter_end_year_changed navigation error: {str(nav_error)}")
                
        except Exception as e:
            print(f"‚ùå ERROR on_deter_end_year_changed: {str(e)}")
            self.deter_end_year = None

    def validate_deter_year_range(self):
        """Valida o intervalo de anos DETER selecionado"""
        try:
            if (hasattr(self, 'deter_start_year') and self.deter_start_year and 
                hasattr(self, 'deter_end_year') and self.deter_end_year and 
                self.deter_start_year > self.deter_end_year):
                
                # Preenchimento autom√°tico ao inv√©s de reset
                print(f"‚ö†Ô∏è WARNING: Ano inv√°lido detectado - start: {self.deter_start_year}, end: {self.deter_end_year}")
                
                # Estrat√©gia inteligente - detecta qual foi alterado
                import inspect
                caller_frame = inspect.currentframe().f_back
                caller_name = caller_frame.f_code.co_name if caller_frame else ""
                
                if "deter_start_year" in caller_name:
                    # Foi alterado o ano inicial, ajusta o ano final para ser igual
                    print(f"üîß DEBUG: Ano inicial alterado, ajustando ano final para {self.deter_start_year}")
                    if hasattr(self, 'deter_end_year_combo'):
                        self.deter_end_year_combo.setCurrentText(str(self.deter_start_year))
                        self.deter_end_year = self.deter_start_year
                    self.update_notes(f"‚úÖ Ano final ajustado automaticamente para {self.deter_start_year}")
                else:
                    # Foi alterado o ano final, mant√©m o final e ajusta o inicial se necess√°rio
                    print(f"üîß DEBUG: Ano final alterado para valor menor, ajustando para {self.deter_start_year}")
                    if hasattr(self, 'deter_end_year_combo'):
                        self.deter_end_year_combo.setCurrentText(str(self.deter_start_year))
                        self.deter_end_year = self.deter_start_year
                    self.update_notes(f"‚úÖ Ano final ajustado automaticamente para {self.deter_start_year}")
                
                return False  # Retorna False para indicar que houve corre√ß√£o
            
            return True
        except Exception as e:
            print(f"‚ùå ERROR validate_deter_year_range: {str(e)}")
            return True  # Em caso de erro, n√£o bloqueia

    def on_deter_class_changed(self):
        """Callback para mudan√ßa das classes DETER selecionadas"""
        try:
            # Inicializa como lista vazia
            self.deter_selected_classes = []
            
            if hasattr(self, 'deter_classes_checkboxes'):
                for class_name, checkbox in self.deter_classes_checkboxes.items():
                    if checkbox.isChecked():
                        self.deter_selected_classes.append(class_name)
            
            print(f"üîß DEBUG DETER: Classes selecionadas: {self.deter_selected_classes}")
            
            # Verifica√ß√£o inteligente baseada no bioma
            if self.selected_biome and self.selected_biome in self.deter_classes:
                available_classes = self.deter_classes[self.selected_biome]
                total_available = len(available_classes)
                total_selected = len(self.deter_selected_classes)
                
                if total_selected == 0:
                    print("‚ùå ERRO: Classes DETER n√£o foram selecionadas!")
                elif total_selected == total_available:
                    print(f"‚úÖ INFO: Todas as {total_selected} classes selecionadas - download SEM filtro de classes")
                else:
                    print(f"‚úÖ INFO: {total_selected}/{total_available} classes selecionadas - download COM filtro de classes")
            
            self.update_deter_notes()
            self.update_navigation_buttons()
        except Exception as e:
            print(f"‚ùå ERROR on_deter_class_changed: {str(e)}")
            # Garante que deter_selected_classes seja sempre uma lista em caso de erro
            self.deter_selected_classes = []

    # =====================================
    # FUN√á√ïES √ÅREA QUEIMADA
    # =====================================
    
    def generate_queimadas_months(self):
        """Gera lista de meses dispon√≠veis dinamicamente (09/2002 at√© m√™s atual -1)"""
        try:
            import datetime
            
            # Data atual
            now = datetime.datetime.now()
            
            # M√™s anterior (atual -1)
            if now.month == 1:
                end_year = now.year - 1
                end_month = 12
            else:
                end_year = now.year
                end_month = now.month - 1
            
            # Lista de meses no formato YYYY_MM_01
            months = []
            
            # Come√ßar em setembro de 2002
            year = 2002
            month = 9
            
            while year < end_year or (year == end_year and month <= end_month):
                month_str = f"{year:04d}_{month:02d}_01"
                months.append(month_str)
                
                # Pr√≥ximo m√™s
                month += 1
                if month > 12:
                    month = 1
                    year += 1
            
            print(f"üî• DEBUG: {len(months)} meses de √°rea queimada dispon√≠veis (2002-09 at√© {end_year:04d}-{end_month:02d})")
            return months
            
        except Exception as e:
            print(f"‚ùå ERROR generate_queimadas_months: {str(e)}")
            return []
    
    def create_queimadas_step2_content(self):
        """Cria o conte√∫do espec√≠fico para configura√ß√£o √ÅREA QUEIMADA"""
        
        # Campo 1: Tipo de Dados
        data_type_group = QGroupBox("1. Tipo de Dados")
        data_type_layout = QVBoxLayout()
        
        self.queimadas_data_type_button_group = QButtonGroup()
        
        self.radio_queimadas_anual = QRadioButton("Anual (dados do ano unidos e dissolvidos)")
        self.radio_queimadas_anual.setToolTip("Baixa todos os meses do ano selecionado e os une em um √∫nico arquivo")
        self.radio_queimadas_anual.setChecked(True)  # Padr√£o anual
        
        self.radio_queimadas_mensal = QRadioButton("Mensal (dados originais)")
        self.radio_queimadas_mensal.setToolTip("Baixa arquivos mensais individuais para o per√≠odo selecionado")
        
        self.queimadas_data_type_button_group.addButton(self.radio_queimadas_anual, 0)
        self.queimadas_data_type_button_group.addButton(self.radio_queimadas_mensal, 1)
        self.queimadas_data_type_button_group.buttonClicked.connect(self.on_queimadas_data_type_changed)
        
        data_type_layout.addWidget(self.radio_queimadas_anual)
        data_type_layout.addWidget(self.radio_queimadas_mensal)
        data_type_group.setLayout(data_type_layout)
        self.content_layout.addWidget(data_type_group)
        
        # Campo 2: Sele√ß√£o de Per√≠odo
        self.queimadas_period_group = QGroupBox("2. M√™s/Ano")
        period_layout = QVBoxLayout()
        
        # Container para sele√ß√£o de ano (modo anual)
        self.queimadas_year_widget = QWidget()
        year_layout = QHBoxLayout(self.queimadas_year_widget)
        year_layout.setContentsMargins(0, 0, 0, 0)
        
        year_label = QLabel("Ano:")
        self.queimadas_year_combo = QComboBox()
        self.queimadas_year_combo.currentTextChanged.connect(self.on_queimadas_year_changed)
        
        year_layout.addWidget(year_label)
        year_layout.addWidget(self.queimadas_year_combo)
        year_layout.addStretch()
        
        # Container para sele√ß√£o de per√≠odo mensal (SIMPLIFICADO - apenas 1 m√™s)
        self.queimadas_month_widget = QWidget()
        month_layout = QHBoxLayout(self.queimadas_month_widget)
        month_layout.setContentsMargins(0, 0, 0, 0)
        
        month_label = QLabel("M√™s/Ano:")
        self.queimadas_month_combo = QComboBox()
        self.queimadas_month_combo.currentTextChanged.connect(self.on_queimadas_month_changed)
        
        month_layout.addWidget(month_label)
        month_layout.addWidget(self.queimadas_month_combo)
        month_layout.addStretch()
        
        period_layout.addWidget(self.queimadas_year_widget)
        period_layout.addWidget(self.queimadas_month_widget)
        
        self.queimadas_period_group.setLayout(period_layout)
        self.content_layout.addWidget(self.queimadas_period_group)
        
        # Inicializa valores padr√£o
        self.queimadas_data_type = "anual"
        self.queimadas_year = None
        self.queimadas_month = None  # SIMPLIFICADO - apenas 1 m√™s
        
        # Popula combos
        self.populate_queimadas_years()
        self.populate_queimadas_months()
        
        # Atualiza interface inicial
        self.update_queimadas_interface()
        self.update_queimadas_notes()
    
    def populate_queimadas_years(self):
        """Popula combo de anos para modo anual"""
        self.queimadas_year_combo.clear()
        self.queimadas_year_combo.addItem("")
        
        for year in self.queimadas_years:
            self.queimadas_year_combo.addItem(str(year))
        
        # Define valor padr√£o (ano mais recente)
        if self.queimadas_years:
            self.queimadas_year_combo.setCurrentText(str(self.queimadas_years[-1]))
    
    def populate_queimadas_months(self):
        """Popula combo de meses para modo mensal (SIMPLIFICADO - apenas 1 m√™s)"""
        self.queimadas_month_combo.clear()
        self.queimadas_month_combo.addItem("")
        
        # Formata meses para exibi√ß√£o mais amig√°vel
        for month_str in self.queimadas_months:
            # Converte YYYY_MM_01 para MM/YYYY
            year, month, _ = month_str.split('_')
            display_text = f"{month}/{year}"
            
            self.queimadas_month_combo.addItem(display_text, month_str)
        
        # Define valor padr√£o (√∫ltimo m√™s dispon√≠vel)
        if self.queimadas_months:
            last_month = self.queimadas_months[-1]
            year, month, _ = last_month.split('_')
            last_display = f"{month}/{year}"
            self.queimadas_month_combo.setCurrentText(last_display)
    
    def on_queimadas_data_type_changed(self, button):
        """Callback para mudan√ßa do tipo de dados √ÅREA QUEIMADA"""
        option_id = self.queimadas_data_type_button_group.id(button)
        if option_id == 0:
            self.queimadas_data_type = "anual"
        elif option_id == 1:
            self.queimadas_data_type = "mensal"
        
        self.update_queimadas_interface()
        self.update_queimadas_notes()
        self.update_navigation_buttons()
    
    def update_queimadas_interface(self):
        """Atualiza interface baseada no tipo de dados selecionado"""
        if self.queimadas_data_type == "anual":
            self.queimadas_year_widget.setVisible(True)
            self.queimadas_month_widget.setVisible(False)
        else:  # mensal
            self.queimadas_year_widget.setVisible(False)
            self.queimadas_month_widget.setVisible(True)
    
    def on_queimadas_year_changed(self, year_text):
        """Callback para mudan√ßa do ano (modo anual)"""
        if year_text and year_text.strip():
            try:
                self.queimadas_year = int(year_text)
                print(f"üî• DEBUG: Ano selecionado: {self.queimadas_year}")
            except ValueError:
                self.queimadas_year = None
        else:
            self.queimadas_year = None
            
        self.update_queimadas_notes()
        self.update_navigation_buttons()
    
    def on_queimadas_month_changed(self, month_text):
        """Callback para mudan√ßa do m√™s (modo mensal simplificado)"""
        if month_text and month_text.strip():
            # Encontra o valor interno correspondente
            index = self.queimadas_month_combo.currentIndex()
            if index > 0:  # Ignora item vazio
                self.queimadas_month = self.queimadas_month_combo.itemData(index)
                print(f"üî• DEBUG: M√™s selecionado: {self.queimadas_month} ({month_text})")
            else:
                self.queimadas_month = None
        else:
            self.queimadas_month = None
            
        self.update_queimadas_notes()
        self.update_navigation_buttons()
    
    def update_queimadas_notes(self):
        """Atualiza as notas espec√≠ficas para √ÅREA QUEIMADA"""
        try:
            notes_parts = [f"üìä Tema: √ÅREA QUEIMADA", f"üåø Bioma: {self.selected_biome}"]
            
            if hasattr(self, 'queimadas_data_type') and self.queimadas_data_type:
                type_text = "Anual (dissolvido)" if self.queimadas_data_type == "anual" else "Mensal (original)"
                notes_parts.append(f"üìà Tipo: {type_text}")
            
            # Informa√ß√µes de per√≠odo
            if self.queimadas_data_type == "anual" and hasattr(self, 'queimadas_year') and self.queimadas_year:
                notes_parts.append(f"üóìÔ∏è Ano: {self.queimadas_year}")
                # Calcula quantos meses ser√£o baixados
                months_count = len([m for m in self.queimadas_months if m.startswith(f"{self.queimadas_year:04d}_")])
                if months_count > 0:
                    notes_parts.append(f"üìã Arquivos: {months_count} meses ser√£o unidos")
            elif self.queimadas_data_type == "mensal":
                if hasattr(self, 'queimadas_month') and self.queimadas_month:
                    # Formata para exibi√ß√£o
                    year, month, _ = self.queimadas_month.split('_')
                    notes_parts.append(f"üóìÔ∏è M√™s: {month}/{year}")
                    notes_parts.append(f"üìã Arquivos: 1 arquivo mensal")
            
            # Informa√ß√µes de limite espacial (√ÅREA QUEIMADA sempre corta por bioma)
            notes_parts.append(f"‚úÇÔ∏è Corte autom√°tico: Bioma {self.selected_biome}")
            
            # Se h√° corte adicional configurado, menciona tamb√©m
            if hasattr(self, 'cut_option') and self.cut_option is not None and self.cut_option != 0:
                if self.cut_option == 1 and hasattr(self, 'selected_layer') and self.selected_layer:
                    notes_parts.append(f"‚ûï Corte adicional: {self.selected_layer.name()}")
                elif self.cut_option == 2:
                    notes_parts.append("‚ûï Corte adicional: Ret√¢ngulo desenhado")
                elif self.cut_option == 3:
                    notes_parts.append("‚ûï Corte adicional: IBGE")
            
            if notes_parts:
                config_text = " | ".join(notes_parts)
                self.update_notes(config_text, "config")
            else:
                self.update_notes("üí° Configure o tipo e per√≠odo para √ÅREA QUEIMADA", "config")
                
        except Exception as e:
            print(f"‚ùå ERROR update_queimadas_notes: {str(e)}")
            self.update_notes("‚ö†Ô∏è Erro ao atualizar notas √ÅREA QUEIMADA", "error")
    
    def validate_queimadas_settings(self):
        """Valida se as configura√ß√µes √ÅREA QUEIMADA est√£o completas"""
        try:
            if not hasattr(self, 'queimadas_data_type') or not self.queimadas_data_type:
                return False
                
            if self.queimadas_data_type == "anual":
                return hasattr(self, 'queimadas_year') and self.queimadas_year is not None
            else:  # mensal
                return hasattr(self, 'queimadas_month') and self.queimadas_month
                        
        except Exception as e:
            print(f"‚ùå ERROR validate_queimadas_settings: {str(e)}")
            return False
    
    def process_queimadas_data(self):
        """Processa os dados √ÅREA QUEIMADA conforme configura√ß√µes"""
        try:
            print(f"üî• DEBUG: === INICIANDO PROCESSAMENTO √ÅREA QUEIMADA ===")
            
            # NOVO: Reseta log de processamentos para nova opera√ß√£o
            self.processing_log = []
            
            # CORRE√á√ÉO: Carrega shapefile IBGE para corte por bioma
            print(f"üî• DEBUG: Carregando shapefile IBGE para corte por bioma...")
            if not hasattr(self, 'ibge_layer') or not self.ibge_layer:
                success = self.load_ibge_shapefile()
                if not success:
                    print(f"‚ö†Ô∏è WARNING: Falha ao carregar shapefile IBGE - corte por bioma pode n√£o funcionar")
                else:
                    print(f"‚úÖ DEBUG: Shapefile IBGE carregado com sucesso: {self.ibge_layer.featureCount()} fei√ß√µes")
            else:
                print(f"‚úÖ DEBUG: Shapefile IBGE j√° carregado: {self.ibge_layer.featureCount()} fei√ß√µes")
            
            # Gera nome do arquivo baseado nas sele√ß√µes
            self.output_filename = self.generate_queimadas_output_filename()
            print(f"üìÅ DEBUG: Nome do arquivo √ÅREA QUEIMADA: {self.output_filename}")
            
            # Constr√≥i lista de URLs para download
            self.queimadas_download_info = self.build_queimadas_download_info()
            print(f"üåê DEBUG: Info de download √ÅREA QUEIMADA: {len(self.queimadas_download_info['urls'])} arquivos")
            
            # Inicia processamento REAL
            self.current_step_index = 0
            self.processing_layers = []  # Para armazenar layers baixadas
            
            # Etapa 1: Baixar arquivos ZIP
            self.queimadas_step_download_files()
            
        except Exception as e:
            print(f"‚ùå ERROR process_queimadas_data: {str(e)}")
            self.status_label.setText(f"‚ùå Erro no processamento √ÅREA QUEIMADA: {str(e)}")
            self.end_download_mode(success=False)
    
    def generate_queimadas_output_filename(self):
        """Gera nome do arquivo de sa√≠da para √ÅREA QUEIMADA"""
        try:
            # Componentes do nome
            theme = "area_queimada"
            biome = self.selected_biome.lower().replace(' ', '_').replace('√£', 'a').replace('√¥', 'o')
            
            # Per√≠odo baseado no tipo
            if self.queimadas_data_type == "anual":
                period = f"{self.queimadas_year}"
                data_type = "anual_dissolvido"
            else:  # mensal
                year, month, _ = self.queimadas_month.split('_')
                period = f"{year}{month}"
                data_type = "mensal_original"
            
            # Tipo de corte
            cut_name = self.get_cut_option_name()
            
            # Nome final
            filename = f"{theme}_{biome}_{period}_{data_type}_{cut_name}"
            
            # Limita tamanho do nome
            if len(filename) > 100:
                filename = f"{theme}_{biome}_{period}_{cut_name}"
            
            print(f"üìÅ DEBUG: Nome √ÅREA QUEIMADA gerado: {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå ERROR generate_queimadas_output_filename: {str(e)}")
            return f"area_queimada_{self.selected_biome.lower()}_{self.queimadas_data_type}"
    
    def build_queimadas_download_info(self):
        """Constr√≥i informa√ß√µes de download para √ÅREA QUEIMADA"""
        try:
            result = {
                'urls': [],
                'months': [],
                'data_type': self.queimadas_data_type
            }
            
            if self.queimadas_data_type == "anual":
                # Busca todos os meses do ano selecionado
                year_months = [m for m in self.queimadas_months if m.startswith(f"{self.queimadas_year:04d}_")]
                for month_str in year_months:
                    url = self.build_queimadas_url(month_str)
                    result['urls'].append(url)
                    result['months'].append(month_str)
                    
                print(f"üî• DEBUG: Ano {self.queimadas_year} - {len(year_months)} meses encontrados")
                    
            else:  # mensal (SIMPLIFICADO - apenas 1 m√™s)
                month_str = self.queimadas_month
                url = self.build_queimadas_url(month_str)
                result['urls'].append(url)
                result['months'].append(month_str)
                    
                print(f"üî• DEBUG: M√™s selecionado: {month_str}")
            
            if not result['urls']:
                raise Exception("Nenhum arquivo encontrado para o per√≠odo selecionado")
                
            return result
            
        except Exception as e:
            print(f"‚ùå ERROR build_queimadas_download_info: {str(e)}")
            return {'urls': [], 'months': [], 'data_type': self.queimadas_data_type}
    
    def build_queimadas_url(self, month_str):
        """Constr√≥i URL espec√≠fica baseada no m√™s (resolve problema v/V)"""
        try:
            # Extrai ano e m√™s do formato YYYY_MM_01
            year, month, day = month_str.split('_')
            year_int = int(year)
            month_int = int(month)
            
            # CORRE√á√ÉO: Define padr√£o v/V baseado na data
            # At√© agosto de 2020 (2020_08_01): usa 'v' min√∫sculo
            # A partir de setembro de 2020 (2020_09_01): usa 'V' mai√∫sculo
            if year_int < 2020 or (year_int == 2020 and month_int <= 8):
                version = "v6"  # min√∫sculo
            else:
                version = "V6"  # mai√∫sculo
            
            url = f"{self.queimadas_base_url}{month_str}_aq1km_{version}.zip"
            print(f"üî• DEBUG: URL constru√≠da: {url} (padr√£o: {version})")
            
            return url
            
        except Exception as e:
            print(f"‚ùå ERROR build_queimadas_url: {str(e)}")
            # Fallback para padr√£o antigo
            return f"{self.queimadas_base_url}{month_str}_aq1km_v6.zip"
    
    def queimadas_step_download_files(self):
        """Etapa 1: Baixa arquivos ZIP de √°rea queimada"""
        try:
            self.status_label.setText("üì• Baixando arquivos de √°rea queimada...")
            
            total_files = len(self.queimadas_download_info['urls'])
            print(f"üî• DEBUG: Iniciando download de {total_files} arquivos")
            print(f"üî• DEBUG: Salvando queimadas_download_info para metadados")
            
            # CORRE√á√ÉO: Cria vari√°vel para metadados com informa√ß√µes detalhadas
            # Esta vari√°vel ser√° usada na fun√ß√£o generate_metadata_file
            self.queimadas_download_info_metadata = {
                'urls': self.queimadas_download_info['urls'].copy(),
                'months': self.queimadas_download_info['months'].copy(),
                'base_url': self.queimadas_base_url,
                'data_type': self.queimadas_data_type,
                'year': getattr(self, 'queimadas_year', None),
                'month': getattr(self, 'queimadas_month', None)
            }
            
            self.queimadas_downloaded_files = []
            self.queimadas_current_file = 0
            
            # Inicia download do primeiro arquivo
            self.download_next_queimadas_file()
            
        except Exception as e:
            print(f"‚ùå ERROR queimadas_step_download_files: {str(e)}")
            self.status_label.setText(f"‚ùå Erro no download: {str(e)}")
            self.end_download_mode(success=False)
    
    def download_next_queimadas_file(self):
        """Baixa o pr√≥ximo arquivo da lista"""
        try:
            if self.queimadas_current_file >= len(self.queimadas_download_info['urls']):
                # Todos os arquivos baixados - pr√≥xima etapa
                print(f"‚úÖ DEBUG: Todos os {len(self.queimadas_downloaded_files)} arquivos baixados")
                QTimer.singleShot(1000, self.queimadas_step_extract_files)
                return
            
            url = self.queimadas_download_info['urls'][self.queimadas_current_file]
            month_str = self.queimadas_download_info['months'][self.queimadas_current_file]
            
            file_num = self.queimadas_current_file + 1
            total_files = len(self.queimadas_download_info['urls'])
            
            print(f"üî• DEBUG: Baixando arquivo {file_num}/{total_files}: {month_str}")
            self.status_label.setText(f"üì• Baixando √°rea queimada {file_num}/{total_files}: {month_str}")
            
            # Aplica verifica√ß√£o de abort
            if self.check_abort_signal():
                return
            
            # Inicia download ass√≠ncrono
            self.download_queimadas_zip(url, month_str)
            
        except Exception as e:
            print(f"‚ùå ERROR download_next_queimadas_file: {str(e)}")
            self.status_label.setText(f"‚ùå Erro no download: {str(e)}")
            self.end_download_mode(success=False)
    
    def download_queimadas_zip(self, url, month_str):
        """Baixa um arquivo ZIP espec√≠fico de √°rea queimada"""
        try:
            import os
            import tempfile
            from qgis.PyQt.QtNetwork import QNetworkRequest, QNetworkReply
            from qgis.PyQt.QtCore import QUrl
            
            # Arquivo tempor√°rio para download
            temp_dir = tempfile.gettempdir()
            zip_filename = f"{month_str}_aq1km_v6.zip"
            temp_zip_path = os.path.join(temp_dir, zip_filename)
            
            print(f"üî• DEBUG: Baixando de {url}")
            print(f"üî• DEBUG: Salvando em {temp_zip_path}")
            
            # Inicia download
            request = QNetworkRequest(QUrl(url))
            request.setRawHeader(b'User-Agent', b'QGIS DesagregaBiomasBR')
            
            reply = self.network_manager.get(request)
            
            # Conecta sinais para este download espec√≠fico
            reply.finished.connect(lambda: self.on_queimadas_zip_downloaded(reply, temp_zip_path, month_str))
            reply.errorOccurred.connect(lambda error: self.on_queimadas_download_error(error, month_str))
            
            # Armazena reply para poss√≠vel cancelamento
            self.current_queimadas_reply = reply
            
        except Exception as e:
            print(f"‚ùå ERROR download_queimadas_zip: {str(e)}")
            self.status_label.setText(f"‚ùå Erro no download {month_str}: {str(e)}")
            self.end_download_mode(success=False)
    
    def on_queimadas_zip_downloaded(self, reply, temp_zip_path, month_str):
        """Callback quando download do ZIP √© conclu√≠do"""
        try:
            if reply.error() == QNetworkReply.NoError:
                # Salva arquivo
                with open(temp_zip_path, 'wb') as f:
                    f.write(reply.readAll().data())
                
                file_size = os.path.getsize(temp_zip_path)
                print(f"‚úÖ DEBUG: Arquivo {month_str} baixado: {file_size} bytes")
                
                # Adiciona √† lista de arquivos baixados
                self.queimadas_downloaded_files.append({
                    'path': temp_zip_path,
                    'month': month_str
                })
                
                # Pr√≥ximo arquivo
                self.queimadas_current_file += 1
                QTimer.singleShot(500, self.download_next_queimadas_file)
                
            else:
                error_msg = reply.errorString()
                print(f"‚ùå DEBUG: Erro no download {month_str}: {error_msg}")
                self.status_label.setText(f"‚ùå Erro no download {month_str}: {error_msg}")
                self.end_download_mode(success=False)
            
            reply.deleteLater()
            
        except Exception as e:
            print(f"‚ùå ERROR on_queimadas_zip_downloaded: {str(e)}")
            self.status_label.setText(f"‚ùå Erro ao salvar {month_str}: {str(e)}")
            self.end_download_mode(success=False)
    
    def on_queimadas_download_error(self, error, month_str):
        """Callback para erro no download"""
        print(f"‚ùå DEBUG: Erro de rede {month_str}: {error}")
        self.status_label.setText(f"‚ùå Erro de rede {month_str}: {error}")
        self.end_download_mode(success=False)
    
    def queimadas_step_extract_files(self):
        """Etapa 2: Extrai arquivos ZIP e carrega shapefiles"""
        try:
            self.status_label.setText("üìÇ Extraindo arquivos de √°rea queimada...")
            
            total_files = len(self.queimadas_downloaded_files)
            print(f"üî• DEBUG: Extraindo {total_files} arquivos ZIP")
            
            self.queimadas_extracted_layers = []
            self.queimadas_current_extract = 0
            
            # Inicia extra√ß√£o do primeiro arquivo
            self.extract_next_queimadas_file()
            
        except Exception as e:
            print(f"‚ùå ERROR queimadas_step_extract_files: {str(e)}")
            self.status_label.setText(f"‚ùå Erro na extra√ß√£o: {str(e)}")
            self.end_download_mode(success=False)
    
    def extract_next_queimadas_file(self):
        """Extrai o pr√≥ximo arquivo ZIP e carrega o shapefile"""
        try:
            if self.queimadas_current_extract >= len(self.queimadas_downloaded_files):
                # Todos os arquivos extra√≠dos - pr√≥xima etapa
                print(f"‚úÖ DEBUG: Todas as {len(self.queimadas_extracted_layers)} layers carregadas")
                QTimer.singleShot(1000, self.queimadas_step_process_layers)
                return
            
            file_info = self.queimadas_downloaded_files[self.queimadas_current_extract]
            zip_path = file_info['path']
            month_str = file_info['month']
            
            file_num = self.queimadas_current_extract + 1
            total_files = len(self.queimadas_downloaded_files)
            
            print(f"üî• DEBUG: Extraindo arquivo {file_num}/{total_files}: {month_str}")
            self.status_label.setText(f"üìÇ Extraindo √°rea queimada {file_num}/{total_files}: {month_str}")
            
            # Aplica verifica√ß√£o de abort
            if self.check_abort_signal():
                return
            
            # Extrai ZIP e carrega shapefile
            layer = self.extract_and_load_queimadas_shapefile(zip_path, month_str)
            
            if layer and layer.isValid():
                self.queimadas_extracted_layers.append({
                    'layer': layer,
                    'month': month_str
                })
                print(f"‚úÖ DEBUG: Layer {month_str} carregada: {layer.featureCount()} fei√ß√µes")
            else:
                print(f"‚ö†Ô∏è DEBUG: Falha ao carregar layer {month_str}")
            
            # Pr√≥ximo arquivo
            self.queimadas_current_extract += 1
            QTimer.singleShot(500, self.extract_next_queimadas_file)
            
        except Exception as e:
            print(f"‚ùå ERROR extract_next_queimadas_file: {str(e)}")
            self.status_label.setText(f"‚ùå Erro na extra√ß√£o: {str(e)}")
            self.end_download_mode(success=False)
    
    def extract_and_load_queimadas_shapefile(self, zip_path, month_str):
        """Extrai ZIP e carrega o shapefile de √°rea queimada"""
        try:
            import zipfile
            import tempfile
            import os
            from qgis.core import QgsVectorLayer
            
            # Cria diret√≥rio tempor√°rio para extra√ß√£o
            extract_dir = os.path.join(tempfile.gettempdir(), f"queimadas_{month_str}")
            os.makedirs(extract_dir, exist_ok=True)
            
            # Extrai ZIP
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(extract_dir)
                extracted_files = zip_ref.namelist()
                print(f"üî• DEBUG: Extra√≠dos {len(extracted_files)} arquivos para {extract_dir}")
            
            # Procura arquivo .shp
            shp_file = None
            for file in extracted_files:
                if file.endswith('.shp'):
                    shp_file = os.path.join(extract_dir, file)
                    break
            
            if not shp_file or not os.path.exists(shp_file):
                print(f"‚ùå DEBUG: Arquivo .shp n√£o encontrado em {zip_path}")
                return None
            
            # Carrega shapefile
            layer = QgsVectorLayer(shp_file, f"area_queimada_{month_str}", "ogr")
            
            if layer.isValid():
                print(f"‚úÖ DEBUG: Shapefile {month_str} carregado: {layer.featureCount()} fei√ß√µes")
                return layer
            else:
                print(f"‚ùå DEBUG: Shapefile {month_str} inv√°lido")
                return None
                
        except Exception as e:
            print(f"‚ùå ERROR extract_and_load_queimadas_shapefile: {str(e)}")
            return None
    
    def queimadas_step_process_layers(self):
        """Etapa 3: Processa layers (merge para anual ou mant√©m mensal) - OTIMIZADO"""
        try:
            if self.queimadas_data_type == "anual":
                self.status_label.setText("üîÑ Unindo dados anuais de √°rea queimada...")
                print(f"üî• DEBUG: Modo anual - unindo {len(self.queimadas_extracted_layers)} layers")
                
                # Une todas as layers do ano (SEM dissolve ainda - ser√° feito ap√≥s corte)
                layers = [item['layer'] for item in self.queimadas_extracted_layers]
                merged_layer = self.merge_layers(layers)
                
                if merged_layer and merged_layer.isValid():
                    print(f"‚úÖ DEBUG: Layers anuais unidas: {merged_layer.featureCount()} fei√ß√µes")
                    self.processing_layers = [merged_layer]
                else:
                    raise Exception("Falha ao unir layers anuais")
                    
            else:  # mensal
                self.status_label.setText("üìã Processando dados mensais de √°rea queimada...")
                print(f"üî• DEBUG: Modo mensal - mantendo {len(self.queimadas_extracted_layers)} layers separadas")
                
                # Mant√©m layers separadas
                self.processing_layers = [item['layer'] for item in self.queimadas_extracted_layers]
            
            # CORTE AUTOM√ÅTICO POR BIOMA para √ÅREA QUEIMADA
            # Como os dados s√£o sempre do Brasil todo, aplicamos corte autom√°tico pelo bioma
            # OTIMIZA√á√ÉO: Dissolve ser√° aplicado AP√ìS o corte para maior efici√™ncia
            QTimer.singleShot(1000, self.queimadas_step_apply_biome_cut)
            
        except Exception as e:
            print(f"‚ùå ERROR queimadas_step_process_layers: {str(e)}")
            self.status_label.setText(f"‚ùå Erro no processamento: {str(e)}")
            self.end_download_mode(success=False)
    
    def queimadas_step_apply_biome_cut(self):
        """Etapa espec√≠fica para √ÅREA QUEIMADA: Aplica corte autom√°tico por bioma"""
        try:
            self.status_label.setText("‚úÇÔ∏è Aplicando corte por bioma...")
            
            # Lista fei√ß√µes originais antes do corte
            total_original = sum([layer.featureCount() for layer in self.processing_layers])
            
            # Cria layer de corte baseada no bioma selecionado
            cut_layer = self.get_queimadas_biome_cut_layer()
            
            if not cut_layer or not cut_layer.isValid():
                from qgis.core import QgsMessageLog, Qgis
                QgsMessageLog.logMessage(f"‚ùå FALHA: Corte por bioma n√£o funcionou para {self.selected_biome}", "DesagregaBiomasBR", Qgis.Warning)
                # Se n√£o conseguir cortar, continua com dados originais mas ainda prossegue
                QTimer.singleShot(1000, self.queimadas_check_additional_cut)
                return
            
            # Aplica corte em todas as layers de processamento
            cut_layers = []
            total_cut = 0
            
            for i, layer in enumerate(self.processing_layers):
                self.status_label.setText(f"‚úÇÔ∏è Preparando layer {i+1}/{len(self.processing_layers)} para corte...")
                
                # ETAPA 1: Corrigir geometrias inv√°lidas
                fixed_layer = self.auto_fix_geometries(layer, f"queimadas_{i}")
                
                if not fixed_layer or not fixed_layer.isValid():
                    fixed_layer = layer
                
                # ETAPA 2: Reprojetar para o mesmo CRS do shapefile IBGE
                target_crs = cut_layer.crs()
                
                if fixed_layer.crs().authid() != target_crs.authid():
                    reprojected_layer = self.reproject_layer(fixed_layer, target_crs)
                    
                    if not reprojected_layer or not reprojected_layer.isValid():
                        prepared_layer = fixed_layer
                    else:
                        prepared_layer = reprojected_layer
                else:
                    prepared_layer = fixed_layer
                
                # ETAPA 3: Aplicar corte espacial (sem registro individual - ser√° registrado em lote)
                self.status_label.setText(f"‚úÇÔ∏è Cortando layer {i+1}/{len(self.processing_layers)} por bioma...")
                
                # Temporariamente desativa registro para evitar duplica√ß√£o
                original_count = prepared_layer.featureCount()
                
                cut_result = self.clip_layer(prepared_layer, cut_layer, log_processing=False)
                
                if cut_result and cut_result.isValid():
                    cut_count = cut_result.featureCount()
                    cut_layers.append(cut_result)
                    total_cut += cut_count
                else:
                    cut_layers.append(layer)  # Usa original se corte falhar
                    total_cut += layer.featureCount()
            
            # Atualiza layers de processamento com vers√µes cortadas por bioma
            if total_cut < total_original:
                reduction = total_original - total_cut
                percentage = (reduction / total_original) * 100
                from qgis.core import QgsMessageLog, Qgis
                QgsMessageLog.logMessage(f"‚úÖ SUCESSO: Corte por bioma aplicado! {total_original} ‚Üí {total_cut} fei√ß√µes ({percentage:.1f}% redu√ß√£o)", "DesagregaBiomasBR", Qgis.Success)
                
                # NOVO: Registra processamento de corte por bioma
                self.add_processing_log(
                    "CORTE POR BIOMA",
                    f"{total_original} fei√ß√µes ‚Üí {total_cut} fei√ß√µes (redu√ß√£o de {percentage:.1f}%) - Bioma: {self.selected_biome}"
                )
            else:
                # NOVO: Registra quando n√£o houve redu√ß√£o
                self.add_processing_log(
                    "CORTE POR BIOMA",
                    f"{total_original} fei√ß√µes mantidas - Bioma: {self.selected_biome} (dados j√° estavam dentro do bioma)"
                )
            
            self.processing_layers = cut_layers
            
            # OTIMIZA√á√ÉO: Aplica dissolve AP√ìS o corte (s√≥ para modo anual)
            # Agora dissolve apenas os dados do bioma, n√£o do Brasil todo!
            if self.queimadas_data_type == "anual" and len(self.processing_layers) == 1:
                QTimer.singleShot(1000, self.queimadas_step_dissolve_after_cut)
            else:
                # Modo mensal ou sem necessidade de dissolve - continua
                QTimer.singleShot(1000, self.queimadas_check_additional_cut)
            
        except Exception as e:
            from qgis.core import QgsMessageLog, Qgis
            error_msg = f"‚ùå ERRO queimadas_step_apply_biome_cut: {str(e)}"
            QgsMessageLog.logMessage(error_msg, "DesagregaBiomasBR", Qgis.Critical)
            self.status_label.setText(f"‚ùå Erro no corte por bioma: {str(e)}")
            # Continua mesmo com erro de corte
            QTimer.singleShot(1000, self.queimadas_check_additional_cut)
    
    def queimadas_check_additional_cut(self):
        """Verifica se √ÅREA QUEIMADA precisa de corte espacial adicional al√©m do bioma"""
        try:
            # Para √ÅREA QUEIMADA:
            # - SEMPRE aplicamos corte por bioma (j√° foi feito)
            # - SE o usu√°rio selecionou corte adicional (cut_option != 0 e != None), aplicamos tamb√©m
            # - SE n√£o selecionou corte adicional, vamos direto para merge
            
            needs_additional_cut = (
                hasattr(self, 'cut_option') and 
                self.cut_option is not None and 
                self.cut_option != 0
            )
            
            if needs_additional_cut:
                # Tem corte adicional configurado - aplicar
                self.status_label.setText("‚úÇÔ∏è Aplicando corte espacial adicional...")
                QTimer.singleShot(1000, self.real_step_apply_spatial_cut)
            else:
                # N√£o tem corte adicional - s√≥ o corte por bioma √© suficiente
                self.status_label.setText("‚úÖ Corte por bioma conclu√≠do")
                QTimer.singleShot(1000, self.real_step_merge_layers)
            
        except Exception as e:
            from qgis.core import QgsMessageLog, Qgis
            QgsMessageLog.logMessage(f"‚ùå ERRO queimadas_check_additional_cut: {str(e)}", "DesagregaBiomasBR", Qgis.Critical)
            # Em caso de erro, continua para merge
            QTimer.singleShot(1000, self.real_step_merge_layers)

    def get_queimadas_biome_cut_layer(self):
        """Cria layer de corte baseada no bioma selecionado para √ÅREA QUEIMADA"""
        try:
            if not self.ibge_layer:
                return None
            
            # Constr√≥i express√£o de filtro baseada no bioma
            if self.selected_biome == 'Amaz√¥nia Legal':
                # Para Amaz√¥nia Legal, usa coluna 'regiao'
                expression = f'"regiao" = \'Amaz√¥nia Legal\''
            else:
                # Para outros biomas, usa coluna 'bioma' (com b min√∫sculo)
                expression = f'"bioma" = \'{self.selected_biome}\''
            
            # Aplica filtro
            request = QgsFeatureRequest().setFilterExpression(expression)
            
            # Conta quantas fei√ß√µes correspondem ao filtro
            filtered_features = list(self.ibge_layer.getFeatures(request))
            
            if not filtered_features:
                return None
            
            # Cria layer filtrada em mem√≥ria
            filtered_layer = QgsVectorLayer(f"Polygon?crs={self.ibge_layer.crs().authid()}", f"corte_{self.selected_biome}", "memory")
            provider = filtered_layer.dataProvider()
            provider.addAttributes(self.ibge_layer.fields())
            filtered_layer.updateFields()
            
            # Adiciona fei√ß√µes filtradas
            provider.addFeatures(filtered_features)
            filtered_layer.updateExtents()
            
            return filtered_layer
                
        except Exception as e:
            from qgis.core import QgsMessageLog, Qgis
            error_msg = f"‚ùå ERRO get_queimadas_biome_cut_layer: {str(e)}"
            QgsMessageLog.logMessage(error_msg, "DesagregaBiomasBR", Qgis.Critical)
            return None

    def queimadas_step_dissolve_after_cut(self):
        """NOVA ETAPA OTIMIZADA: Aplica dissolve AP√ìS o corte por bioma para maior efici√™ncia"""
        try:
            self.status_label.setText("üîÑ Dissolvendo √°reas queimadas adjacentes (p√≥s-corte)...")
            print(f"üî• DEBUG: Aplicando dissolve otimizado ap√≥s corte por bioma...")
            
            # Pega a layer j√° cortada por bioma
            cut_layer = self.processing_layers[0]
            features_before = cut_layer.featureCount()
            
            print(f"üî• DEBUG: Dissolve p√≥s-corte - processando {features_before} fei√ß√µes do bioma {self.selected_biome}")
            
            # Aplica dissolve nas √°reas queimadas j√° cortadas
            dissolved_layer = self.dissolve_queimadas_layer(cut_layer)
            
            if dissolved_layer and dissolved_layer.isValid():
                features_after = dissolved_layer.featureCount()
                reduction = features_before - features_after
                
                self.processing_layers = [dissolved_layer]
                print(f"‚úÖ DEBUG: Dissolve p√≥s-corte conclu√≠do: {features_before} ‚Üí {features_after} fei√ß√µes")
                
                if reduction > 0:
                    percentage = (reduction / features_before) * 100
                    self.add_processing_log(
                        "DISSOLU√á√ÉO DE √ÅREAS QUEIMADAS",
                        f"{features_before} fei√ß√µes ‚Üí {features_after} fei√ß√µes (redu√ß√£o de {percentage:.1f}%) - Bioma: {self.selected_biome}"
                    )
                else:
                    self.add_processing_log(
                        "DISSOLU√á√ÉO DE √ÅREAS QUEIMADAS",
                        f"{features_before} fei√ß√µes mantidas (sem √°reas adjacentes para unir) - Bioma: {self.selected_biome}"
                    )
                    
                from qgis.core import QgsMessageLog, Qgis
                QgsMessageLog.logMessage(f"‚úÖ SUCESSO: Dissolve p√≥s-corte - {features_before} ‚Üí {features_after} fei√ß√µes", "DesagregaBiomasBR", Qgis.Success)
                
            else:
                # Se dissolve falhar, usa layer cortada mesmo
                print(f"‚ö†Ô∏è DEBUG: Dissolve p√≥s-corte falhou, usando layer cortada")
                self.add_processing_log(
                    "DISSOLU√á√ÉO DE √ÅREAS QUEIMADAS",
                    f"Falha no dissolve - mantendo {features_before} fei√ß√µes cortadas do bioma {self.selected_biome}"
                )
            
            # Continua para verifica√ß√£o de corte adicional
            QTimer.singleShot(1000, self.queimadas_check_additional_cut)
            
        except Exception as e:
            from qgis.core import QgsMessageLog, Qgis
            error_msg = f"‚ùå ERRO queimadas_step_dissolve_after_cut: {str(e)}"
            QgsMessageLog.logMessage(error_msg, "DesagregaBiomasBR", Qgis.Critical)
            self.status_label.setText(f"‚ùå Erro no dissolve: {str(e)}")
            
            # Continua mesmo com erro no dissolve
            QTimer.singleShot(1000, self.queimadas_check_additional_cut)

    # =====================================
    # FUN√á√ïES TERRACLASS
    # =====================================
    
    def populate_terraclass_years(self):
        """Popula os anos baseado no bioma TERRACLASS selecionado"""
        if not self.selected_biome or self.selected_biome not in self.terraclass_years:
            return
        
        # Anos dispon√≠veis para o bioma
        available_years = self.terraclass_years[self.selected_biome]
        
        # Limpa combo
        self.terraclass_year_combo.clear()
        
        # Adiciona op√ß√£o vazia
        self.terraclass_year_combo.addItem("")
        
        # Adiciona anos dispon√≠veis
        for year in available_years:
            self.terraclass_year_combo.addItem(str(year))
        
        # N√ÉO define valor padr√£o - deixa em branco
        self.terraclass_year = None

    def populate_terraclass_states(self):
        """Popula o combo de estados baseado no bioma TERRACLASS selecionado"""
        if not self.selected_biome:
            return
        
        # Carrega o shapefile IBGE se ainda n√£o foi carregado
        if not self.ibge_layer:
            self.load_ibge_shapefile()
        
        if not self.ibge_layer:
            return
        
        # Limpa combo
        self.terraclass_state_combo.clear()
        self.terraclass_state_combo.addItem("")
        
        # Determina filtro baseado no bioma
        expression = f'"bioma" = \'{self.selected_biome}\''
        
        # Aplica filtro e obt√©m estados √∫nicos
        request = QgsFeatureRequest().setFilterExpression(expression)
        states = set()
        
        for feature in self.ibge_layer.getFeatures(request):
            state = feature['estado']
            if state:
                states.add(state)
        
        # Adiciona estados ordenados ao combo
        sorted_states = sorted(states)
        for state in sorted_states:
            self.terraclass_state_combo.addItem(state)
        
        # N√ÉO define estado padr√£o - deixa em branco
        self.terraclass_state = None

    def populate_terraclass_municipalities(self, biome, state):
        """Popula o combo de munic√≠pios baseado na sele√ß√£o de bioma e estado"""
        if not self.ibge_layer:
            return
        
        # Limpa combo
        self.terraclass_municipality_combo.clear()
        self.terraclass_municipality_combo.addItem("")
        
        # Constr√≥i filtro combinado
        expression = f'"bioma" = \'{biome}\' AND "estado" = \'{state}\''
        
        # Aplica filtro e obt√©m munic√≠pios √∫nicos
        request = QgsFeatureRequest().setFilterExpression(expression)
        municipalities = set()
        
        for feature in self.ibge_layer.getFeatures(request):
            municipality = feature['nome']
            if municipality:
                municipalities.add(municipality)
        
        # Adiciona munic√≠pios ordenados ao combo
        for municipality in sorted(municipalities):
            self.terraclass_municipality_combo.addItem(municipality)

    def on_terraclass_year_changed(self, year_text):
        """Callback para mudan√ßa do ano TERRACLASS"""
        try:
            if year_text and year_text.strip():
                self.terraclass_year = int(year_text)
            else:
                self.terraclass_year = None
            
            self.update_terraclass_notes()
            self.update_navigation_buttons()
                
        except Exception as e:
            from qgis.core import QgsMessageLog, Qgis
            QgsMessageLog.logMessage(f"‚ùå ERRO on_terraclass_year_changed: {str(e)}", "DesagregaBiomasBR", Qgis.Critical)
            self.terraclass_year = None

    def on_terraclass_state_changed(self, state_text):
        """Callback para mudan√ßa do estado TERRACLASS"""
        try:
            self.terraclass_state = state_text if state_text and state_text.strip() else None
            
            if self.terraclass_state and self.selected_biome:
                # Popula munic√≠pios quando estado √© selecionado
                self.populate_terraclass_municipalities(self.selected_biome, self.terraclass_state)
            else:
                # Limpa munic√≠pios se estado for desmarcado
                if hasattr(self, 'terraclass_municipality_combo'):
                    self.terraclass_municipality_combo.clear()
                    self.terraclass_municipality_combo.addItem("")
                self.terraclass_municipality = None
            
            self.update_terraclass_notes()
            self.update_navigation_buttons()
                
        except Exception as e:
            from qgis.core import QgsMessageLog, Qgis
            QgsMessageLog.logMessage(f"‚ùå ERRO on_terraclass_state_changed: {str(e)}", "DesagregaBiomasBR", Qgis.Critical)
            self.terraclass_state = None

    def on_terraclass_municipality_changed(self, municipality_text):
        """Callback para mudan√ßa do munic√≠pio TERRACLASS"""
        try:
            self.terraclass_municipality = municipality_text if municipality_text and municipality_text.strip() else None
            
            self.update_terraclass_notes()
            self.update_navigation_buttons()
                
        except Exception as e:
            from qgis.core import QgsMessageLog, Qgis
            QgsMessageLog.logMessage(f"‚ùå ERRO on_terraclass_municipality_changed: {str(e)}", "DesagregaBiomasBR", Qgis.Critical)
            self.terraclass_municipality = None

    def update_terraclass_notes(self):
        """Atualiza as notas com informa√ß√µes do TERRACLASS - INTEGRA√á√ÉO COM INTERFACE RESPONSIVA"""
        if self.selected_theme != "TERRACLASS":
            return
        
        # Para TERRACLASS, integra com o sistema de notas responsivo
        # Atualiza as notas completas que incluem TERRACLASS automaticamente
        self.update_comprehensive_notes_responsive()

    def update_deter_notes(self):
        """Atualiza as notas com informa√ß√µes do DETER - SISTEMA SIMPLIFICADO"""
        if self.current_step != 2 or self.selected_theme != "DETER":
            return
        
        # Apenas informa√ß√µes espec√≠ficas da etapa 2 - n√£o repete config da etapa 1
        status_parts = []
        
        # Informa√ß√µes de classes com l√≥gica inteligente
        if hasattr(self, 'deter_selected_classes') and isinstance(self.deter_selected_classes, list):
            if self.selected_biome and self.selected_biome in self.deter_classes:
                available_classes = self.deter_classes[self.selected_biome]
                total_available = len(available_classes)
                total_selected = len(self.deter_selected_classes)
                
                if total_selected == 0:
                    status_parts.append("‚ö†Ô∏è Classes: Nenhuma selecionada")
                elif total_selected == total_available:
                    status_parts.append(f"‚úÖ Classes: Todas ({total_selected}) - SEM filtro")
                else:
                    status_parts.append(f"üè∑Ô∏è Classes: {total_selected} selecionada(s)")
        
        # Informa√ß√µes de anos
        if hasattr(self, 'deter_start_year') and hasattr(self, 'deter_end_year'):
            if self.deter_start_year and self.deter_end_year:
                status_parts.append(f"üóìÔ∏è Per√≠odo: {self.deter_start_year} - {self.deter_end_year}")
        
        # Atualiza apenas a linha de status (n√£o toda a configura√ß√£o)
        if status_parts:
            self.update_notes(" | ".join(status_parts), "status")
        else:
            self.update_notes("üí° Configure o per√≠odo e classes DETER", "status")

    # =====================================
    # SISTEMA DE ABORTAR DOWNLOAD
    # =====================================

    def abort_processing(self):
        """Aborta o processamento em andamento de forma segura"""
        if not self.download_in_progress:
            return
        
        # Define flag de abort
        self.abort_download = True
        
        # Atualiza interface imediatamente
        self.update_notes("üõë Abortando download... Aguarde alguns segundos", "status")
        self.btn_abort.setText("‚è≥ Abortando...")
        self.btn_abort.setEnabled(False)  # Desabilita botao temporariamente
        self.status_label.setText("üõë Abortando processamento...")
        
        # Forca atualizacao da interface
        QgsApplication.processEvents()

    def reset_download_state(self):
        """Reseta o estado do download para permitir novo processamento"""
        self.abort_download = False
        self.download_in_progress = False
        
        # Restaura interface
        self.progress_bar.setVisible(False)
        self.btn_process.setEnabled(True)
        self.btn_abort.setVisible(False)
        self.btn_abort.setEnabled(True)
        
        # CORRE√á√ÉO: Reseta texto do bot√£o abortar para pr√≥ximo uso
        self.btn_abort.setText("üõë Abortar Download")
        
        # Atualiza notas
        self.update_processing_notes()

    def check_abort_signal(self):
        """Verifica se foi solicitado abortar o download"""
        if self.abort_download:
            # Limpa arquivos tempor√°rios se necess√°rio
            self.cleanup_temp_files()
            
            # Reseta estado
            self.reset_download_state()
            
            # Atualiza interface
            self.update_notes("üõë Download abortado pelo usu√°rio", "status")
            self.status_label.setText("üõë Processamento abortado")
            
            return True
        return False

    def cleanup_temp_files(self):
        """Limpa arquivos tempor√°rios criados durante o download"""
        try:
            import tempfile
            import glob
            temp_dir = tempfile.gettempdir()
            
            # Remove arquivos tempor√°rios relacionados ao plugin
            patterns = [
                f"*{id(self)}*.gml",
                f"*{id(self)}*.shp",
                f"*{id(self)}*.zip"
            ]
            
            for pattern in patterns:
                files = glob.glob(os.path.join(temp_dir, pattern))
                for file in files:
                    try:
                        os.remove(file)
                    except:
                        pass
                        
        except Exception as e:
            from qgis.core import QgsMessageLog, Qgis
            QgsMessageLog.logMessage(f"‚ùå ERRO ao limpar arquivos tempor√°rios: {str(e)}", "DesagregaBiomasBR", Qgis.Warning)

    def start_download_mode(self):
        """Ativa o modo de download com bot√£o de abortar vis√≠vel"""
        self.download_in_progress = True
        self.abort_download = False
        
        # Mostra bot√£o de abortar e esconde bot√£o de processar
        self.btn_process.setVisible(False)
        self.btn_abort.setVisible(True)
        self.btn_abort.setEnabled(True)
        
        # CORRE√á√ÉO: Garante que o texto do bot√£o esteja correto
        self.btn_abort.setText("üõë Abortar Download")
        
        # Desabilita outros bot√µes durante download
        self.btn_back.setEnabled(False)
        self.btn_next.setEnabled(False)
        self.btn_finish.setEnabled(False)

    def end_download_mode(self, success=True):
        """Desativa o modo de download e restaura interface normal"""
        self.download_in_progress = False
        self.abort_download = False
        
        # Esconde barra de progresso
        self.progress_bar.setVisible(False)
        
        # Restaura bot√µes principais
        self.btn_process.setVisible(True)
        self.btn_abort.setVisible(False)
        
        if success:
            self.btn_process.setEnabled(True)
            self.btn_process.setText("üîÑ Processar Novamente")
        else:
            self.btn_process.setEnabled(True)
            self.btn_process.setText("üöÄ Iniciar Processamento")
        
        # Reabilita outros bot√µes
        self.btn_back.setEnabled(True)
        self.btn_next.setEnabled(True)
        self.btn_finish.setEnabled(True)


